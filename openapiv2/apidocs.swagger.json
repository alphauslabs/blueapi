{
  "swagger": "2.0",
  "info": {
    "title": "Alphaus Blue API reference",
    "description": "Alphaus provides an API for interacting with its services. Blue API is a RESTful API that can be accessed by an HTTP client such as `curl`, or any HTTP library which is part of most modern programming languages. This API reference is autogenerated from [protocol buffers](https://developers.google.com/protocol-buffers) defined in this [repository](https://github.com/alphauslabs/blueapi), together with our supported [client libraries](https://alphauslabs.github.io/docs/blueapi/client-sdks/). See the official [documentation](https://alphauslabs.github.io/docs/blueapi/overview/) for more information.\n\nYou may encounter the following feature maturity indicators:\n- **(WORK-IN-PROGRESS)** - Development is ongoing, don't use yet;\n- **(BETA)** - New or experimental features, subject to changes; and\n- **(Deprecated)** - Outdated or replaced features.\n\nSome endpoints, especially those that return lists of resources, have streaming responses; newline-separated stream of “chunks”. Each chunk is an envelope that can contain either a response message or an error. Only the last chunk will include an error, if any.",
    "version": "v0.beta",
    "contact": {
      "name": "Alphaus: Blue API",
      "url": "https://alphauslabs.github.io/docs/blueapi/overview/"
    },
    "license": {
      "name": "License: Apache License 2.0",
      "url": "https://github.com/alphauslabs/blueapi/blob/main/LICENSE"
    }
  },
  "tags": [
    {
      "name": "Organization",
      "description": "(BETA) Organization API. Base URL: https://api.alphaus.cloud/m/blue",
      "externalDocs": {
        "description": "Service definition",
        "url": "https://github.com/alphauslabs/blueapi/tree/main/org/"
      }
    },
    {
      "name": "KvStore",
      "description": "(BETA) KvStore API. Base URL: https://api.alphaus.cloud/m/blue/kv",
      "externalDocs": {
        "description": "Service definition",
        "url": "https://github.com/alphauslabs/blueapi/tree/main/kvstore/"
      }
    },
    {
      "name": "Iam",
      "description": "(BETA) IAM API. Base URL: https://api.alphaus.cloud/m/blue",
      "externalDocs": {
        "description": "Service definition",
        "url": "https://github.com/alphauslabs/blueapi/tree/main/iam/"
      }
    },
    {
      "name": "Admin",
      "description": "(BETA) Admin API. Base URL: https://api.alphaus.cloud/m/blue",
      "externalDocs": {
        "description": "Service definition",
        "url": "https://github.com/alphauslabs/blueapi/tree/main/admin/"
      }
    },
    {
      "name": "Cost",
      "description": "(BETA) Cost API. Base URL: https://api.alphaus.cloud/m/blue/cost",
      "externalDocs": {
        "description": "Service definition",
        "url": "https://github.com/alphauslabs/blueapi/tree/main/cost/"
      }
    },
    {
      "name": "Billing",
      "description": "(BETA) Billing API. Base URL: https://api.alphaus.cloud/m/blue/billing",
      "externalDocs": {
        "description": "Service definition",
        "url": "https://github.com/alphauslabs/blueapi/tree/main/billing/"
      }
    },
    {
      "name": "Operations",
      "description": "(BETA) Long operations API. Base URL: https://api.alphaus.cloud/m/blue",
      "externalDocs": {
        "description": "Service definition",
        "url": "https://github.com/alphauslabs/blueapi/tree/main/operations/"
      }
    },
    {
      "name": "Preferences",
      "description": "(BETA) Preferences API. Base URL: https://api.alphaus.cloud/m/blue",
      "externalDocs": {
        "description": "Service definition",
        "url": "https://github.com/alphauslabs/blueapi/tree/main/preferences/"
      }
    }
  ],
  "host": "api.alphaus.cloud",
  "basePath": "/m/blue",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/admin/v1/acctgroups": {
      "get": {
        "summary": "Lists all account groups.",
        "operationId": "Admin_ListAccountGroups",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1ListAccountGroupsResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1ListAccountGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/v1/acctgroups/{id}": {
      "get": {
        "summary": "Gets an account group.",
        "operationId": "Admin_GetAccountGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAccountGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/v1/aws/crossacctaccess/default": {
      "get": {
        "summary": "WORK-IN-PROGRESS: Gets a CloudFormation launch url for enabling cross-account access to your account's billing information.\nUpon successful deployment, you need to validate the access by calling 'POST /admin/v1/aws/crossacctaccess/default'.",
        "operationId": "Admin_GetDefaultBillingInfoTemplateUrl",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDefaultBillingInfoTemplateUrlResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "region",
            "description": "Optional. Set to the desired target region code. Defaults to 'ap-northeast-1' (Tokyo).\nYou can still change the final target region in the CloudFormation console before\nthe stack creation. You can check https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions\nfor the region list.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Admin"
        ]
      },
      "post": {
        "summary": "WORK-IN-PROGRESS: Starts validation of a cross-account access stack deployment. If successful,\nthe new IAM role will be registered to the target account.",
        "operationId": "Admin_CreateDefaultBillingInfoRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DefaultBillingInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateDefaultBillingInfoRoleRequest"
            }
          }
        ],
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/v1/aws/crossacctaccess/default/{target}": {
      "get": {
        "summary": "WORK-IN-PROGRESS: Gets the current role attached to input account.",
        "operationId": "Admin_GetDefaultBillingInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DefaultBillingInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "target",
            "description": "Required. The target AWS account to query.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Admin"
        ]
      },
      "delete": {
        "summary": "WORK-IN-PROGRESS: Deletes the current role attached to this target account. This does not delete the\nCloudFormation deployment in your account.",
        "operationId": "Admin_DeleteDefaultBillingInfoRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "target",
            "description": "Required. The target AWS account to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Admin"
        ]
      },
      "put": {
        "summary": "WORK-IN-PROGRESS: Starts an update to an existing CloudFormation for template changes, if any.",
        "operationId": "Admin_UpdateDefaultBillingInfoRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/blueapiapiOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "target",
            "description": "Required. The target AWS account to update.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Admin"
        ]
      }
    },
    "/iam/v1/apiclients": {
      "get": {
        "summary": "Lists all API clients belonging to the caller.",
        "operationId": "Iam_ListApiClients",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/apiApiClient"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of apiApiClient"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Iam"
        ]
      },
      "post": {
        "summary": "Creates an API client for the caller.",
        "operationId": "Iam_CreateApiClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiApiClient"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateApiClientRequest"
            }
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/apiclients/{id}": {
      "delete": {
        "summary": "Deletes an API client belonging to the caller.",
        "operationId": "Iam_DeleteApiClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Required. The client id to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/grouprootusers": {
      "get": {
        "summary": "WORK IN PROGRESS\nRetrieves all the existing group root users asscoiated with the organization.",
        "operationId": "Iam_ListGroupRootUsers",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/apiGroupRootUser"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of apiGroupRootUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Iam"
        ]
      },
      "post": {
        "summary": "WORK IN PROGRESS:\nCreates a new root user for a billing group or access group.",
        "operationId": "Iam_CreateGroupRootUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGroupRootUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateGroupRootUserRequest"
            }
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/grouprootusers/{id}": {
      "get": {
        "summary": "WORK IN PROGRESS:\nRetrieves an group root user.",
        "operationId": "Iam_GetGroupRootUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGroupRootUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Iam"
        ]
      },
      "delete": {
        "summary": "WORK IN PROGRESS\nDeletes an existing group root user.",
        "operationId": "Iam_DeleteGroupRootUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/grouprootusers/{id}/features": {
      "get": {
        "summary": "WORK IN PROGRESS:\nRetrieves the features available to a user on an Alphaus product. For a list of\nvalid feature flags, see our documentation at https://alphauslabs.github.io/blueapi/apis/iam.html.",
        "operationId": "Iam_GetFeatureFlags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiFeatureFlags"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Iam"
        ]
      },
      "put": {
        "summary": "WORK IN PROGRESS:\nUpdates the features available to a user on an Alphaus product. For a list of\nvalid feature flags, see our documentation at https://alphauslabs.github.io/blueapi/apis/iam.html.",
        "operationId": "Iam_UpdateFeatureFlags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiFeatureFlags"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateFeatureFlagsRequest"
            }
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/idps": {
      "get": {
        "summary": "Lists all SSO Identity Providers (IdP).",
        "operationId": "Iam_ListIdentityProviders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListIdentityProvidersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Iam"
        ]
      },
      "post": {
        "summary": "Registers an SSO Identity Provider (IdP).",
        "operationId": "Iam_CreateIdentityProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateIdentityProviderRequest"
            }
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/idps/{id}": {
      "delete": {
        "summary": "Deletes an SSO Identity Provider (IdP).",
        "operationId": "Iam_DeleteIdentityProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Required. The IdP id to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/ipfilters": {
      "get": {
        "summary": "Lists all IP filters. At the moment, this API is only available to root users.",
        "operationId": "Iam_ListIpFilters",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1IpFilter"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1IpFilter"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Iam"
        ]
      },
      "post": {
        "summary": "Creates an IP filter item for IP blacklisting or whitelisting. At the moment,\nthis API is only available to root users.",
        "operationId": "Iam_CreateIpFilter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IpFilter"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateIpFilterRequest"
            }
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/ipfilters/{id}": {
      "delete": {
        "summary": "Deletes an IP filter item. At the moment, this API is only available to root users.",
        "operationId": "Iam_DeleteIpFilter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The IP filter id to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/permissions": {
      "get": {
        "summary": "Lists all permissions based on the input's scope. For reference, supported\npermissions can be found on [https://github.com/mobingi/rbac-permissions].",
        "operationId": "Iam_ListPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "subUser",
            "description": "Optional. The subuser to query. If empty (default), query all available permissions.\nIf set to a valid subuser, query that subuser's permissions, if allowed. You can\nalso set this field to `me` to query your own permissions.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/roles": {
      "get": {
        "summary": "Lists all available roles.",
        "operationId": "Iam_ListRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Optional. If not set, all roles will be returned.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Iam"
        ]
      },
      "post": {
        "summary": "Creates a role. If your `permissions` list contains an `Admin` entry, all other\nentries will be discarded except `Admin`. Roles are root user-level. That means\nall roles created by the root user, or any subuser that has permissions to\ncreate roles, are available to all subusers.",
        "operationId": "Iam_CreateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiRole"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateRoleRequest"
            }
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/roles/{namespace}/{name}": {
      "delete": {
        "summary": "Deletes a role. Deleting a role will also remove all mappings.",
        "operationId": "Iam_DeleteRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The parent namespace.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The role name to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Iam"
        ]
      },
      "put": {
        "summary": "Updates a role. If role name is different, rename mapped role name.",
        "operationId": "Iam_UpdateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiRole"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The new namespace.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The role name to update.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateRoleRequest"
            }
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/userroles": {
      "get": {
        "summary": "Lists roles attached to the caller or the input.",
        "operationId": "Iam_ListUserRoleMappings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUserRoleMappingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "subUser",
            "description": "Optional. The subuser to query. Defaults to caller if not set.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Iam"
        ]
      },
      "post": {
        "summary": "Maps roles to a subuser. You can only map (or attach) up to 5 roles to a user per namespace.\nThere is no limit for filtering rules per user.",
        "operationId": "Iam_CreateUserRoleMapping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateUserRoleMappingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateUserRoleMappingRequest"
            }
          }
        ],
        "tags": [
          "Iam"
        ]
      },
      "put": {
        "summary": "Updates user-to-role mappings. You can only map (or attach) up to 5 roles to a user per namespace.\nThere is no limit for filtering rules per user.",
        "operationId": "Iam_UpdateUserRoleMapping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateUserRoleMappingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateUserRoleMappingRequest"
            }
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/users": {
      "get": {
        "summary": "Lists all subusers.",
        "operationId": "Iam_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/apiUser"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of apiUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Iam"
        ]
      },
      "post": {
        "summary": "Creates a subuser.",
        "operationId": "Iam_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateUserRequest"
            }
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/users/{id}": {
      "get": {
        "summary": "Gets subuser information. This call includes all of the subuser metadata. See\n[https://alphauslabs.github.io/blueapi/] for the list of supported attributes.\nIf the `{name}` parameter is `me` or `-`, returns the caller information, which\nis equivalent to `WhoAmI()` or `GET:/iam/v*/whoami`.",
        "operationId": "Iam_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Iam"
        ]
      },
      "delete": {
        "summary": "Deletes a subuser.",
        "operationId": "Iam_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Required. The subuser name to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/whoami": {
      "get": {
        "summary": "Gets user information about the caller. This call includes all of the user metadata.\nSee [https://alphauslabs.github.io/blueapi/] for the list of supported attributes.",
        "operationId": "Iam_WhoAmI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Iam"
        ]
      }
    },
    "/ops/v1": {
      "get": {
        "summary": "Lists long-running operations.",
        "operationId": "Operations_ListOperations",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/blueapiapiOperation"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of blueapiapiOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Optional. The name of the operation's parent resource. Not used at the moment.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "asOf",
            "description": "Optional. List operations on and after this date. Format is yyyymmdd. For example,\nif you want to list all operations starting from June 01, 2021, set to `20210601`.\nIf not set, defaults to the first day of the current UTC month.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeDone",
            "description": "Optional. If true, include all operations that are marked as done. Exclude by\ndefault.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Operations"
        ]
      }
    },
    "/ops/v1/{name}": {
      "get": {
        "summary": "Gets the latest state of a long-running operation. You can use this method to\npoll the operation result at intervals.",
        "operationId": "Operations_GetOperation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/blueapiapiOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the operation resource.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Operations"
        ]
      },
      "delete": {
        "summary": "Deletes a long-running operation. This method indicates that the client is no\nlonger interested in the operation result. It does not cancel the operation.",
        "operationId": "Operations_DeleteOperation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the operation resource to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Operations"
        ]
      }
    },
    "/ops/v1/{name}:cancel": {
      "post": {
        "summary": "Starts asynchronous cancellation on a long-running operation. The server makes\na best effort to cancel the operation, but success is not guaranteed. On successful\ncancellation, the operation is not deleted; instead, it becomes an operation with\na value of [google.rpc.Status.code][google.rpc.Status.code] 1, corresponding\nto `Code.CANCELLED`.",
        "operationId": "Operations_CancelOperation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the operation resource to be cancelled.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CancelOperationRequest"
            }
          }
        ],
        "tags": [
          "Operations"
        ]
      }
    },
    "/org/v1": {
      "get": {
        "summary": "Gets information about the caller's organization.",
        "operationId": "Organization_GetOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rippleOrg"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Organization"
        ]
      },
      "delete": {
        "summary": "WORK-IN-PROGRESS: Deletes the organization.",
        "operationId": "Organization_DeleteOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Organization"
        ]
      },
      "post": {
        "summary": "Creates the organization account.",
        "operationId": "Organization_CreateOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateOrgResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateOrgRequest"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/org/v1/metadata": {
      "put": {
        "summary": "WORK-IN-PROGRESS: Updates organization metadata. See [https://alphauslabs.github.io/blueapi/]\nfor the list of supported attributes.",
        "operationId": "Organization_UpdateMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateMetadataRequest"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/org/v1/passwd": {
      "put": {
        "summary": "Updates the organization password.",
        "operationId": "Organization_UpdatePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePasswordRequest"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/org/v1:sendVerification": {
      "post": {
        "summary": "WORK-IN-PROGRESS: Sends (or resends) the verification email. Only valid for unverified\norganizations. The verification key will be valid for a day.",
        "operationId": "Organization_SendVerification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Organization"
        ]
      }
    },
    "/org/v1:verify": {
      "post": {
        "summary": "WORK-IN-PROGRESS: Verifies an organization using the key received from the verification email.\nThe verification key is only valid for a day.",
        "operationId": "Organization_VerifyOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Organization"
        ]
      }
    },
    "/prefs/v1": {
      "get": {
        "summary": "WORK-IN-PROGRESS: Gets current preferences.",
        "operationId": "Preferences_GetPreferences",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Preference"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Preferences"
        ]
      }
    },
    "/v1": {
      "post": {
        "summary": "Writes a new (or update an existing) key:value data in your store.",
        "operationId": "KvStore_Write",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kvstorev1KeyValue"
            }
          }
        ],
        "tags": [
          "KvStore"
        ]
      }
    },
    "/v1/accessgroups/{accessGroupId}": {
      "get": {
        "summary": "WORK-IN-PROGRESS: Gets an access group.",
        "operationId": "Billing_GetAccessGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAccessGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accessGroupId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/v1/aws/cur:import": {
      "post": {
        "summary": "Initiates an ondemand import of all registered CUR files. See\n[https://help.alphaus.cloud/en/articles/3612555-ripple-aws-things-you-need-to-prepare-before-starting]\nfor more information.",
        "operationId": "Cost_ImportCurFiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/blueapiapiOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ImportCurFilesRequest"
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/billinggroups": {
      "get": {
        "summary": "Lists all billing groups.",
        "operationId": "Billing_ListBillingGroups",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1BillingGroup"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1BillingGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Billing"
        ]
      },
      "post": {
        "summary": "Registers a billing group.",
        "operationId": "Billing_CreateBillingGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BillingGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateBillingGroupRequest"
            }
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/v1/billinggroups/{billingInternalId}": {
      "get": {
        "summary": "Gets a billing group.",
        "operationId": "Billing_GetBillingGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetBillingGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "billingInternalId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Billing"
        ]
      }
    },
    "/v1/keys": {
      "get": {
        "summary": "Scans key:value data from your store.",
        "operationId": "KvStore_Scan",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/kvstorev1KeyValue"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of kvstorev1KeyValue"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "like",
            "description": "Optional. If non-empty, translates to SQL's `LIKE` operand.\nReturn all keys by default.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "KvStore"
        ]
      }
    },
    "/v1/keys/{key}": {
      "get": {
        "summary": "Reads a key:value data from your store.",
        "operationId": "KvStore_Read",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/kvstorev1KeyValue"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "description": "Required. The key to read.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "KvStore"
        ]
      },
      "delete": {
        "summary": "Deletes a key:value data from your store.",
        "operationId": "KvStore_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "description": "Required. The key to delete. To delete all keys, set this to `-` (hyphen).\nYou can also prefix this with `like:` which translates to SQL's LIKE operator.\nFor example, `like:%pattern%`.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "KvStore"
        ]
      }
    },
    "/v1/{vendor}/accounts": {
      "get": {
        "summary": "Lists all vendor accounts.",
        "operationId": "Cost_ListAccounts",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/apiAccount"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of apiAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      },
      "post": {
        "summary": "Registers a vendor account.",
        "operationId": "Cost_CreateAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAccountRequest"
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/accounts/{id}": {
      "get": {
        "summary": "Gets a vendor account. This API includes all of the account's metadata. See\nhttps://alphauslabs.github.io/blueapi/ for the list of supported attributes.",
        "operationId": "Cost_GetAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. The account id to retrieve.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      },
      "delete": {
        "summary": "Deletes a vendor account.",
        "operationId": "Cost_DeleteAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. The account id to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/adjustments:read": {
      "post": {
        "summary": "Reads the non-usage-based details of an organization (Ripple) or billing group (Wave).\nThis API covers non-usage-based adjustments, such as Fees, Credits, Discounts, Tax,\nUpfront Fees, etc. At the moment, the supported {vendor} is 'aws'. If datetime\nrange parameters are not set, month-to-date (current month) will be returned.",
        "operationId": "Cost_ReadAdjustments",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1CostItem"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1CostItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ReadAdjustmentsRequest"
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/budget/{budgetId}": {
      "delete": {
        "summary": "Removes monthly budget for the account/acctgroup id from database.",
        "operationId": "Cost_DeleteAccountBudget",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "budgetId",
            "description": "Required. Budget Id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      },
      "put": {
        "summary": "Updates monthly budget for the account/acctgroup id.",
        "operationId": "Cost_UpdateAccountBudget",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "budgetId",
            "description": "Required. Budget Id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateAccountBudgetRequest"
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/budget/{level}/{id}": {
      "get": {
        "summary": "Fetches monthly budget for the account/acctgroup id.",
        "operationId": "Cost_GetAccountBudget",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAccountBudgetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "level",
            "description": "Required. 'account' or 'acctgroup'",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. Account or AccountGroup Id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "year",
            "description": "Optional. Default is current year\nFormat: yyyy.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      },
      "post": {
        "summary": "Creates monthly budget for the account/acctgroup id.",
        "operationId": "Cost_CreateAccountBudget",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateAccountBudgetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "level",
            "description": "Required. 'account' or 'acctgroup'",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. Account or AccountGroup Id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAccountBudgetRequest"
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/calculations/history": {
      "get": {
        "summary": "Lists vendor costs calculations history and statuses. Note that status information is sometimes unstable.",
        "operationId": "Cost_ListCalculationsHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCalculationsHistoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "asOf",
            "description": "Optional. List operations on and after this date. Format is yyyymmdd. For example,\nif you want to list all operations starting from June 01, 2021, set to `20210601`.\nIf not set, defaults to the first day of the current UTC month.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "excludeDone",
            "description": "Optional. If true, exclude all operations that are marked as done. Include by\ndefault.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/calculator/config": {
      "get": {
        "summary": "WORK-IN-PROGRESS: Gets the vendor cost calculator's current configuration.",
        "operationId": "Cost_GetCalculatorConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCalculatorConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/calculator/status": {
      "get": {
        "summary": "WORK-IN-PROGRESS: Gets the vendor cost calculator's current status.",
        "operationId": "Cost_GetCalculatorStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCalculatorStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "month",
            "description": "Optional. The UTC month to query. Defaults to current month if empty.\nFormat is `yyyymm`. For example, June 2021 will be `202106`.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/costs:calculate": {
      "post": {
        "summary": "Triggers monthly calculations for costs and invoices at either organization or billing group level.\nFor the AWS calculator, aggregation is done at daily and monthly level. Also, all occurrences of the\ncharacter `|` (pipe) in the CUR descriptions and tag key/values are replaced with the `/` (forward-slash)\ncharacter. This is due to the `|` character having a special designation in the data processing workflows.",
        "operationId": "Cost_CalculateCosts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/blueapiapiOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CalculateCostsRequest"
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/costs:read": {
      "post": {
        "summary": "Reads the usage-based cost details of an organization (Ripple) or billing group (Wave).\nAt the moment, the supported {vendor} is 'aws'. If datetime range parameters are\nnot set, month-to-date (current month) will be returned.",
        "operationId": "Cost_ReadCosts",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1CostItem"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1CostItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ReadCostsRequest"
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/coverage/ondemand/{orgId}:read": {
      "post": {
        "summary": "WORK-IN-PROGRESS: Get ondemand cost details for an organization (or MSP).",
        "operationId": "Cost_GetCoverageOndemand",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCoverageOndemandResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgId",
            "description": "Required. Organization Id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetCoverageOndemandRequest"
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/coverage/options/{orgId}:read": {
      "post": {
        "summary": "WORK-IN-PROGRESS: Get coverage options details for an organization (or MSP).",
        "operationId": "Cost_GetCoverageOptions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCoverageOptionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgId",
            "description": "Required. Organization Id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetCoverageOptionsRequest"
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/forecasts": {
      "get": {
        "summary": "Fetches cost forecasts for the specified billing group.\nIncludes historical cost (up to previous month) and forecasted cost (up to three months for now).",
        "operationId": "Cost_GetForecasts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetForecastsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "billingInternalId",
            "description": "Optional. Company Id of Billing Group to retrieve.\nDefault value is user's Company Id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "frequency",
            "description": "Optional. Forecast frequency. Valid values are `daily` and `monthly`. \nDefault value is `daily`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "level",
            "description": "Optional. Forecast granularity. Valid values are `account`, `category` and `product`.\nDefault value is `account`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fromDate",
            "description": "Optional. Start date to get cost forecast. \nIf from_date is less than current date, historical costs are included.\nIf from_date is greater than current date, only forecasted costs are returned.\nFormat: `yyyy-mm-dd`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "toDate",
            "description": "Optional. End date to get cost forecast. \nCurrently, we only support 90 days forecasting from the first day of current month.\nFormat: `yyyy-mm-dd`.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/forecasts/month-on-month/{level}/{id}": {
      "get": {
        "summary": "Fetches previous month cost vs current month forecast vs current accumulated cost per category for id.",
        "operationId": "Cost_GetMonthOnMonthCostForecast",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMonthOnMonthCostForecastResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "level",
            "description": "Required. 'account' or 'acctgroup'",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. Account or AccountGroup Id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "date",
            "description": "Optional. Default is current month. \nFormat: yyyymm.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/forecasts/month-to-date/{level}/{id}": {
      "get": {
        "summary": "Fetches current month daily forecast vs current accumulated daily cost for id.",
        "operationId": "Cost_GetMonthToDateCostForecast",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMonthToDateCostForecastResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "level",
            "description": "Required. 'account' or 'acctgroup'",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. Account or AccountGroup Id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "date",
            "description": "Optional. Default is current month. \nFormat: yyyymm.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/forecasts/monthly/{level}/{id}": {
      "get": {
        "summary": "Fetches monthly accumulated costs vs forecasted cost vs budget for the id.",
        "operationId": "Cost_GetMonthlyCostForecast",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMonthlyCostForecastResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "level",
            "description": "Required. 'account' or 'acctgroup'",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. Account or AccountGroup Id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fromDate",
            "description": "Optional. Start month to get cost forecast. \nFormat: `yyyymm`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "toDate",
            "description": "Optional. Last month to get cost forecast. \nFormat: `yyyymm`.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/nontagcosts:read": {
      "post": {
        "summary": "Reads the usage-based non tag costs of a billing group. At the moment, the supported {vendor} is \n'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.",
        "operationId": "Cost_ReadNonTagCosts",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1CostItem"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1CostItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ReadNonTagCostsRequest"
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/payers": {
      "get": {
        "summary": "Lists vendor payer accounts. For AWS, these are management accounts (formerly known\nas master or payer accounts); for Azure, these are subscriptions, for GCP, these\nare projects.",
        "operationId": "Cost_ListPayerAccounts",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/apiAccount"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of apiAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      },
      "post": {
        "summary": "Registers a vendor payer account.",
        "operationId": "Cost_CreatePayerAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePayerAccountRequest"
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/payers/{id}": {
      "get": {
        "summary": "Gets a vendor payer account. This API includes all of the account's metadata.\nSee https://alphauslabs.github.io/blueapi/ for the list of supported attributes.\nFor AWS, this means a management account (formerly known as master or payer account);\nfor Azure, this means a subscription, for GCP, this means a project.",
        "operationId": "Cost_GetPayerAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ripplePayer"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. The id of the account to get.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      },
      "delete": {
        "summary": "Deletes a vendor payer account.",
        "operationId": "Cost_DeletePayerAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. The id of the account.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/payers/{id}/importhistory": {
      "get": {
        "summary": "Gets a payer account's import history, which is a list of timestamps our system tracks when the account's data are\nimported to our system, which in turn, triggers processing. At the moment, this only supports AWS (CUR files).\nYou can also set {id} to `*` to return all payers' information under the organization.",
        "operationId": "Cost_GetPayerAccountImportHistory",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1GetPayerAccountImportHistoryResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1GetPayerAccountImportHistoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. The account id to query. Could be `*`, which implies all payers.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "month",
            "description": "Optional. The UTC month to query. If empty, defaults to current month.\nFormat is `yyyymm`. For example, June 2021 will be `202106`.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/recommendations/{orgId}:read": {
      "post": {
        "summary": "WORK-IN-PROGRESS: Get cost opmtimization recommendations for an organization (or MSP).",
        "operationId": "Cost_GetRecommendations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRecommendationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgId",
            "description": "Required. Organization Id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetRecommendationsRequest"
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/reduction/{orgId}:read": {
      "post": {
        "summary": "Get cost reduction details for an organization (or MSP).",
        "operationId": "Cost_GetCostReduction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCostReductionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgId",
            "description": "Required. Organization Id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetCostReductionRequest"
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/tagcosts:read": {
      "post": {
        "summary": "Reads the usage-based tag costs of a billing group. At the moment, the supported {vendor} is \n'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.",
        "operationId": "Cost_ReadTagCosts",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1CostItem"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1CostItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ReadTagCostsRequest"
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/utilization/{orgId}": {
      "get": {
        "summary": "WORK-IN-PROGRESS: Get the utilization details for an organization (or MSP).",
        "operationId": "Cost_GetUtilization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUtilizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgId",
            "description": "Required. Organization Id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "description": "Required. For AWS, \"ri\" or \"sp\".",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fromDate",
            "description": "Optional. The start date of the displayed data. If not set, the first day of the\ncurrent month will be used. Format: yyyy-mm-dd.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "toDate",
            "description": "Optional. The end date of the displayed data. If not set, current date will be\nused. Format: yyyy-mm-dd.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "payerId",
            "description": "Optional. Payer Id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingInternalId",
            "description": "Optional. Billing group Id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupId",
            "description": "Optional. Account group Id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    }
  },
  "definitions": {
    "GetCalculatorStatusResponseAwsStatus": {
      "type": "object",
      "properties": {
        "month": {
          "type": "string",
          "description": "The queried month. Format is yyyy-mm."
        },
        "lastCompleted": {
          "type": "string",
          "description": "The last timestamp in UTC of the completed calculation at org-level for the\nqueried month. Format is RFC3339. Note that these calculations are not the same\nas the invoice calculations you manually request every month; these are the\ndaily calculations in response to daily CUR updates, which provides data to\nyour daily graphs, reports, and daily budget alerts. An empty value means\ncalculations hasn't started yet for the queried month."
        },
        "currentProgress": {
          "type": "number",
          "format": "double",
          "description": "Calculation completion state in percent, i.e. 70 means 70%. Any value other\nthan 100 means there is still an ongoing calculation, otherwise, this field\nis set to 100. The percentage value means the number of AWS accounts completed\nover the total accounts under the organization for the given month."
        }
      }
    },
    "IdentityProvidersamlInfo": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "string"
        }
      }
    },
    "ListIdentityProvidersResponseIdentityProvider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "saml": {
          "$ref": "#/definitions/IdentityProvidersamlInfo"
        }
      }
    },
    "apiAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The account id."
        },
        "name": {
          "type": "string",
          "description": "The account name."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/blueapiapiKeyValue"
          },
          "description": "The attributes (key/value pair) of the account."
        }
      }
    },
    "apiAccountGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The AccountGroup id."
        },
        "name": {
          "type": "string",
          "description": "The AccountGroup name."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/blueapiapiKeyValue"
          },
          "description": "The attributes (key/value pair) of the AccountGroup."
        },
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiAccount"
          }
        }
      }
    },
    "apiApiClient": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "description": "API client id."
        },
        "clientSecret": {
          "type": "string",
          "description": "API client secret. Only available during creation; otherwise, redacted."
        },
        "name": {
          "type": "string",
          "description": "API client name."
        },
        "grantType": {
          "type": "string",
          "description": "Grant type. Always set to `client_credentials`."
        },
        "parent": {
          "type": "string",
          "description": "The client's parent resource."
        },
        "createTime": {
          "type": "string"
        }
      }
    },
    "apiBillingGroupForecast": {
      "type": "object",
      "properties": {
        "billingInternalId": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiForecastData"
          }
        }
      }
    },
    "apiBudget": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "fiscalYear": {
          "type": "string",
          "title": "Format: yyyy"
        },
        "monthlyBudget": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiMonthlyBudget"
          }
        }
      }
    },
    "apiChartData": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "cost": {
          "type": "number",
          "format": "double"
        },
        "profit": {
          "type": "number",
          "format": "double"
        },
        "utilization": {
          "type": "number",
          "format": "double"
        },
        "commitment": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiFeatureFlags": {
      "type": "object",
      "properties": {
        "dashboardGraph": {
          "type": "boolean",
          "title": "Control view-access to the Wave dashboard graph"
        },
        "usageAccount": {
          "type": "boolean",
          "title": "Control access to the Accounts pane under usage reports on Wave"
        },
        "usageAccountGraph": {
          "type": "boolean",
          "title": "Control view-access to the Account-level graph under usage reports on Wave"
        },
        "usageAccountMenuAccountEdit": {
          "type": "boolean",
          "title": "Control edit-access to Accounts under usage reports on Wave"
        },
        "usageAccountMenuBudget": {
          "type": "boolean",
          "title": "Control view-access to budget settings for an Account under usage reports on Wave"
        },
        "usageAccountMenuBudgetEdit": {
          "type": "boolean",
          "title": "Control edit-access to budget settings for an Account under usage reports on Wave"
        },
        "usageAccountMenuFeesFee": {
          "type": "boolean",
          "title": "Control view-access to the fees menu for an Account under usage reports on Wave"
        },
        "usageAccountMenuFeesCredit": {
          "type": "boolean",
          "title": "Control view-access to credits for an Account under usage reports on Wave"
        },
        "usageAccountMenuFeesRefund": {
          "type": "boolean",
          "title": "Control view-access to refunds for an Account under usage reports on Wave"
        },
        "usageAccountMenuFeesOtherFees": {
          "type": "boolean",
          "title": "Control view-access to other fees for an Account under usage reports on Wave"
        },
        "usageReportDownload": {
          "type": "boolean",
          "title": "Control download-access to usage report on Wave"
        },
        "usageGroup": {
          "type": "boolean",
          "title": "Control access to the Groups pane under usage reports on Wave"
        },
        "usageGroupGraph": {
          "type": "boolean",
          "title": "Control view-access to the Group-level graph under usage reports on Wave"
        },
        "usageTag": {
          "type": "boolean",
          "title": "Control view-access to the Tags pane under usage reports on Wave"
        },
        "usageTagGraph": {
          "type": "boolean",
          "title": "Control view-access to the Tag-level graph under usage reports on Wave"
        },
        "usageCrosstag": {
          "type": "boolean",
          "title": "Control view-access to the Tags pane for crosstag groups under usage reports on Wave"
        },
        "usageCrosstagGraph": {
          "type": "boolean",
          "title": "Control view-access to the Tag-level graph for crosstag groups under usage reports on Wave"
        },
        "riPurchased": {
          "type": "boolean",
          "title": "Control view-access to purchased reservations under reserved instances on Wave"
        },
        "riUtilization": {
          "type": "boolean",
          "title": "Control access to RI utilization under reserved instances on Wave"
        },
        "riRecommendation": {
          "type": "boolean",
          "title": "Control access to RI recommendations on Wave"
        },
        "spPurchased": {
          "type": "boolean",
          "title": "Control access to purchased savings plans on Wave"
        },
        "invoice": {
          "type": "boolean",
          "title": "Control access to the invoice on Wave"
        },
        "invoiceDownloadCsvDiscount": {
          "type": "boolean",
          "title": "Control download-access to the discounted invoice CSV on Wave"
        },
        "invoiceDownloadCsvMerged": {
          "type": "boolean",
          "title": "Control download-access to the merged invoice CSV on Wave"
        },
        "openApi": {
          "type": "boolean",
          "title": "Control access to API tokens on Wave"
        },
        "usersManagement": {
          "type": "boolean",
          "title": "Control access to sub-user management on Wave"
        },
        "aqCoverageRatio": {
          "type": "boolean",
          "title": "Control access to the Coverage Ratio pane on Aqua"
        },
        "aqRiManagement": {
          "type": "boolean",
          "title": "Control access to the RI management pane on Aqua"
        },
        "aqSpManagement": {
          "type": "boolean",
          "title": "Control access to the savings plan management pane on Aqua"
        },
        "aqRiSpInstances": {
          "type": "boolean",
          "title": "Control access to RI and savings plan recommendations on Aqua"
        },
        "aqRightSizing": {
          "type": "boolean",
          "title": "Control access to right-sizing on Aqua"
        },
        "aqScheduling": {
          "type": "boolean",
          "title": "Control access to scheduling on Aqua"
        },
        "reportFilters": {
          "type": "boolean",
          "title": "Control access to the report filters pane in Wave Pro"
        }
      },
      "description": "Describes the features and whether or not they are enabled for a particular user."
    },
    "apiForecastData": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "productCategory": {
          "type": "string"
        },
        "productCode": {
          "type": "string"
        },
        "frequency": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "historicalCost": {
          "type": "number",
          "format": "double"
        },
        "forecastedCost": {
          "type": "number",
          "format": "double"
        },
        "upperBound": {
          "type": "number",
          "format": "double"
        },
        "lowerBound": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiGroupRootUser": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "The email address associated with the user. If there is no email\r\naddress provided then this field will contain \"Not Set\"."
        },
        "password": {
          "type": "string",
          "description": "The password associated with the user. This field will only be\r\npopulated when the reseller is first created."
        },
        "groupId": {
          "type": "string",
          "description": "The ID of the group to which the user belongs. This will either\r\nbe a billing group ID or an access group ID."
        },
        "groupName": {
          "type": "string",
          "description": "The name of the group to which the user belongs. This will either\r\nbe the name of a billing group or an access group."
        },
        "groupType": {
          "type": "string",
          "description": "This field describes what type of group to which the user belongs.\r\nThis field will contain either a value of \"billing_group\" or \"access_group\"."
        },
        "meta": {
          "$ref": "#/definitions/apiFeatureFlags",
          "description": "A collection of feature flags and whether or not they should be enabled. \r\nFor a full list of such flags, see https://alphauslabs.github.io/blueapi/apis/groups.html."
        },
        "passwordUpdateTime": {
          "type": "string",
          "description": "The time when the password was last updated. This value will be null if \r\nthe password has never been updated."
        },
        "updateTime": {
          "type": "string",
          "description": "The time when the user was last updated. This value will be null if the\r\nuser has never been updated."
        },
        "userAccessId": {
          "type": "string",
          "description": "An ID that uniquely identifies the user in the context of its access group.\r\nIf the user does not belong to an access group then this value field will\r\ncontain the same value as the user ID."
        },
        "userId": {
          "type": "string",
          "description": "An ID that unqiuely identifies the user."
        },
        "waveAvailabilityDays": {
          "type": "integer",
          "format": "int32",
          "description": "How many days of Wave use remain. This value is only used for trial accounts.\r\nThis field cannot be updated."
        },
        "waveRegistered": {
          "type": "string",
          "description": "When the user registered on Wave."
        },
        "waveStatus": {
          "type": "string",
          "description": "The plan associated with the user. Possible values include \"trial\",\r\n\"limited3\" and \"limited4\"."
        }
      },
      "description": "Describes the fields on an Alphaus root user for a billing group or access group."
    },
    "apiMonthOnMonthCostForecast": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "costCurrent": {
          "type": "number",
          "format": "double"
        },
        "costPrev": {
          "type": "number",
          "format": "double"
        },
        "costForecast": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiMonthToDateCostForecast": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "costPrev": {
          "type": "number",
          "format": "double"
        },
        "costAccumulated": {
          "type": "number",
          "format": "double"
        },
        "costForecast": {
          "type": "number",
          "format": "double"
        },
        "upperBound": {
          "type": "number",
          "format": "double"
        },
        "lowerBound": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiMonthlyBudget": {
      "type": "object",
      "properties": {
        "yearMonth": {
          "type": "string",
          "title": "Format: yyyymm"
        },
        "amount": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiMonthlyCostForecast": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "costActual": {
          "type": "number",
          "format": "double"
        },
        "costForecast": {
          "type": "number",
          "format": "double"
        },
        "budget": {
          "type": "number",
          "format": "double"
        },
        "upperBound": {
          "type": "number",
          "format": "double"
        },
        "lowerBound": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiOndemandChart": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "normalizedUsage": {
          "type": "number",
          "format": "double"
        },
        "ondemandCost": {
          "type": "number",
          "format": "double"
        },
        "usage": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiOndemandData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "ondemandChart": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOndemandChart"
          }
        }
      }
    },
    "apiOptionsChart": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "coverage": {
          "type": "number",
          "format": "double"
        },
        "usage": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiOptionsData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "optionsChart": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOptionsChart"
          }
        }
      }
    },
    "apiPermission": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPolicy"
          }
        }
      }
    },
    "apiPolicy": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "effect": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "apiRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPolicy"
          }
        }
      }
    },
    "apiUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "User's unique id."
        },
        "parent": {
          "type": "string",
          "description": "The user's parent. If empty or non-existent, it means this user is a root user;\notherwise, it's a subuser."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The attributes (key/value pair) of the user. If hierarchy is supported, it will be\nseparated by '/', such as 'key/subkey=value'. See https://alphauslabs.github.io/blueapi/\nfor the list of supported attributes."
        }
      }
    },
    "apiUserRoleMapping": {
      "type": "object",
      "properties": {
        "rootUser": {
          "type": "string"
        },
        "subUser": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "filter": {
          "type": "string"
        }
      }
    },
    "apiUtilizationData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "chartData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiChartData"
          }
        }
      }
    },
    "awsAdjustmentsTypeList": {
      "type": "object",
      "properties": {
        "types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "awsAwsCostReductions": {
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/awsCostReductionSummary"
        },
        "riCostReductions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/awsRiCostReduction"
          }
        },
        "spCostReductions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/awsSpCostReduction"
          }
        }
      }
    },
    "awsAwsRecommendations": {
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/awsReservationRecommendationSummary"
        },
        "riRecommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/awsRiRecommendation"
          }
        },
        "spRecommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/awsSpRecommendation"
          }
        },
        "estimatedCoverage": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/awsReservationEstimatedCoverage"
          }
        }
      }
    },
    "awsCalculatorConfig": {
      "type": "object",
      "properties": {
        "adjustmentsTypeList": {
          "$ref": "#/definitions/awsAdjustmentsTypeList",
          "description": "CUR lineitem types included in Ripple's 'Adjusting Entries'."
        },
        "excludedServicesFromUsage": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/awsExcludedServiceFromUsage"
          },
          "description": "List of services that are of type 'Usage' in CUR that are excluded,\noptionally converted to Adjustments."
        }
      },
      "description": "AWS's calculation engine configuration(s)."
    },
    "awsCost": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string"
        },
        "groupId": {
          "type": "string",
          "description": "The group id the account is associated with during the query."
        },
        "type": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "description": "For daily data, format is yyyy-mm-dd; for monthly, yyyy-mm."
        },
        "productCode": {
          "type": "string"
        },
        "serviceCode": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "zone": {
          "type": "string"
        },
        "usageType": {
          "type": "string"
        },
        "instanceType": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "invoiceId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "resourceId": {
          "type": "string",
          "description": "At the moment, this is not yet supported, always empty."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "costCategories": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "usage": {
          "type": "number",
          "format": "double",
          "description": "Only set when all columns are specified. Any type of grouping will set\nthis value to zero."
        },
        "cost": {
          "type": "number",
          "format": "double",
          "description": "The true cost (calculated) for this lineitem."
        },
        "unblendedCost": {
          "type": "number",
          "format": "double",
          "description": "The unblended cost as reflected in the CUR for this lineitem."
        },
        "baseCurrency": {
          "type": "string",
          "description": "The base currency for cost, unblendedCost, effectiveCost, amortizedCost.\nAlways set to USD, CUR's default currency."
        },
        "exchangeRate": {
          "type": "number",
          "format": "double",
          "description": "The exchange rate used to convert baseCurrency to targetCurrency."
        },
        "targetCost": {
          "type": "number",
          "format": "double",
          "description": "Converted cost."
        },
        "targetUnblendedCost": {
          "type": "number",
          "format": "double",
          "description": "Converted unblendedCost."
        },
        "targetCurrency": {
          "type": "string",
          "description": "The currency set by `toCurrency`."
        },
        "effectiveCost": {
          "type": "number",
          "format": "double"
        },
        "targetEffectiveCost": {
          "type": "number",
          "format": "double",
          "description": "Converted effectiveCost."
        },
        "amortizedCost": {
          "type": "number",
          "format": "double"
        },
        "targetAmortizedCost": {
          "type": "number",
          "format": "double",
          "description": "Converted amortizedCost."
        },
        "tagId": {
          "type": "string"
        }
      }
    },
    "awsCostReductionSummary": {
      "type": "object",
      "properties": {
        "totalOnDemandCost": {
          "type": "number",
          "format": "double"
        },
        "totalEffectiveCost": {
          "type": "number",
          "format": "double"
        },
        "totalSavings": {
          "type": "number",
          "format": "double"
        },
        "totalRiOnDemandCost": {
          "type": "number",
          "format": "double"
        },
        "totalRiEffectiveCost": {
          "type": "number",
          "format": "double"
        },
        "totalRiSavings": {
          "type": "number",
          "format": "double"
        },
        "totalSpOnDemandCost": {
          "type": "number",
          "format": "double"
        },
        "totalSpEffectiveCost": {
          "type": "number",
          "format": "double"
        },
        "totalSpSavings": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "awsExcludedServiceFromUsage": {
      "type": "object",
      "properties": {
        "managementAccount": {
          "type": "string",
          "description": "The management account (formerly master account) the `productCode` belongs to."
        },
        "productCode": {
          "type": "string",
          "description": "The excluded product code."
        },
        "convertedToAdjustments": {
          "type": "boolean",
          "description": "If the product code is converted to Adjustments or not."
        }
      }
    },
    "awsReservationEstimatedCoverage": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "productCode": {
          "type": "string"
        },
        "instanceFamily": {
          "type": "string"
        },
        "riUsageCoverage": {
          "type": "number",
          "format": "double"
        },
        "ec2SpUsageCoverage": {
          "type": "number",
          "format": "double"
        },
        "computeSpOnDemandCost": {
          "type": "number",
          "format": "double"
        },
        "computeSpDiscountedCost": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "awsReservationRecommendationSummary": {
      "type": "object",
      "properties": {
        "totalMonthlyOnDemandCost": {
          "type": "number",
          "format": "double"
        },
        "totalEstimatedMonthlySavings": {
          "type": "number",
          "format": "double"
        },
        "totalMonthlyDiscountedCost": {
          "type": "number",
          "format": "double"
        },
        "reductionRate": {
          "type": "number",
          "format": "double"
        },
        "totalUpfrontCost": {
          "type": "number",
          "format": "double"
        },
        "totalRecurringMonthlyCost": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "awsRiCostReduction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "arn": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "customerName": {
          "type": "string"
        },
        "billingInternalId": {
          "type": "string"
        },
        "billingGroupId": {
          "type": "string"
        },
        "billingGroupName": {
          "type": "string"
        },
        "destCustomerId": {
          "type": "string"
        },
        "start": {
          "type": "string"
        },
        "end": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "instanceType": {
          "type": "string"
        },
        "modificationStatus": {
          "type": "string"
        },
        "number": {
          "type": "string",
          "format": "int64"
        },
        "offerClass": {
          "type": "string"
        },
        "paidBy": {
          "type": "string"
        },
        "paymentOption": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "remove": {
          "type": "boolean"
        },
        "scope": {
          "type": "string"
        },
        "tenancy": {
          "type": "string"
        },
        "termLength": {
          "type": "string"
        },
        "usageType": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        },
        "zone": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "normalizationFactor": {
          "type": "number",
          "format": "double"
        },
        "unblendedRate": {
          "type": "number",
          "format": "double"
        },
        "upfrontValue": {
          "type": "number",
          "format": "double"
        },
        "ondemandCost": {
          "type": "number",
          "format": "double"
        },
        "effectiveCost": {
          "type": "number",
          "format": "double"
        },
        "savings": {
          "type": "number",
          "format": "double"
        },
        "breakEven": {
          "type": "string",
          "title": "for break even point date"
        }
      }
    },
    "awsRiRecommendation": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "productCode": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "instanceType": {
          "type": "string"
        },
        "quantity": {
          "type": "string",
          "format": "int64"
        },
        "normalizedUnit": {
          "type": "number",
          "format": "double"
        },
        "operatingSystem": {
          "type": "string",
          "title": "for amazon ec2 only"
        },
        "preInstalledSW": {
          "type": "string"
        },
        "tenancy": {
          "type": "string"
        },
        "dbEngine": {
          "type": "string",
          "title": "for amazon rds only"
        },
        "ondemandCost": {
          "type": "number",
          "format": "double"
        },
        "ondemandrate": {
          "type": "number",
          "format": "double"
        },
        "riRate": {
          "type": "number",
          "format": "double"
        },
        "upfrontCost": {
          "type": "number",
          "format": "double"
        },
        "discountedCost": {
          "type": "number",
          "format": "double"
        },
        "monthlyAmortizedCost": {
          "type": "number",
          "format": "double"
        },
        "monthlyRecurringCost": {
          "type": "number",
          "format": "double"
        },
        "yearlyDiscountedCost": {
          "type": "number",
          "format": "double"
        },
        "reductionRate": {
          "type": "number",
          "format": "double"
        },
        "estimatedMonthlySavings": {
          "type": "number",
          "format": "double"
        },
        "daysBeforeBreakEven": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "awsSpCostReduction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "arn": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "customerName": {
          "type": "string"
        },
        "billingGroupId": {
          "type": "string"
        },
        "billingGroupName": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "savingsPlan": {
          "type": "string"
        },
        "start": {
          "type": "string"
        },
        "end": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "instanceFamily": {
          "type": "string"
        },
        "termLength": {
          "type": "string"
        },
        "paymentOption": {
          "type": "string"
        },
        "commitment": {
          "type": "number",
          "format": "double"
        },
        "upfrontFee": {
          "type": "number",
          "format": "double"
        },
        "recurringFee": {
          "type": "number",
          "format": "double"
        },
        "ondemandCost": {
          "type": "number",
          "format": "double"
        },
        "effectiveCost": {
          "type": "number",
          "format": "double"
        },
        "savings": {
          "type": "number",
          "format": "double"
        },
        "breakEven": {
          "type": "string",
          "title": "for break even point date"
        }
      }
    },
    "awsSpRecommendation": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "spProductFamily": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "instanceFamily": {
          "type": "string"
        },
        "ondemandCost": {
          "type": "number",
          "format": "double"
        },
        "commitment": {
          "type": "number",
          "format": "double"
        },
        "normalizedUnit": {
          "type": "number",
          "format": "double"
        },
        "discountedCost": {
          "type": "number",
          "format": "double"
        },
        "monthlyDiscountedCost": {
          "type": "number",
          "format": "double"
        },
        "yearlyDiscountedCost": {
          "type": "number",
          "format": "double"
        },
        "estimatedMonthlySavings": {
          "type": "number",
          "format": "double"
        },
        "reductionRate": {
          "type": "number",
          "format": "double"
        },
        "daysBeforeBreakEven": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "blueapiapiKeyValue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "blueapiapiOperation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The server-assigned name."
        },
        "metadata": {
          "$ref": "#/definitions/protobufAny",
          "description": "Service-specific metadata associated with the operation. It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata. Any method that returns a\nlong-running operation should document the metadata type, if any."
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable."
        },
        "error": {
          "$ref": "#/definitions/rpcStatus",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "response": {
          "$ref": "#/definitions/protobufAny",
          "description": "The normal response of the operation in case of success. If the original method returns\nno data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the\noriginal method is standard `Get`/`Create`/`Update`, the response should be the\nresource. For other methods, the response should have the type `XxxResponse`, where\n`Xxx` is the original method name. For example, if the original method name is\n`TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
        }
      },
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call."
    },
    "kvstorev1KeyValue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rippleOrg": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The unique name (or id) of the organization."
        },
        "email": {
          "type": "string",
          "description": "The registered email of the organization."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The metadata (key/value pair) of the organization. If hierarchy is supported, it will be\nseparated by '/', such as 'metakey/subkey=value'. See https://alphauslabs.github.io/blueapi/\nfor the list of supported attributes."
        }
      },
      "description": "Org resource definition."
    },
    "ripplePayer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The payer account id."
        },
        "name": {
          "type": "string",
          "description": "The payer account name."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/blueapiapiKeyValue"
          },
          "description": "The attributes (key/value pair) of the account."
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiAccount"
          },
          "description": "List of all members under this payer."
        }
      },
      "description": "Payer resource definition."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "v1AccessGroup": {
      "type": "object",
      "properties": {
        "accessGroupId": {
          "type": "string",
          "description": "The ID of the access group."
        },
        "accessGroupName": {
          "type": "string",
          "description": "The name of the access group."
        },
        "accessGroupDescription": {
          "type": "string",
          "description": "A description of the access group."
        },
        "billingGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1BillingGroup"
          },
          "description": "A list of billing groups contained in the access group."
        }
      },
      "description": "Defines the fields associated with a Wave access group."
    },
    "v1BillingGroup": {
      "type": "object",
      "properties": {
        "billingInternalId": {
          "type": "string",
          "description": "The billing group's internal id."
        },
        "billingGroupId": {
          "type": "string",
          "description": "The billing group id."
        },
        "billingGroupName": {
          "type": "string",
          "description": "The billing group name."
        },
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiAccount"
          },
          "title": "List of all accounts"
        }
      }
    },
    "v1CalculateCostsRequest": {
      "type": "object",
      "properties": {
        "vendor": {
          "type": "string",
          "description": "Required. At the moment, only `aws` is supported."
        },
        "groupId": {
          "type": "string",
          "description": "Optional. If set to a particular billing group, calculate for that billing group.\nIf empty, calculate for all billing groups.\n\nAt the moment, for AWS, this is only valid for account type billing groups, not\ntag billing groups. If a tag billing group is provided, it is discarded and the\ncalculation is done for the whole organization."
        },
        "month": {
          "type": "string",
          "description": "Optional. The UTC month to calculate. If empty, it defaults to the previous month.\nFormat is `yyyymm`. For example, June 2021 will be `202106`."
        },
        "awsOptions": {
          "$ref": "#/definitions/v1CalculateCostsRequestAwsOptions",
          "description": "Optional. Valid only for the `aws` vendor. AWS-specific options."
        }
      },
      "description": "Request message for the Cost.CalculateCosts rpc."
    },
    "v1CalculateCostsRequestAwsOptions": {
      "type": "object",
      "properties": {
        "force": {
          "type": "boolean",
          "description": "Optional. If set to true, discard existing calculation operation(s), if any, and\nmake this as the active/latest one. By default, if there is an ongoing operation\nduring the call, the request will fail."
        },
        "accountsOnly": {
          "type": "boolean",
          "description": "Optional. If set to true, only calculate for account-type billing groups. If both\n`accountsOnly` and `tagsOnly` are set to true, `accountsOnly` will prevail."
        },
        "tagsOnly": {
          "type": "boolean",
          "description": "Optional. If set to true, only calculate for tags-type billing groups. Discarded\nwhen the organization doesn't have any tag-based billing groups configured. If\nboth `accountsOnly` and `tagsOnly` are set to true, `accountsOnly` will prevail."
        }
      }
    },
    "v1CancelOperationRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the operation resource to be cancelled."
        }
      },
      "description": "Request message for the Operations.CancelOperation rpc."
    },
    "v1CostItem": {
      "type": "object",
      "properties": {
        "aws": {
          "$ref": "#/definitions/awsCost"
        }
      },
      "description": "Response message wrapper for cloud costs."
    },
    "v1CreateAccountBudgetRequest": {
      "type": "object",
      "properties": {
        "vendor": {
          "type": "string",
          "description": "Required. At the moment, only `aws` is supported."
        },
        "level": {
          "type": "string",
          "title": "Required. 'account' or 'acctgroup'"
        },
        "id": {
          "type": "string",
          "title": "Required. Account or AccountGroup Id"
        },
        "data": {
          "$ref": "#/definitions/apiBudget"
        }
      },
      "title": "Request message for CreateAccountBudget"
    },
    "v1CreateAccountBudgetResponse": {
      "type": "object",
      "properties": {
        "budgetId": {
          "type": "string",
          "title": "Budget Id"
        }
      },
      "title": "Response message for CreateAccountBudget"
    },
    "v1CreateAccountRequest": {
      "type": "object",
      "properties": {
        "vendor": {
          "type": "string",
          "description": "Required. At the moment, only `aws` is supported."
        },
        "id": {
          "type": "string",
          "description": "Required. The account id to register."
        },
        "name": {
          "type": "string",
          "description": "Optional. If empty, set to the value of `id`."
        },
        "parent": {
          "type": "string",
          "description": "Optional. The parent `billingInternalId` of the billing group to which this account\nwill belong to."
        },
        "awsOptions": {
          "$ref": "#/definitions/v1CreateAccountRequestAwsOptions",
          "description": "Required for the `aws` vendor. AWS-specific options."
        }
      },
      "description": "Request message for the Cost.CreateAccount rpc."
    },
    "v1CreateAccountRequestAwsOptions": {
      "type": "object",
      "properties": {
        "managementAccountId": {
          "type": "string",
          "description": "Optional. The management account id (formerly known as master, or payer) to\nwhich an account belongs to, initially. If the account is moved to another\nmanagement account, the system is able to detect it and set this value\naccordingly."
        }
      },
      "description": "AWS-specific options for registering an account."
    },
    "v1CreateApiClientRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. The descriptive name of the API client to create."
        }
      },
      "description": "Request message for the Iam.CreateApiClient rpc."
    },
    "v1CreateBillingGroupRequest": {
      "type": "object",
      "properties": {
        "billingGroupId": {
          "type": "string",
          "description": "Required. The billing group's id."
        },
        "billingGroupName": {
          "type": "string",
          "description": "Required. The billing group's name."
        },
        "companyName": {
          "type": "string",
          "title": "Required. Company’s name"
        },
        "billingTitle": {
          "type": "string",
          "title": "Optional. The title of the billing"
        },
        "phoneNumber": {
          "type": "string",
          "title": "Optional. Company’s phone number"
        },
        "postalCode": {
          "type": "string",
          "title": "Optional. Company’s postal code"
        },
        "address": {
          "type": "string",
          "title": "Optional. Company’s address"
        },
        "personal": {
          "type": "string",
          "title": "Optional. Addressee"
        },
        "remarks": {
          "type": "string",
          "title": "Optional. Any remarks about the billing group"
        },
        "projectId": {
          "type": "string",
          "title": "Optional. Project code"
        },
        "language": {
          "type": "string",
          "title": "Optional. Invoice language"
        },
        "displayCost": {
          "type": "string",
          "title": "Optional. Calculation type, true unblended or unblended"
        },
        "exchangeRateType": {
          "type": "string",
          "title": "Optional. Exchange rate type, payer or billing group"
        },
        "invoices": {
          "$ref": "#/definitions/v1CreateBillingGroupRequestInvoice",
          "title": "Invoice settings"
        }
      },
      "description": "Request message for the Billing.CreateBillingGroup rpc."
    },
    "v1CreateBillingGroupRequestInvoice": {
      "type": "object",
      "properties": {
        "aws": {
          "$ref": "#/definitions/v1CreateBillingGroupRequestInvoiceVendor",
          "title": "AWS invoice settings"
        },
        "azure": {
          "$ref": "#/definitions/v1CreateBillingGroupRequestInvoiceVendor",
          "title": "Azure invoice settings"
        },
        "gcp": {
          "$ref": "#/definitions/v1CreateBillingGroupRequestInvoiceVendor",
          "title": "GCP invoice settings"
        }
      },
      "title": "Vendor invoice setttings"
    },
    "v1CreateBillingGroupRequestInvoiceVendor": {
      "type": "object",
      "properties": {
        "calcType": {
          "type": "string"
        },
        "discountRate": {
          "type": "number",
          "format": "double"
        },
        "substitutionFee": {
          "type": "string"
        },
        "substitutionFix": {
          "type": "number",
          "format": "double"
        },
        "substitutionRate": {
          "type": "number",
          "format": "double"
        },
        "supportFee": {
          "type": "string"
        },
        "supportRate": {
          "type": "number",
          "format": "double"
        },
        "supportFix": {
          "type": "number",
          "format": "double"
        },
        "taxRate": {
          "type": "number",
          "format": "double"
        },
        "currency": {
          "type": "string"
        },
        "discountTargetUsage": {
          "type": "string"
        },
        "substitutionFeeTargetUsage": {
          "type": "string"
        },
        "discountCalcLogic": {
          "type": "string"
        },
        "substitutionFeeCalcTarget": {
          "type": "string"
        },
        "substitutionFeeCalcType": {
          "type": "string"
        },
        "supportAmountTarget": {
          "type": "string"
        },
        "supportFeeCalcTarget": {
          "type": "string"
        }
      },
      "title": "Specific settings per vendor"
    },
    "v1CreateDefaultBillingInfoRoleRequest": {
      "type": "object",
      "properties": {
        "target": {
          "type": "string",
          "description": "Required. The target AWS account to validate."
        }
      },
      "description": "Request message for the Admin.CreateDefaultBillingInfoRole rpc."
    },
    "v1CreateGroupRootUserRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "The email address of the user being created."
        },
        "password": {
          "type": "string",
          "title": "The password of the user being created. A value will be generated\nif not is provided for this field"
        },
        "groupId": {
          "type": "string",
          "description": "The ID of the group to which the user will be added. This must\neither be a billing group ID or an access group ID."
        },
        "groupType": {
          "type": "string",
          "description": "The type of group which is represented by the group ID. Valid values\ninclude \"billing_group\" or \"access_group\"."
        },
        "inputType": {
          "type": "string",
          "description": "This value determines whether the password should be auto-generated\nor if the plaintext value received with the request should be used. A\nvalue of \"Auto\" will result in an auto-generated password whereas a\nvalue of \"Custom\" will result in the password included with the request\nbeing used."
        },
        "plan": {
          "type": "string",
          "description": "The plan associated with the root-user account. Valid values include\n\"trial\", \"limited3\" and \"limited4\"."
        },
        "emailNotification": {
          "type": "boolean",
          "description": "Whether or not a notification should be sent to the provided email after\nthe user has been created."
        },
        "meta": {
          "$ref": "#/definitions/apiFeatureFlags",
          "description": "A collection of feature flags and whether or not they should be enabled. For\na full list of such flags, see https://alphauslabs.github.io/blueapi/apis/iam.html."
        }
      },
      "title": "Request message for the Iam.CreateGroupRootUser rpc"
    },
    "v1CreateIdentityProviderRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. The IdP name."
        },
        "type": {
          "type": "string",
          "description": "Required. Value is `saml`."
        },
        "metadata": {
          "type": "string",
          "description": "Required. The contents of the metadata file from your IdP."
        }
      },
      "description": "Request message for the Iam.CreateIdentityProvider rpc."
    },
    "v1CreateIpFilterRequest": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Required. The IP input to filter, either blacklist or whitelist. Should be in\nCIDR format (i.e. 1.2.3.4/32)."
        },
        "type": {
          "type": "string",
          "description": "Optional. Can be `whitelist` or `blacklist`. Defaults to `blacklist` if empty."
        },
        "rootUser": {
          "type": "string",
          "description": "Optional. If `rootUser` is valid and `subUser` is empty, filter is for this rootuser.\nIf both `rootUser` and `subUser` inputs are empty, filter is at global scope."
        },
        "subUser": {
          "type": "string",
          "description": "Optional. If `subuser` is valid, filter is for this subuser; `rootUser` value is discarded.\nIf both `rootUser` and `subUser` inputs are empty, filter is at global scope."
        }
      },
      "description": "Request message for the Iam.CreateIpFilter rpc."
    },
    "v1CreateOrgRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "Required. Organization's email"
        },
        "description": {
          "type": "string",
          "title": "Required. Organization's description or company name"
        },
        "password": {
          "type": "string",
          "description": "Optional. User can decide to let the system generates the password."
        }
      },
      "description": "Request message for the Organization.CreateOrg rpc."
    },
    "v1CreateOrgResponse": {
      "type": "object",
      "properties": {
        "org": {
          "$ref": "#/definitions/rippleOrg"
        },
        "password": {
          "type": "string"
        }
      },
      "description": "Response message for the Organization.CreateOrg rpc."
    },
    "v1CreatePayerAccountRequest": {
      "type": "object",
      "properties": {
        "vendor": {
          "type": "string",
          "description": "Required. At the moment, only `aws` is supported."
        },
        "awsOptions": {
          "$ref": "#/definitions/v1CreatePayerAccountRequestAwsOptions",
          "description": "Required for the `aws` vendor. AWS-specific options."
        }
      },
      "description": "Request message for the Cost.CreatePayerAccount rpc."
    },
    "v1CreatePayerAccountRequestAwsOptions": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Required. The id of the management account."
        },
        "name": {
          "type": "string",
          "description": "Optional. The name, or description of the management account.\nThis is set to `id` when not specified."
        },
        "bucketName": {
          "type": "string",
          "description": "Required. S3 Bucket name."
        },
        "prefix": {
          "type": "string",
          "description": "Optional. Prefix."
        },
        "reportName": {
          "type": "string",
          "description": "Required. Report name."
        },
        "roleArn": {
          "type": "string",
          "description": "Required. Role ARN for Alphaus to assume for access."
        }
      },
      "description": "See [https://help.alphaus.cloud/en/articles/3612555-ripple-aws-things-you-need-to-prepare-before-starting]\nfor more information.\nSee [https://docs.aws.amazon.com/cur/latest/userguide/cur-create.html] for more information.\nRequirements include: Additional report details = 'Include Resource IDS' enabled,\nPrefix = non-empty (recommendation only), Time granularity = 'Hourly', File format = 'text/csv'."
    },
    "v1CreateRoleRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. The name of the role to create. Role names should have at least 6\ncharacters in length and 32 characters maximum. It should also be alphanumeric.\nHyphens and underscores are allowed in between. The regular expression used\nfor validation is `^[A-Za-z0-9][A-Za-z0-9_-]*[A-Za-z0-9]$`."
        },
        "namespace": {
          "type": "string",
          "description": "Required. The namespace where this role will belong."
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Required. The list of permissions to attach to this role."
        }
      },
      "description": "Request message for the Iam.CreateRole rpc."
    },
    "v1CreateUserRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. Min: 4, max: 18, allowed characters: letters, numbers, `_` (underscore),\n`.` (period) and `-` (hyphen) characters."
        },
        "password": {
          "type": "string",
          "description": "Required. Minimum of 8 characters."
        },
        "email": {
          "type": "string",
          "description": "Optional. Email address of the subuser."
        },
        "nickName": {
          "type": "string",
          "description": "Optional. Nickname or description. It is set to 'name' if empty."
        }
      },
      "description": "Request message for the Iam.CreateUser rpc."
    },
    "v1CreateUserRoleMappingRequest": {
      "type": "object",
      "properties": {
        "subUser": {
          "type": "string",
          "description": "Optional. The subuser to map the roles. Defaults to caller if not set."
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MapRole"
          },
          "description": "Required. The roles to map to the user. Limited to 5 items."
        }
      },
      "description": "Request message for the Iam.CreateUserRoleMapping rpc."
    },
    "v1CreateUserRoleMappingResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "failed": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Response message for the Iam.CreateUserRoleMapping rpc."
    },
    "v1DefaultBillingInfo": {
      "type": "object",
      "properties": {
        "target": {
          "type": "string",
          "description": "The queried target account."
        },
        "roleArn": {
          "type": "string",
          "description": "The role ARN that provides the cross-account access permissions."
        },
        "stackId": {
          "type": "string",
          "description": "The id of the CloudFormation stack deployed in the target account."
        },
        "stackRegion": {
          "type": "string",
          "description": "The region where the stack is deployed."
        },
        "templateUrl": {
          "type": "string",
          "description": "The latest template used to deploy the stack."
        },
        "status": {
          "type": "string",
          "description": "This can be 'latest', 'outdated', or 'invalid'."
        },
        "lastUpdated": {
          "type": "string",
          "description": "The last updated timestamp, RFC3339 UTC."
        }
      },
      "description": "Response message for the Admin.GetDefaultBillingInfo, Admin.CreateDefaultBillingInfoRole rpc."
    },
    "v1GetAccessGroupResponse": {
      "type": "object",
      "properties": {
        "accessGroup": {
          "$ref": "#/definitions/v1AccessGroup"
        }
      },
      "description": "Response message for the Billing.GetAccessGroup rpc."
    },
    "v1GetAccountBudgetResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/apiBudget"
        }
      },
      "title": "Response message for GetAccountBudget"
    },
    "v1GetAccountGroupResponse": {
      "type": "object",
      "properties": {
        "acctGroup": {
          "$ref": "#/definitions/apiAccountGroup"
        }
      },
      "description": "Response message for the Admin.GetAccountGroup rpc."
    },
    "v1GetBillingGroupResponse": {
      "type": "object",
      "properties": {
        "billingGroup": {
          "$ref": "#/definitions/v1BillingGroup"
        }
      },
      "description": "Response message for the Billing.GetBillingGroup rpc."
    },
    "v1GetCalculatorConfigResponse": {
      "type": "object",
      "properties": {
        "aws": {
          "$ref": "#/definitions/awsCalculatorConfig"
        }
      },
      "description": "Response message for the Cost.GetCalculatorConfig rpc."
    },
    "v1GetCalculatorStatusResponse": {
      "type": "object",
      "properties": {
        "aws": {
          "$ref": "#/definitions/GetCalculatorStatusResponseAwsStatus",
          "description": "AWS-specific calculator status."
        }
      },
      "description": "Response message for the Cost.GetCalculatorStatus rpc."
    },
    "v1GetCostReductionRequest": {
      "type": "object",
      "properties": {
        "vendor": {
          "type": "string",
          "description": "Required. At the moment, only `aws` is supported."
        },
        "orgId": {
          "type": "string",
          "description": "Required. Organization Id."
        },
        "reductionDisplay": {
          "type": "string",
          "title": "Required. Valid values: 'all', 'reservation', 'savingsplan'"
        },
        "includeDetails": {
          "type": "boolean",
          "title": "Optional. If set to \"true\", details of the RI or SP list is returned.\nDefault: false"
        },
        "fromDate": {
          "type": "string",
          "description": "Optional. The start date of the displayed data. If not set, the first day of the\ncurrent month will be used. Format: yyyy-mm-dd."
        },
        "toDate": {
          "type": "string",
          "description": "Optional. The end date of the displayed data. If not set, current date will be\nused. Format: yyyy-mm-dd."
        },
        "payerId": {
          "type": "string",
          "description": "Optional. Payer Id."
        },
        "billingInternalId": {
          "type": "string",
          "description": "Optional. Billing group Id."
        },
        "groupId": {
          "type": "string",
          "description": "Optional. Account group Id."
        },
        "accounts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional. List of Account Ids."
        },
        "services": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional. List of services."
        }
      },
      "title": "Request message for GetCostReduction"
    },
    "v1GetCostReductionResponse": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string"
        },
        "awsCostReductions": {
          "$ref": "#/definitions/awsAwsCostReductions"
        }
      },
      "title": "Response message for GetCostReduction"
    },
    "v1GetCoverageOndemandRequest": {
      "type": "object",
      "properties": {
        "vendor": {
          "type": "string",
          "description": "Required. At the moment, only `aws` is supported."
        },
        "orgId": {
          "type": "string",
          "description": "Required. Organization Id."
        },
        "period": {
          "type": "string",
          "title": "Required. Available values: day, hour"
        },
        "fromDate": {
          "type": "string",
          "description": "Optional. The start date of the displayed data. If not set, the first day of the\ncurrent month will be used. Format: yyyy-mm-dd."
        },
        "toDate": {
          "type": "string",
          "description": "Optional. The end date of the displayed data. If not set, current date will be\nused. Format: yyyy-mm-dd."
        },
        "payerId": {
          "type": "string",
          "description": "Optional. Payer Id."
        },
        "billingInternalId": {
          "type": "string",
          "description": "Optional. Billing group Id."
        },
        "groupId": {
          "type": "string",
          "description": "Optional. Account group Id."
        },
        "accounts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional. List of Account Ids."
        },
        "services": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional. List of services."
        }
      },
      "title": "Request message for GetCoverageOndemand"
    },
    "v1GetCoverageOndemandResponse": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string"
        },
        "ondemandData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOndemandData"
          }
        }
      },
      "title": "Response message for GetCoverageOndemand"
    },
    "v1GetCoverageOptionsRequest": {
      "type": "object",
      "properties": {
        "vendor": {
          "type": "string",
          "description": "Required. At the moment, only `aws` is supported."
        },
        "orgId": {
          "type": "string",
          "description": "Required. Organization Id."
        },
        "period": {
          "type": "string",
          "title": "Required. Available values: day, hour"
        },
        "fromDate": {
          "type": "string",
          "description": "Optional. The start date of the displayed data. If not set, the first day of the\ncurrent month will be used. Format: yyyy-mm-dd."
        },
        "toDate": {
          "type": "string",
          "description": "Optional. The end date of the displayed data. If not set, current date will be\nused. Format: yyyy-mm-dd."
        },
        "payerId": {
          "type": "string",
          "description": "Optional. Payer Id."
        },
        "billingInternalId": {
          "type": "string",
          "description": "Optional. Billing group Id."
        },
        "groupId": {
          "type": "string",
          "description": "Optional. Account group Id."
        },
        "accounts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional. List of Account Ids."
        },
        "services": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional. List of services."
        }
      },
      "title": "Request message for GetCoverageOptions"
    },
    "v1GetCoverageOptionsResponse": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string"
        },
        "optionsData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOptionsData"
          }
        }
      },
      "title": "Response message for GetCoverageOptions"
    },
    "v1GetDefaultBillingInfoTemplateUrlResponse": {
      "type": "object",
      "properties": {
        "launchUrl": {
          "type": "string",
          "description": "The CloudFormation launch url. Open it in your browser."
        },
        "templateUrl": {
          "type": "string",
          "description": "The latest CloudFormation template. The version is included in the filename."
        },
        "stackName": {
          "type": "string",
          "description": "The default stack name used. Can be modified."
        },
        "principal": {
          "type": "string",
          "description": "The AWS account that will receive the access. Do not change."
        }
      },
      "description": "Response message for the Admin.GetDefaultBillingInfoTemplateUrl rpc."
    },
    "v1GetForecastsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/apiBillingGroupForecast"
        }
      },
      "description": "Response message for GetForecasts per billing group."
    },
    "v1GetMonthOnMonthCostForecastResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiMonthOnMonthCostForecast"
          }
        },
        "timestamp": {
          "type": "string"
        }
      },
      "title": "Response message for GetMonthOnMonthCostForecast"
    },
    "v1GetMonthToDateCostForecastResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "budget": {
          "type": "number",
          "format": "double"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiMonthToDateCostForecast"
          }
        },
        "timestamp": {
          "type": "string"
        }
      },
      "title": "Response message for GetMonthToDateCostForecast"
    },
    "v1GetMonthlyCostForecastResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiMonthlyCostForecast"
          }
        },
        "timestamp": {
          "type": "string"
        }
      },
      "title": "Response message for GetMonthlyCostForecast"
    },
    "v1GetPayerAccountImportHistoryResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The queried account id."
        },
        "month": {
          "type": "string",
          "description": "The queried UTC month."
        },
        "timestamps": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of timestamps in RFC3339 format with the `T` separator.\nExample: `2019-10-12T07:20:50.52Z`"
        }
      },
      "description": "Response message for the Cost.GetPayerAccountImportHistory rpc."
    },
    "v1GetRecommendationsRequest": {
      "type": "object",
      "properties": {
        "vendor": {
          "type": "string",
          "description": "Required. At the moment, only `aws` is supported."
        },
        "orgId": {
          "type": "string",
          "description": "Required. Organization Id."
        },
        "accounts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Required. List of Account Ids."
        },
        "awsOptions": {
          "$ref": "#/definitions/v1GetRecommendationsRequestAwsOptions",
          "title": "Required if vendor = 'aws'"
        }
      },
      "title": "Request message for GetRecommendations"
    },
    "v1GetRecommendationsRequestAwsOptions": {
      "type": "object",
      "properties": {
        "recommendationType": {
          "type": "string",
          "description": "Required. Valid values: 'reservation', 'rightsizing', 'scheduling'\nOnly 'reservation' is supported for now."
        },
        "type": {
          "type": "string",
          "title": "For recommendationType = 'reservation'\nOptional. Valid values: 'combined', 'individual'\nDefault: 'combined'"
        },
        "riServices": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "For recommendationType = 'reservation'\nOptional. List of Services [\"AmazonEC2\", \"AmazonRDS\", \"AmazonElastiCache\", \"AmazonES\", \"AmazonRedshift\"]\nDefault: Empty list"
        },
        "spServices": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "For recommendationType = 'reservation'\nOptional. List of Services [\"AmazonECS\", \"AmazonEKS\", \"AWSLambda\"]\nDefault: Empty list"
        },
        "purchaseEC2SavingsPlan": {
          "type": "boolean",
          "title": "For recommendationType = 'reservation'\nOptional. If set to \"true\", recommends EC2 Instance Savings Plan that will cover usage not covered by RI\nDefault: false"
        },
        "term": {
          "type": "string",
          "title": "For recommendationType = 'reservation'\nOptional. Valid values: '1yr', '3yr'\nDefault: '1yr'"
        },
        "offeringClass": {
          "type": "string",
          "title": "For recommendationType = 'reservation'\nOptional. Valid values: 'standard', 'convertible'\nDefault: 'standard'"
        },
        "paymentOption": {
          "type": "string",
          "title": "For recommendationType = 'reservation'\nOptional. Valid values: 'allUpfront', 'partialUpfront', 'noUpfront'\nDefault: 'allUpfront'"
        },
        "coveragePercentage": {
          "type": "number",
          "format": "double",
          "title": "For recommendationType = 'reservation'\nOptional. Percentage of the usage (in NormalizedUnits) to be covered by Reserved Instance or Savings Plan\nDefault: 100"
        }
      }
    },
    "v1GetRecommendationsResponse": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string"
        },
        "awsRecommendations": {
          "$ref": "#/definitions/awsAwsRecommendations"
        }
      },
      "title": "Request message for GetRecommendations"
    },
    "v1GetUtilizationResponse": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string"
        },
        "utilizationData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiUtilizationData"
          }
        }
      },
      "title": "Response message for GetUtilization"
    },
    "v1ImportCurFilesRequest": {
      "type": "object",
      "properties": {
        "month": {
          "type": "string",
          "description": "Optional. The UTC month to import. If empty, it defaults to the current month.\nFormat is `yyyymm`. For example, June 2021 will be `202106`."
        },
        "filter": {
          "type": "string",
          "description": "Optional. A comma-separated list of management accounts to import. If empty,\nall CURs associated with all your management accounts will be imported."
        }
      },
      "description": "Request message for the Cost.ImportCurFiles rpc."
    },
    "v1IpFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "IP filter item id. Note that this name is transcient and is not fixed. However,\nyou can use any of its permutations to endpoints that accept it, such as\nthe `DELETE:/iam/v?/ipfilters/{id}` endpoint, without issues."
        },
        "scope": {
          "type": "string",
          "description": "Can be `global`, `rootuser`, or `subuser`."
        },
        "target": {
          "type": "string",
          "description": "The target of the filter. If global scope, this is usually empty.\nRootuser name for rootuser scope, and subuser name for subuser scope.\nFor subuser targets, format is `rootuser/subuser`."
        },
        "type": {
          "type": "string",
          "description": "The type of IP filter. It could be `whitelist` or `blacklist`."
        },
        "value": {
          "type": "string",
          "description": "The IP filter value. Should be in CIDR format."
        }
      }
    },
    "v1ListAccountGroupsResponse": {
      "type": "object",
      "properties": {
        "accountGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiAccountGroup"
          }
        }
      },
      "description": "Response message for the Admin.ListAccountGroups rpc."
    },
    "v1ListCalculationsHistoryAwsResponse": {
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/blueapiapiOperation"
          }
        }
      },
      "description": "AWS-specific response message for the Cost.ListCalculationsHistory rpc. Should be\ncompatible with the Operations API."
    },
    "v1ListCalculationsHistoryResponse": {
      "type": "object",
      "properties": {
        "aws": {
          "$ref": "#/definitions/v1ListCalculationsHistoryAwsResponse"
        }
      },
      "description": "Response message for the Cost.ListCalculationsHistory rpc."
    },
    "v1ListIdentityProvidersResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListIdentityProvidersResponseIdentityProvider"
          }
        }
      },
      "description": "Response message for the Iam.ListIdentityProviders rpc."
    },
    "v1ListPermissionsResponse": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPermission"
          }
        }
      },
      "description": "Response message for the Iam.ListPermissions rpc."
    },
    "v1ListRolesResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRole"
          }
        }
      },
      "description": "Response message for the Iam.ListRoles rpc."
    },
    "v1ListUserRoleMappingsResponse": {
      "type": "object",
      "properties": {
        "userRoleMappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiUserRoleMapping"
          }
        }
      },
      "description": "Response message for the Iam.ListUserRoleMappings rpc."
    },
    "v1MapRole": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "v1Preference": {
      "type": "object"
    },
    "v1ReadAdjustmentsRequest": {
      "type": "object",
      "properties": {
        "vendor": {
          "type": "string",
          "description": "Required. At the moment, only `aws` is supported."
        },
        "groupId": {
          "type": "string",
          "description": "Optional. At the moment, only billing internal ids are supported. If set, reads the\nnon-usage-based adjustment details of this group. Valid only if `accountId` is not set.\nIf both `groupId` and `accountId` are not set, reads the adjustment details of the whole\norganization. Only valid for Ripple users. Implied (or discarded) for Wave(Pro) users."
        },
        "accountId": {
          "type": "string",
          "description": "Optional. If set, reads the non-usaged-based adjustment details of this account. Also\ninvalidates the `billingInternalId` value even if set. If both `billingInternalId`\nand `accountId` are not set, reads the adjustment details of the whole organization."
        },
        "startTime": {
          "type": "string",
          "description": "Optional. The UTC date to start streaming data from. If not set, the first day of the\ncurrent month will be used. Format: `yyyymmdd`."
        },
        "endTime": {
          "type": "string",
          "description": "Optional. The UTC date to end the streaming data. If not set, current date will be\nused. Format: `yyyymmdd`."
        },
        "awsOptions": {
          "$ref": "#/definitions/v1ReadAdjustmentsRequestAwsOptions",
          "description": "Optional. Valid only for the `aws` vendor. AWS-specific options."
        }
      },
      "description": "Request message for the Cost.ReadAdjustments rpc."
    },
    "v1ReadAdjustmentsRequestAwsOptions": {
      "type": "object",
      "properties": {
        "toCurrency": {
          "type": "string",
          "description": "Optional. Set to US dollars (USD) by default (AWS CUR's default currency). You can\nset it to the desired three-letter currency symbol (i.e. JPY, EUR, GBP), in which\ncase, it will use the latest exchange rates provided by https://fixer.io. If you\nprefer a custom exchange rate, you can append the rate to the currency's three-letter\nsymbol. For example, `JPY:110.622` for the Japanese Yen. Note that the exchange rate\nshould be against the US dollar (USD)."
        }
      }
    },
    "v1ReadCostsRequest": {
      "type": "object",
      "properties": {
        "vendor": {
          "type": "string",
          "description": "Required. At the moment, only `aws` is supported."
        },
        "groupId": {
          "type": "string",
          "description": "Optional. If set, reads the usage-based cost details of this group. Only valid for Ripple\nusers. Implied as the parent billing group for Wave(Pro) users.\n\nFor AWS Ripple, only billing internal ids are supported at the moment. Overriden when\n`accountId` is set to anything other than `*`. Set this and `accountId` to `*` to read\nthe usage-based cost details of the whole organization. Optional for AWS Wave(Pro)."
        },
        "accountId": {
          "type": "string",
          "description": "Optional. If set, reads the usage-based cost details of this account.\n\nFor AWS, setting this will override `groupId`. Set this and `groupId` to `*` to read the\nusage-based cost details of the whole organization."
        },
        "startTime": {
          "type": "string",
          "description": "Optional. The UTC date to start streaming data from. If not set, the first day of the\ncurrent month will be used. Format: yyyymmdd."
        },
        "endTime": {
          "type": "string",
          "description": "Optional. The UTC date to end the streaming data. If not set, current date will be\nused. Format: `yyyymmd`."
        },
        "awsOptions": {
          "$ref": "#/definitions/v1ReadCostsRequestAwsOptions",
          "description": "Optional. Valid only for the `aws` vendor. AWS-specific options."
        }
      },
      "description": "Request message for the Cost.ReadCosts rpc."
    },
    "v1ReadCostsRequestAwsOptions": {
      "type": "object",
      "properties": {
        "groupByColumns": {
          "type": "string",
          "description": "Optional. A comma-separated list of columns to aggregate the data into. Valid values\nare `productCode`, `serviceCode`, `region`, `zone`, `usageType`, `instanceType`,\n`operation`, `invoiceId`, `description`, and `resourceId`. A special value of `none`\nis also supported, which means query by date or month per account only.\n\nFor example, if you only want the services and region data, you can set this field to\n`productCode,region`. Your input sequence doesn't matter (although the sequence above\nis recommended) as the actual sequence is already fixed in the return data (see the\ndefinition in https://github.com/alphauslabs/blueapi/blob/main/api/aws/cost.proto),\nwhich is generic to specific, top to bottom. Invalid values are discarded. Excluded\ncolumns will be empty."
        },
        "groupByMonth": {
          "type": "boolean",
          "description": "Optional. If set to true, return data grouped by month. If you want data that is grouped\nper account per month, set this to `true`, then set `groupByColumns` to `none`.\n\nYou can also use `groupByColumns` while setting this to true. If `groupByColumns` is empty,\nthe default grouping is `productCode`. However, at the moment, this is only limited to\nthe current and previous months. If your date range includes out-of-range months, those\nwill only return data grouped by `productCode`."
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ReadCostsRequestAwsOptionsFilters"
          },
          "description": "Optional. A list of filtering options. See [ReadCostsRequestAwsOptionsFilters] for more\ninformation on each filter item. Multiple filter items will use the logical 'or' operator,\ne.g. filter1 || filter2 || filter3, etc."
        },
        "includeTags": {
          "type": "boolean",
          "description": "Optional. If set to true, stream will include resource tags. Discarded when\n`groupByColumns` field is set or if `groupByMonth` is true."
        },
        "includeCostCategories": {
          "type": "boolean",
          "description": "Optional. If set to true, stream will include resource cost category information.\nDiscarded when `groupByColumns` field is set or if `groupByMonth` is true."
        },
        "toCurrency": {
          "type": "string",
          "description": "Optional. Set to US dollars (USD) by default (AWS CUR's default currency). You can\nset it to the desired three-letter currency symbol (i.e. JPY, EUR, GBP), in which\ncase, it will use the latest exchange rates provided by https://fixer.io. If you\nprefer a custom exchange rate, you can append the rate to the currency's three-letter\nsymbol. For example, `JPY:110.622` for the Japanese Yen. Note that the exchange rate\nshould be against the US dollar (USD)."
        },
        "forceLatest": {
          "type": "boolean",
          "description": "Optional. If set to true, always get the up-to-date calculation results. This data\nisn't necessarily in-sync with your invoice data as AWS could still have updated your\nCUR files even after you created your invoices. By default, returned data are those\nthat are always in-sync with your invoices.\n\nThis field is discarded for Wave(Pro) users. You will always get the latest data that\nis in-sync with your invoices."
        }
      },
      "description": "AWS-specific options for ReadCostsRequest."
    },
    "v1ReadCostsRequestAwsOptionsFilters": {
      "type": "object",
      "properties": {
        "andFilters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "A map of \"key:value\" column filters. Dependent on `groupByColumns` and/or `groupByMonth`.\nThe key indicates the column name while the value is the filter value prefixed by either\n\"eq:\" (equal), \"re:\" (regular expressions based on https://github.com/google/re2), or\n\"!re:\" (reverse \"re:\"). Multiple map items will use the logical 'and' operator, e.g.\nmapfilter1 \u0026\u0026 mapfilter2 \u0026\u0026 mapfilter3, etc.\n\nFor example, if you like to filter `productCode` to return only `AmazonEC2`, set to\n`{\"productCode\":\"eq:AmazonEC2\"}`. You can also use a regular expression like \n`{\"productCode\":\"re:AmazonEC2|AmazonRDS\"}`, which means return all AmazonEC2 or AmazonRDS\nlineitems. Or reverse regexp, such as `{\"productCode\":\"!re:^AmazonEC2$\"}`, which means\nreturn all items except `AmazonEC2`."
    },
    "v1ReadNonTagCostsRequest": {
      "type": "object",
      "properties": {
        "vendor": {
          "type": "string",
          "description": "Required. At the moment, only `aws` is supported."
        },
        "billingInternalId": {
          "type": "string",
          "description": "Required. The billing internal id to stream."
        },
        "startTime": {
          "type": "string",
          "description": "Optional. Timestamp to start streaming data from. If not set, the first day of the\ncurrent month will be used. Format: `yyyymmdd`."
        },
        "endTime": {
          "type": "string",
          "description": "Optional. Timestamp to end the streaming data. If not set, current date will be used.\nFormat: `yyyymmdd`."
        },
        "groupByMonths": {
          "type": "boolean",
          "description": "Optional. Group services and costs by months in the range of `startTime` and `endTime`.\nIf not set, daily data will be returned."
        }
      },
      "description": "Request message for the Cost.ReadNonTagCosts rpc."
    },
    "v1ReadTagCostsRequest": {
      "type": "object",
      "properties": {
        "vendor": {
          "type": "string",
          "description": "Required. At the moment, only `aws` is supported."
        },
        "billingInternalId": {
          "type": "string",
          "description": "Required. The billing internal id to stream."
        },
        "startTime": {
          "type": "string",
          "description": "Optional. Timestamp to start streaming data from. If not set, the first day of the\ncurrent month will be used. Format: `yyyymmdd`."
        },
        "endTime": {
          "type": "string",
          "description": "Optional. Timestamp to end the streaming data. If not set, current date will be used.\nFormat: `yyyymmdd`."
        },
        "groupByMonths": {
          "type": "boolean",
          "description": "Optional. Group services and costs by months in the range of `startTime` and `endTime`.\nIf not set, daily data will be returned."
        },
        "awsOptions": {
          "$ref": "#/definitions/v1ReadTagCostsRequestAwsOptions",
          "description": "Optional. Valid only for the `aws` vendor. AWS-specific options."
        }
      },
      "description": "Request message for the Cost.ReadTagCosts rpc."
    },
    "v1ReadTagCostsRequestAwsOptions": {
      "type": "object",
      "properties": {
        "tagId": {
          "type": "string",
          "description": "Optional. If set, only return data for this tagId."
        }
      }
    },
    "v1UpdateAccountBudgetRequest": {
      "type": "object",
      "properties": {
        "vendor": {
          "type": "string",
          "description": "Required. At the moment, only `aws` is supported."
        },
        "budgetId": {
          "type": "string",
          "title": "Required. Budget Id"
        },
        "data": {
          "$ref": "#/definitions/apiBudget"
        }
      },
      "title": "Request message for UpdateAccountBudget"
    },
    "v1UpdateFeatureFlagsRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "featureFlags": {
          "$ref": "#/definitions/apiFeatureFlags"
        }
      },
      "title": "Request message for the Iam.UpdateFeatureFlags rpc"
    },
    "v1UpdateMetadataRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "description": "Request message for the Organization.UpdateMetadata rpc."
    },
    "v1UpdatePasswordRequest": {
      "type": "object",
      "properties": {
        "oldPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      },
      "description": "Request message for the Organization.UpdatePassword rpc."
    },
    "v1UpdateRoleRequest": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "description": "Required. The new namespace."
        },
        "name": {
          "type": "string",
          "description": "Required. The role name to update."
        },
        "newName": {
          "type": "string",
          "description": "Optional. If set, update the current name to this."
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Required. The list of permissions to attach to this role."
        }
      },
      "description": "Request message for the Iam.UpdateRole rpc."
    },
    "v1UpdateUserRoleMappingRequest": {
      "type": "object",
      "properties": {
        "subUser": {
          "type": "string",
          "description": "Optional. The subuser to map the roles. Defaults to caller if not set."
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MapRole"
          },
          "description": "Required. The roles to map to the user. Limited to 5 items. Setting `role` to\nempty will remove the mapping."
        }
      },
      "description": "Request message for the Iam.UpdateUserRoleMapping rpc."
    },
    "v1UpdateUserRoleMappingResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "failed": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Response message for the Iam.UpdateUserRoleMapping rpc."
    }
  }
}
