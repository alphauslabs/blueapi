syntax = "proto3";

package blueapi.api.cover;

import "api/cover/user.proto";

option go_package = "github.com/alphauslabs/blue-sdk-go/api/cover";
option java_package = "cloud.alphaus.blueapi.api.cover";
option java_outer_classname = "ApiCoverCostGroupProto";

message CostGroupData {
    string id = 1;
    string name = 2;
    string description = 3;
    string image = 4;
    string icon = 5;
    string colorTheme = 6;
    string createdAt = 7;
    string updatedAt = 8;
    repeated api.cover.MemberUserData members = 9;
    Combinations combinations = 10;
    api.cover.MemberUserData createdBy = 11;
    EventIndicator eventIndicator = 12;
}

message Combinations {
  // Optional. Valid only for the `aws` vendor. AWS-specific options.
  api.cover.CostGroupAwsOptions awsOptions = 1;

  // Optional. Valid only for the `azure` vendor. Azure-specific options.
  api.cover.CostGroupAzureOptions azureOptions = 2;

  // Optional. Valid only for the `gcp` vendor. GCP-specific options.
  api.cover.CostGroupGcpOptions gcpOptions = 3;

  // Optional. Valid only for the `azurecsp` vendor. AzureCSP-specific options.
  api.cover.CostGroupAzureCspOptions azurecspOptions = 4;

  // Optional. For custom selection when creating cost groups.
  // This field allows custom options for specifying criteria for cost group creation.
  api.cover.CostGroupCustomOptions customOptions = 5;
}

// AWS-specific options for CreateCostGroupRequest.
message CostGroupAwsOptions {
  // Optional. A list of filtering options. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  // A map of "key:value" column filters. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
  //
  // For example, if you like to filter `productCode` to return only `AmazonEC2`, set to `{"productCode":"eq:AmazonEC2"}` or `{"productCode":"AmazonEC2"}`. You can also use a regular expression like `{"productCode":"re:AmazonEC2|AmazonRDS"}`, which means return all AmazonEC2 or AmazonRDS lineitems. Or reverse regexp, such as `{"productCode":"!re:^AmazonEC2$"}`, which means return all items except `AmazonEC2`.
  repeated CostGroupOptionsFilters filters = 1;

  // Optional. A list of filtering options. See [ReadCostsRequestAwsOptionsFilters] for more information on each filter item. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  // A map of "key:value" tag filters. The key indicates the tag key while the value is the filter tag value which can be prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
  //
  // For example, if you want to query lineitems with the tag `project:MY_PROJECT`, set to `{"project":"MY_PROJECT"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
  repeated CostGroupOptionsFilters tagFilters = 2;
}

// Azure-specific options for CreateCostGroupRequest.
message CostGroupAzureOptions {
  // Optional. A list of filtering options. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  // A map of "key:value" column filters. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
  //
  // For example, if you like to filter `productCode` to return only `AmazonEC2`, set to `{"productCode":"eq:AmazonEC2"}` or `{"productCode":"AmazonEC2"}`. You can also use a regular expression like `{"productCode":"re:AmazonEC2|AmazonRDS"}`, which means return all AmazonEC2 or AmazonRDS lineitems. Or reverse regexp, such as `{"productCode":"!re:^AmazonEC2$"}`, which means return all items except `AmazonEC2`.
  repeated CostGroupOptionsFilters filters = 1;

  // Optional. A list of filtering options. See [ReadCostsRequestAwsOptionsFilters] for more information on each filter item. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  // A map of "key:value" tag filters. The key indicates the tag key while the value is the filter tag value which can be prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
  //
  // For example, if you want to query lineitems with the tag `project:MY_PROJECT`, set to `{"project":"MY_PROJECT"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
  repeated CostGroupOptionsFilters tagFilters = 2;
}

// AzureCsp-specific options for CreateCostGroupRequest.
message CostGroupAzureCspOptions {
  // Optional. A list of filtering options. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  // A map of "key:value" column filters. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
  //
  // For example, if you like to filter `productCode` to return only `AmazonEC2`, set to `{"productCode":"eq:AmazonEC2"}` or `{"productCode":"AmazonEC2"}`. You can also use a regular expression like `{"productCode":"re:AmazonEC2|AmazonRDS"}`, which means return all AmazonEC2 or AmazonRDS lineitems. Or reverse regexp, such as `{"productCode":"!re:^AmazonEC2$"}`, which means return all items except `AmazonEC2`.
  repeated CostGroupOptionsFilters filters = 1;

  // Optional. A list of filtering options. See [ReadCostsRequestAwsOptionsFilters] for more information on each filter item. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  // A map of "key:value" tag filters. The key indicates the tag key while the value is the filter tag value which can be prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
  //
  // For example, if you want to query lineitems with the tag `project:MY_PROJECT`, set to `{"project":"MY_PROJECT"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
  repeated CostGroupOptionsFilters tagFilters = 2;
}

// GCP-specific options for CreateCostGroupRequest.
message CostGroupGcpOptions {
  // Optional. A list of filtering options. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  // A map of "key:value" column filters. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
  //
  // For example, if you like to filter `serviceDescriptinon` to return only `Cloud Spanner`, set to `{"serviceDescription":"eq:Cloud Spanner"}` or `{"serviceDescription":"Cloud Spanner"}`. You can also use a regular expression like `{"serviceDescription":"re:Cloud Spanner|BigQuery"}`, which means return all Cloud Spanner or BigQuery lineitems. Or reverse regexp, such as `{"serviceDescription":"!re:^Cloud Spanner$"}`, which means return all items except `Cloud Spanner`.
  repeated CostGroupOptionsFilters filters = 1;

  // Optional. A list of filtering options. See [ReadCostsRequestAwsOptionsFilters] for more information on each filter item. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  // A map of "key:value" tag filters. The key indicates the tag key while the value is the filter tag value which can be prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
  
  // Tags on gcp used to conditionally allow or deny policies based on whether a supported resource has a specific tag.
  // Suppose you have a set of virtual machines (VMs) running various applications, and you want to distinguish between them based on their roles. You could assign tags like "app:webserver" and "app:database" to identify which VMs serve as web servers and which ones are database servers.
  // If you want to query lineitems with the tag `app:database`, set to `{"app":"database"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
  repeated CostGroupOptionsFilters tagFilters = 2;

  // Optional. A list of filtering options. See [ReadCostsRequestAwsOptionsFilters] for more information on each filter item. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  // A map of "key:value" tag filters. The key indicates the tag key while the value is the filter tag value which can be prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
  
  // Labels on gcp help you organize resources and manage your costs at scale, with the granularity you need.
  // For example, on Compute Engine, you can use labels to group VMs in categories such as production, staging, or development so that you can search for resources that belong to each development stage.
  // If you want to query lineitems with the label `vm-prod: prod`, set to `{"vm-prod":"prod"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
  repeated CostGroupOptionsFilters labelFilters = 3;

  // Project Labels refers to labels that have been assigned to GCP projects. 
  // For example, projectId "mobingi-main" assigned as "env:prod"
  // If you want to query lineitems with the label `env: prod`, set to `{"env":"prod"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
  repeated CostGroupOptionsFilters projectLabelFilters = 4;
}

// Custom-specific options for CreateCostGroupRequest.
message CostGroupCustomOptions {
  // Optional. A list of filtering options. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  repeated CostGroupOptionsFilters filters = 1;
}

message CostGroupOptionsFilters {
  map<string, string> andFilters = 1;
}

message Account {
    string accountId = 1;
    string name = 2;
    string type = 3; // account, subscription, project
}

message EventIndicator {
  // Anomaly is supported for now
  bool anomaly = 1; 
}