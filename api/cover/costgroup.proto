syntax = "proto3";

package blueapi.api.cover;

import "api/cover/user.proto";

option go_package = "github.com/alphauslabs/blue-sdk-go/api/cover";
option java_package = "cloud.alphaus.blueapi.api.cover";
option java_outer_classname = "ApiCoverCostGroupProto";

message CostGroupData {
    string id = 1;
    string name = 2;
    string description = 3;
    string image = 4;
    string icon = 5;
    string colorTheme = 6;
    string createdAt = 7;
    string updatedAt = 8;
    repeated api.cover.MemberUserData members = 9;
    Combinations combinations = 10;
    api.cover.MemberUserData createdBy = 11;
}

message Combinations {
  // Optional. Valid only for the `aws` vendor. AWS-specific options.
  api.cover.CostGroupAwsOptions awsOptions = 1;

  // Optional. Valid only for the `azure` vendor. Azure-specific options.
  api.cover.CostGroupAzureOptions azureOptions = 2;

  // Optional. Valid only for the `gcp` vendor. GCP-specific options.
  api.cover.CostGroupGcpOptions gcpOptions = 3;
}

// AWS-specific options for CreateCostGroupRequest.
message CostGroupAwsOptions {
  // Optional. A list of filtering options. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  repeated CostGroupOptionsFilters filters = 1;
}

// Azure-specific options for CreateCostGroupRequest.
message CostGroupAzureOptions {
  // Optional. A list of filtering options. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  repeated CostGroupOptionsFilters filters = 1;
}

// GCP-specific options for CreateCostGroupRequest.
message CostGroupGcpOptions {
  // Optional. A list of filtering options. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  repeated CostGroupOptionsFilters filters = 1;
}

// A map of "key:value" column filters. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
//
// For example, if you like to filter `productCode` to return only `AmazonEC2`, set to `{"productCode":"eq:AmazonEC2"}` or `{"productCode":"AmazonEC2"}`. You can also use a regular expression like `{"productCode":"re:AmazonEC2|AmazonRDS"}`, which means return all AmazonEC2 or AmazonRDS lineitems. Or reverse regexp, such as `{"productCode":"!re:^AmazonEC2$"}`, which means return all items except `AmazonEC2`.
message CostGroupOptionsFilters {
  map<string, string> andFilters = 1;
}

message Account {
    string accountId = 1;
    string name = 2;
    string type = 3; // account, subscription, project
}