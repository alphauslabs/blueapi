syntax = "proto3";

package blueapi.api;

option go_package = "github.com/alphauslabs/blue-sdk-go/api";
option java_package = "cloud.alphaus.blueapi.api";
option java_outer_classname = "ApiGroupRootUserProto";

// Describes the fields on an Alphaus root user for a billing group or access group.
message GroupRootUser {

  // The email address associated with the user. If there is no email
  // address provided then this field will contain "Not Set".
  string email = 1;

  // The password associated with the user. This field will only be
  // populated when the reseller is first created.
  string password = 2;

  // The ID of the group to which the user belongs. This will either
  // be a billing group ID or an access group ID.
  string groupId = 3;

  // The name of the group to which the user belongs. This will either
  // be the name of a billing group or an access group.
  string groupName = 4;

  // This field describes what type of group to which the user belongs.
  // This field will contain either a value of "billing_group" or "access_group".
  string groupType = 5;

  // A collection of feature flags and whether or not they should be enabled. 
  // For a full list of such flags, see https://alphauslabs.github.io/blueapi/apis/groups.html.
  FeatureFlags meta = 6;

  // The time when the password was last updated. This value will be null if 
  // the password has never been updated.
  string passwordUpdateTime = 7;

  // The time when the user was last updated. This value will be null if the
  // user has never been updated.
  string updateTime = 8;

  // An ID that uniquely identifies the user in the context of its access group.
  // If the user does not belong to an access group then this value field will
  // contain the same value as the user ID.
  string userAccessId = 9;

  // An ID that unqiuely identifies the user.
  string userId = 10;

  // How many days of Wave use remain. This value is only used for trial accounts.
  // This field cannot be updated.
  int32 waveAvailabilityDays = 11;

  // When the user registered on Wave.
  string waveRegistered = 12;

  // The plan associated with the user. Possible values include "trial",
  // "limited3" and "limited4".
  string waveStatus = 13;
}

// Describes the features and whether or not they are enabled for a particular user.
message FeatureFlags {

  // Control view-access to the Wave dashboard graph
  bool dashboard_graph = 1;

  // Control access to the Accounts pane under usage reports on Wave
  bool usage_account = 2;

  // Control view-access to the Account-level graph under usage reports on Wave
  bool usage_account_graph = 3;

  // Control edit-access to Accounts under usage reports on Wave
  bool usage_account_menu_account_edit = 4;

  // Control view-access to budget settings for an Account under usage reports on Wave
  bool usage_account_menu_budget = 5;

  // Control edit-access to budget settings for an Account under usage reports on Wave
  bool usage_account_menu_budget_edit = 6;

  // Control view-access to the fees menu for an Account under usage reports on Wave
  bool usage_account_menu_fees_fee = 7;

  // Control view-access to credits for an Account under usage reports on Wave
  bool usage_account_menu_fees_credit = 8;

  // Control view-access to refunds for an Account under usage reports on Wave
  bool usage_account_menu_fees_refund = 9;

  // Control view-access to other fees for an Account under usage reports on Wave
  bool usage_account_menu_fees_other_fees = 10;

  // Control download-access to usage report on Wave
  bool usage_report_download = 11;

  // Control access to the Groups pane under usage reports on Wave
  bool usage_group = 12;

  // Control view-access to the Group-level graph under usage reports on Wave
  bool usage_group_graph = 13;

  // Control view-access to the Tags pane under usage reports on Wave
  bool usage_tag = 14;

  // Control view-access to the Tag-level graph under usage reports on Wave
  bool usage_tag_graph = 15;

  // Control view-access to the Tags pane for crosstag groups under usage reports on Wave
  bool usage_crosstag = 16;

  // Control view-access to the Tag-level graph for crosstag groups under usage reports on Wave
  bool usage_crosstag_graph = 17;

  // Control view-access to purchased reservations under reserved instances on Wave
  bool ri_purchased = 18;

  // Control access to RI utilization under reserved instances on Wave
  bool ri_utilization = 19;

  // Control access to RI recommendations on Wave
  bool ri_recommendation = 20;

  // Control access to purchased savings plans on Wave
  bool sp_purchased = 21;

  // Control access to the invoice on Wave
  bool invoice = 22;

  // Control download-access to the discounted invoice CSV on Wave
  bool invoice_download_csv_discount = 23;

  // Control download-access to the merged invoice CSV on Wave
  bool invoice_download_csv_merged = 24;

  // Control access to API tokens on Wave
  bool open_api = 25;

  // Control access to sub-user management on Wave
  bool users_management = 26;

  // Control access to the dashboard on Aqua
  bool aq_dashboard = 27;

  // Control access to the Coverage Ratio pane on Aqua
  bool aq_coverage_ratio = 28;

  // Control access to the RI management pane on Aqua
  bool aq_ri_management = 29;

  // Control access to the savings plan management pane on Aqua
  bool aq_sp_management = 30;

  // Control access to RI and savings plan recommendations on Aqua
  bool aq_ri_sp_instances = 31;

  // Control access to right-sizing on Aqua
  bool aq_right_sizing = 32;

  // Control access to scheduling on Aqua
  bool aq_scheduling = 33;

  // Control access to the report filters pane in Wave Pro
  bool report_filters = 34;
}
