syntax = "proto3";

package blueapi.api;

option go_package = "github.com/alphauslabs/blue-sdk-go/api";
option java_package = "cloud.alphaus.blueapi.api";
option java_outer_classname = "ApiAdjustmentProto";

// AdjustmentConfig resource definition.
message AdjustmentConfig {
  // User configuration
  repeated ConfigFilters config = 1;

  // Vendor
  string vendor = 2;
  
  // Management account configuration
  repeated ManagementAccount accounts = 3;
}

// ManagementAccount resource definition.
message ManagementAccount {
  // Vendor-managed organization account Id
  string managementAccountId = 1;

  // A list of filtering options. See [ConfigFilters] for more information on each filter item. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  repeated ConfigFilters config = 2;
}

// ConfigFilters resource definition.
// A map of "key:value" config filters. The key indicates the adjustment key while the value is the filter adjustment value which can be prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
//
// For example, if you want to query lineitems with the adjustment `productCode:AmazonEC2`, set to `{"productCode":"AmazonEC2"}`. You can also use regular expressions for adjustment values, such as `{"description":"re:[A-Za-z0-9]*"}`.
// List of available adjustment keys: productCode, type, description
// For example value on productCode: AmazonEC2, AmazonRDS, AWSLambda, etc.
// For example value on type: Fee, Refund, SppDiscount, etc.
message ConfigFilters {
  map<string, string> andFilters = 1;
}

