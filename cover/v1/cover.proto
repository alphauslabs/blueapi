syntax = "proto3";

package blueapi.cover.v1;

import "api/cover/user.proto";
import "api/cover/view.proto";
import "api/cover/costgroup.proto";
import "api/cover/accountaccess.proto";
import "api/cover/costforecast.proto";
import "api/cover/fee.proto";
import "api/cover/rightsizingrecommendation.proto";
import "api/operation.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/alphauslabs/blueapi/cover";
option java_package = "cloud.alphaus.api.cover";
option java_outer_classname = "CoverProto";

// Cover service definition.
service Cover {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "(ALPHA) Cover API. Base URL: https://api.alphaus.cloud/m/blue/cover"
    external_docs: {
      url: "https://github.com/alphauslabs/blueapi/tree/main/cover/";
      description: "Service definition";
    }
  };

  // Onboard an organization with an admin account and default cost group
  rpc OnboardOrg(OnboardOrgRequest) returns (OnboardOrgResponse) {
    option (google.api.http) = {
      post: "/v1/members/onboard"
      body: "*"
    };
  }

  // Invite members to the system
  rpc InviteMember(InviteMemberRequest) returns (InviteMemberResponse) {
    option (google.api.http) = {
      post: "/v1/members/invite"
      body: "*"
    };
  }

  // Activate the added user
  rpc ActivateUser(ActivateUserRequest) returns (ActivateUserResponse) {
    option (google.api.http) = {
      post: "/v1/members/activate"
      body: "*"
    };
  }

  // Create a member
  rpc CreateMember(CreateMemberRequest) returns (CreateMemberResponse) {
    option (google.api.http) = {
      post: "/v1/members"
      body: "*"
    };
  }

  // Get all the members/subusers of the company
  rpc GetMembers(GetMembersRequest) returns (GetMembersResponse) {
    option (google.api.http) = {
      get: "/v1/members"
    };
  }

  // Get the details of the user
  rpc GetMemberDetails(GetMemberDetailsRequest) returns (GetMemberDetailsResponse) {
    option (google.api.http) = {
      get: "/v1/members/{userId}"
    };
  }

  // Get the cost group to which the member is attached
  rpc GetMemberCostGroup(GetMemberCostGroupRequest) returns (GetMemberCostGroupResponse) {
    option (google.api.http) = {
      get: "/v1/members/{userId}/costgroup"
    };
  }

  // Modify member's permission
  rpc UpdateMemberPermission(UpdateMemberPermissionRequest) returns (UpdateMemberPermissionResponse) {
    option (google.api.http) = {
      put: "/v1/members/{userId}/isadmin"
      body: "*"
    };
  }

  // Get the details of the logged-in user
  rpc GetUserDetails(GetUserDetailsRequest) returns (GetUserDetailsResponse) {
    option (google.api.http) = {
      get: "/v1/me"
    };
  }

  // Modify user's avatar
  rpc UpdateUserAvatar(UpdateUserAvatarRequest) returns (UpdateUserAvatarResponse) {
    option (google.api.http) = {
      put: "/v1/me/avatar"
      body: "*"
    };
  }

  // Modify user's icon
  rpc UpdateUserIcon(UpdateUserIconRequest) returns (UpdateUserIconResponse) {
    option (google.api.http) = {
      put: "/v1/me/icon"
      body: "*"
    };
  }

  // Modify user's color theme
  rpc UpdateUserColorTheme(UpdateUserColorThemeRequest) returns (UpdateUserColorThemeResponse) {
    option (google.api.http) = {
      put: "/v1/me/colortheme"
      body: "*"
    };
  }

  // Modify user's name
  rpc UpdateUserName(UpdateUserNameRequest) returns (UpdateUserNameResponse) {
    option (google.api.http) = {
      put: "/v1/me/name"
      body: "*"
    };
  }

  // Modify user's email
  rpc UpdateUserEmail(UpdateUserEmailRequest) returns (UpdateUserEmailResponse) {
    option (google.api.http) = {
      put: "/v1/me/email"
      body: "*"
    };
  }

  // Modify user's main view
  rpc UpdateUserMainView(UpdateUserMainViewRequest) returns (UpdateUserMainViewResponse) {
    option (google.api.http) = {
      put: "/v1/me/mainview"
      body: "*"
    };
  }

  // Reset user's password
  rpc ResetUserPassword(ResetUserPasswordRequest) returns (ResetUserPasswordResponse) {
    option (google.api.http) = {
      post: "/v1/me/password"
      body: "*"
    };
  }

  // Modify user's locale
  rpc UpdateUserLocale(UpdateUserLocaleRequest) returns (UpdateUserLocaleResponse) {
    option (google.api.http) = {
      put: "/v1/me/locale"
      body: "*"
    };
  }

  // Modify user's app theme
  rpc UpdateUserAppTheme(UpdateUserAppThemeRequest) returns (UpdateUserAppThemeResponse) {
    option (google.api.http) = {
      put: "/v1/me/apptheme"
      body: "*"
    };
  }

  // Modify user's timezone
  rpc UpdateUserTimezone(UpdateUserTimezoneRequest) returns (UpdateUserTimezoneResponse) {
    option (google.api.http) = {
      put: "/v1/me/timezone"
      body: "*"
    };
  }

  // Modify attributes
  rpc UpdateUserAttributes(UpdateUserAttributesRequest) returns (UpdateUserAttributesResponse) {
    option (google.api.http) = {
      put: "/v1/me/attributes"
      body: "*"
    };
  }

  // Deletes a user
  rpc DeleteMember(DeleteMemberRequest) returns (DeleteMemberResponse) {
    option (google.api.http) = {
      delete: "/v1/members/{userId}"
    };
  }

  // Reset member's password
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse) {
    option (google.api.http) = {
      post: "/v1/members/resetpassword"
      body: "*"
    };
  }

  // Create a view
  rpc CreateView(CreateViewRequest) returns (CreateViewResponse) {
    option (google.api.http) = {
      post: "/v1/views"
      body: "*"
    };
  }

  // Get all the views
  rpc GetViews(GetViewsRequest) returns (GetViewsResponse) {
    option (google.api.http) = {
      get: "/v1/views"
    };
  }

  // Get the details of the current view
  rpc GetCurrentView(GetCurrentViewRequest) returns (GetCurrentViewResponse) {
    option (google.api.http) = {
      get: "/v1/views/{viewId}"
    };
  }

  // Get favorite views
  rpc GetFavoriteViews(GetFavoriteViewsRequest) returns (GetFavoriteViewsResponse) {
    option (google.api.http) = {
      get: "/v1/views/favorites"
    };
  }

  // Publish current view
  rpc PublishView(PublishViewRequest) returns (PublishViewResponse) {
    option (google.api.http) = {
      post: "/v1/views/publish"
      body: "*"
    };
  }

  // Add to favorites
  rpc AddFavorite(AddFavoriteRequest) returns (AddFavoriteResponse) {
    option (google.api.http) = {
      put: "/v1/views/favorite/add"
      body: "*"
    };
  }

  // Remove from favorites
  rpc RemoveFavorite(RemoveFavoriteRequest) returns (RemoveFavoriteResponse) {
    option (google.api.http) = {
      put: "/v1/views/favorite/remove"
      body: "*"
    };
  }

  // Updates the view details
  rpc UpdateView(UpdateViewRequest) returns (UpdateViewResponse) {
    option (google.api.http) = {
      put: "/v1/views/{viewId}"
      body: "*"
    };
  }

  // Updates the view's layout
  rpc UpdateViewLayout(UpdateViewLayoutRequest) returns (UpdateViewLayoutResponse) {
    option (google.api.http) = {
      put: "/v1/views/layout/{viewId}"
      body: "*"
    };
  }

  // Updates the view's widget
  rpc UpdateViewWidget(UpdateViewWidgetRequest) returns (UpdateViewWidgetResponse) {
    option (google.api.http) = {
      put: "/v1/views/layout/{viewId}/{widgetId}"
      body: "*"
    };
  }

  // Deletes a view
  rpc DeleteView(DeleteViewRequest) returns (DeleteViewResponse) {
    option (google.api.http) = {
      delete: "/v1/views/{viewId}"
    };
  }

  // Updates the side menu state
  rpc UpdateSideMenuState(UpdateSideMenuStateRequest) returns (UpdateSideMenuStateResponse) {
    option (google.api.http) = {
      put: "/v1/views/{viewId}/sidemenustate"
      body: "*"
    };
  }

  // Add as side menu favorite
  rpc AddSideMenuFavorite(AddSideMenuFavoriteRequest) returns (AddSideMenuFavoriteResponse) {
    option (google.api.http) = {
      post: "/v1/views/{viewId}/sidemenufavorite"
      body: "*"
    };
  }

  // Remove from side menu favorite
  rpc RemoveSideMenuFavorite(RemoveSideMenuFavoriteRequest) returns (RemoveSideMenuFavoriteResponse) {
    option (google.api.http) = {
      post: "/v1/views/{viewId}/sidemenuunfavorite"
      body: "*"
    };
  }

  // Create a cost group
  rpc CreateCostGroup(CreateCostGroupRequest) returns (CreateCostGroupResponse) {
    option (google.api.http) = {
      post: "/v1/costgroups"
      body: "*"
    };
  }

  // Get all the cost groups
  rpc GetCostGroups(GetCostGroupsRequest) returns (GetCostGroupsResponse) {
    option (google.api.http) = {
      get: "/v1/costgroups"
    };
  }

  // Get the details of the cost group
  rpc GetCostGroupDetails(GetCostGroupDetailsRequest) returns (GetCostGroupDetailsResponse) {
    option (google.api.http) = {
      get: "/v1/costgroups/{costGroupId}"
    };
  }

  // Update cost group's name
  rpc UpdateCostGroupName(UpdateCostGroupNameRequest) returns (UpdateCostGroupNameResponse) {
    option (google.api.http) = {
      put: "/v1/costgroups/{costGroupId}/name"
      body: "*"
    };
  }

  // Update cost group's description
  rpc UpdateCostGroupDescription(UpdateCostGroupDescriptionRequest) returns (UpdateCostGroupDescriptionResponse) {
    option (google.api.http) = {
      put: "/v1/costgroups/{costGroupId}/description"
      body: "*"
    };
  }

  // Update cost group's image
  rpc UpdateCostGroupImage(UpdateCostGroupImageRequest) returns (UpdateCostGroupImageResponse) {
    option (google.api.http) = {
      put: "/v1/costgroups/{costGroupId}/image"
      body: "*"
    };
  }

  // Update cost group's icon
  rpc UpdateCostGroupIcon(UpdateCostGroupIconRequest) returns (UpdateCostGroupIconResponse) {
    option (google.api.http) = {
      put: "/v1/costgroups/{costGroupId}/icon"
      body: "*"
    };
  }

  // Update cost group's color theme
  rpc UpdateCostGroupColorTheme(UpdateCostGroupColorThemeRequest) returns (UpdateCostGroupColorThemeResponse) {
    option (google.api.http) = {
      put: "/v1/costgroups/{costGroupId}/colortheme"
      body: "*"
    };
  }

  // Update cost group's combinations
  rpc UpdateCostGroupCombinations(UpdateCostGroupCombinationsRequest) returns (UpdateCostGroupCombinationsResponse) {
    option (google.api.http) = {
      put: "/v1/costgroups/{costGroupId}/combinations"
      body: "*"
    };
  }

  rpc ResolveCostGroupCombinations(ResolveCostGroupCombinationsRequest) returns (ResolveCostGroupCombinationsResponse) {
    option (google.api.http) = {
      get: "/v1/costgroups/resolve/{costGroupId}"
    };
  } 

  // Assign a member to a cost group
  rpc AssignCostGroupMember(AssignCostGroupMemberRequest) returns (AssignCostGroupMemberResponse) {
    option (google.api.http) = {
      post: "/v1/costgroups/{costGroupId}/member/add"
      body: "*"
    };
  }

  // Remove a member from a cost group
  rpc RemoveCostGroupMember(RemoveCostGroupMemberRequest) returns (RemoveCostGroupMemberResponse) {
    option (google.api.http) = {
      post: "/v1/costgroups/{costGroupId}/member/remove"
      body: "*"
    };
  }

  // Deletes a cost group
  rpc DeleteCostGroup(DeleteCostGroupRequest) returns (DeleteCostGroupResponse) {
    option (google.api.http) = {
      delete: "/v1/costgroups/{costGroupId}"
    };
  }

  // Gets a CloudFormation launch URL for enabling the account access.
  rpc GetAccountAccessTemplateUrl(GetAccountAccessTemplateUrlRequest) returns (GetAccountAccessTemplateUrlResponse) {
    option (google.api.http) = {
      get: "/v1/aws/acctaccess"
    };
  }

  // Lists the account access role(s) attached to accounts under caller.
  rpc ListAccountAccess(ListAccountAccessRequest) returns (stream AccountAccess) {
    option (google.api.http) = {
      post: "/v1/aws/acctaccess/all:read"
      body: "*"
    };
  }

  // Gets the current account role attached to the input target.
  rpc GetAccountAccess(GetAccountAccessRequest) returns (AccountAccess) {
    option (google.api.http) = {
      get: "/v1/aws/acctaccess/{target}"
    };
  }

  // Starts validation of the account access stack deployment. If successful, the IAM role created from the CloudFormation stack will be registered to the target.
  rpc CreateAccountAccess(CreateAccountAccessRequest) returns (AccountAccess) {
    option (google.api.http) = {
      post: "/v1/aws/acctaccess"
      body: "*"
    };
  }

  // Starts an update to an existing account access CloudFormation stack for template changes, if any. Only call this API if the status of your account access is 'outdated'.
  rpc UpdateAccountAccess(UpdateAccountAccessRequest) returns (api.Operation) {
    option (google.api.http) = {
      put: "/v1/aws/acctaccess/{target}"
    };
  }

  // Deletes the current account access role attached to this target account. This does not delete the CloudFormation deployment in your account.
  rpc DeleteAccountAccess(DeleteAccountAccessRequest) returns (DeleteAccountAccessResponse) {
    option (google.api.http) = {
      delete: "/v1/aws/acctaccess/{target}"
    };
  }

  // Registers an account
  rpc RegisterAccount(RegisterAccountRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/{vendor}/account"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Lists assets for costgroup 
  rpc ListAssets(ListAssetsRequest) returns (stream Resource) {
    option (google.api.http) = {
      post: "/v1/assets:read"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Assets summary for costgroup 
  rpc GetAssetsSummary(GetAssetsSummaryRequest) returns (GetAssetsSummaryResponse) {
    option (google.api.http) = {
      get: "/v1/assets/summary/{costGroupId}"
    };
  }

  // WORK-IN-PROGRESS: Get usage and usage-based costs for the specified costgroup
  rpc GetCostUsage(GetCostUsageRequest) returns (stream CostItem) {
    option (google.api.http) = {
      post: "/v1/costusage:read"
      body: "*"
    };
  }

  // Gets the right sizing recommendation of all the accounts in the costgroup
  rpc GetRightSizingRecommendation(GetRightSizingRecommendationRequest) returns (GetRightSizingRecommendationResponse) {
    option (google.api.http) = {
      get: "/v1/rightsizingrecommendation/{costGroupId}"
    };
  }

  // Modify resource type from right sizing recommendation
  rpc ModifyResourceType(ModifyResourceTypeRequest) returns (ModifyResourceTypeResponse) {
    option (google.api.http) = {
      post: "/v1/{vendor}/resource/modify"
      body: "*"
    };
  }

  // Terminate a resource from right sizing recommendation
  rpc TerminateResource(TerminateResourceRequest) returns (TerminateResourceResponse) {
    option (google.api.http) = {
      post: "/v1/{vendor}/resource/terminate"
      body: "*"
    };
  }

  // Upload charge code
  rpc UploadChargeCode(stream UploadChargeCodeRequest) returns (UploadChargeCodeResponse) {
    option (google.api.http) = {
      post: "/v1/chargecode/upload"
      body: "*"
    };
  }

  // Assign payer to a linked account
  rpc AssignPayer(AssignPayerRequest) returns (AssignPayerResponse) {
    option (google.api.http) = {
      post: "/v1/{vendor}/payers"
      body: "*"
    };
  }

  // Get list of all payers
  rpc GetPayers(GetPayersRequest) returns (GetPayersResponse) {
    option (google.api.http) = {
      get: "/v1/{vendor}/payers"
    };
  }

  // Get list of registered accounts
  rpc GetAccounts(GetAccountsRequest) returns (GetAccountsResponse) {
    option (google.api.http) = {
      get: "/v1/{vendor}/accounts/{costGroupId}"
    };
  }

  // Get list of supported services
  rpc GetServices(GetServicesRequest) returns (GetServicesResponse) {
    option (google.api.http) = {
      get: "/v1/{vendor}/services/{costGroupId}"
    };
  }

  // Get list of available regions
  rpc GetRegions(GetRegionsRequest) returns (GetRegionsResponse) {
    option (google.api.http) = {
      get: "/v1/{vendor}/regions/{costGroupId}"
    };
  }

  // Get list of available tags
  rpc GetTags(GetTagsRequest) returns (GetTagsResponse) {
    option (google.api.http) = {
      get: "/v1/{vendor}/tags/{costGroupId}"
    };
  }

  // Lists the fees
  rpc ListFees(ListFeesRequest) returns (stream FeeDetails) {
    option (google.api.http) = {
      post: "/v1/{vendor}/fees/all:read"
      body: "*"
    };
  }

  // Gets the fee details
  rpc GetFeeDetails(GetFeeDetailsRequest) returns (FeeDetails) {
    option (google.api.http) = {
      get: "/v1/{vendor}/fees/{feeId}"
    };
  }

  // Recalculate fee based on criteria
  rpc RecalculateFee(RecalculateFeeRequest) returns (stream FeeDetails) {
    option (google.api.http) = {
      post: "/v1/{vendor}/fees/recalculate"
      body: "*"
    };
  }

  // Restore distributed fees
  rpc RestoreFee(RestoreFeeRequest) returns (stream FeeDetails) {
    option (google.api.http) = {
      post: "/v1/{vendor}/fees/restore"
      body: "*"
    };
  }

  // Get all available fees for the specified cost group
  rpc GetCostGroupFee(GetCostGroupFeeRequest) returns (stream FeeItem) {
    option (google.api.http) = {
      post: "/v1/fees:read"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Lists the fee adjustment allocators
  rpc ListFeeAdjustmentAllocators(ListFeeAdjustmentAllocatorsRequest) returns (stream FeeAdjustmentAllocator) {
    option (google.api.http) = {
      get: "/v1/{vendor}/fees/adjustment/allocators"
    };
  }

  // WORK-IN-PROGRESS: Creates fee adjustment allocator
  rpc CreateFeeAdjustmentAllocator(CreateFeeAdjustmentAllocatorRequest) returns (CreateFeeAdjustmentAllocatorResponse) {
    option (google.api.http) = {
      post: "/v1/{vendor}/fees/adjustment/allocators"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Creates fee adjustment allocator
  rpc UpdateFeeAdjustmentAllocator(UpdateFeeAdjustmentAllocatorRequest) returns (UpdateFeeAdjustmentAllocatorResponse) {
    option (google.api.http) = {
      put: "/v1/{vendor}/fees/adjustment/allocators/{id}"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Deletes a fee adjustment allocator
  rpc DeleteFeeAdjustmentAllocator(DeleteFeeAdjustmentAllocatorRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{vendor}/fees/adjustment/allocators/{id}"
    };
  }

  // WORK-IN-PROGRESS: Do not use.
  rpc ProxyCreateCompletion(ProxyCreateCompletionRequest) returns (stream ProxyCreateCompletionResponse) {
    option (google.api.http) = {
      post: "/v1/x/pcc"
      body: "*"
    };
  }
}

// Request message for OnboardOrg
message OnboardOrgRequest {
  string email = 1;
  string password = 2;
  string name = 3;
  string orgId = 4;
}

// Response message for OnboardOrg
message OnboardOrgResponse {
  api.cover.UserData userData = 1;
}

// Request message for InviteMember
message InviteMemberRequest {
  string email = 1;
}

// Response message for InviteMember
message InviteMemberResponse {
  string email = 1;
}

// Request message for ActivateUser
message ActivateUserRequest {
  string userId = 1;
  string previousPassword = 2;
  string password = 3;
  string name = 4;
}

// Response message for ActivateUser
message ActivateUserResponse {
  api.cover.UserData userData = 1;
}

// Request message for CreateMember
message CreateMemberRequest {
  string email = 1;
  string password = 2;
  string name = 3;
  repeated string costgroups = 4;
}

// Response message for CreateMember
message CreateMemberResponse {
  api.cover.UserData userData = 1;
}

// Request message for GetMembers
message GetMembersRequest {}

// Response message for GetMembers
message GetMembersResponse {
  repeated api.cover.UserData userData = 1;
}

// Request message for GetMemberDetails
message GetMemberDetailsRequest {
  // Required. UserId.
  string userId = 1;
}

// Response message for GetMemberDetails
message GetMemberDetailsResponse {
  api.cover.UserData userData = 1;
}

// Request message for GetMemberCostGroup
message GetMemberCostGroupRequest {
  // Required. UserId.
  string userId = 1;
}

// Response message for GetMemberCostGroup
message GetMemberCostGroupResponse {
  repeated api.cover.MemberCostGroup costGroups = 1;
}

// Request message for UpdateMemberPermission
message UpdateMemberPermissionRequest {
  // Required. UserId.
  string userId = 1;
  // Required. IsAdmin.
  bool isAdmin = 2;
}

// Response message for UpdateMemberPermission
message UpdateMemberPermissionResponse {
  api.cover.UserData userData = 1;
}

// Request message for GetUserDetails
message GetUserDetailsRequest {}

// Response message for GetUserDetails
message GetUserDetailsResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserAvatar
message UpdateUserAvatarRequest {
  string avatar = 1;
}

// Response message for UpdateUserAvatar
message UpdateUserAvatarResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserIcon
message UpdateUserIconRequest {
  string icon = 1;
}

// Response message for UpdateUserIcon
message UpdateUserIconResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserColorTheme
message UpdateUserColorThemeRequest {
  string colorTheme = 1;
}

// Response message for UpdateUserColorTheme
message UpdateUserColorThemeResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserName
message UpdateUserNameRequest {
  string name = 1;
}

// Response message for UpdateUserName
message UpdateUserNameResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserEmail
message UpdateUserEmailRequest {
  string email = 1;
}

// Response message for UpdateUserEmail
message UpdateUserEmailResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserMainView
message UpdateUserMainViewRequest {
  string viewId = 1;
}

// Response message for UpdateUserMainView
message UpdateUserMainViewResponse {
  api.cover.UserData userData = 1;
}

// Request message for ResetUserPassword
message ResetUserPasswordRequest {
  string previousPassword = 1;
  string newPassword = 2;
}

// Response message for ResetUserPassword
message ResetUserPasswordResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserLocale
message UpdateUserLocaleRequest {
  string locale = 1;
}

// Response message for UpdateUserLocale
message UpdateUserLocaleResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserAppTheme
message UpdateUserAppThemeRequest {
  string appTheme = 1;
}

// Response message for UpdateUserAppTheme
message UpdateUserAppThemeResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserTimezone
message UpdateUserTimezoneRequest {
  string timezone = 1;
}

// Response message for UpdateUserTimezone
message UpdateUserTimezoneResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserAttributes
message UpdateUserAttributesRequest {
  repeated string attributes = 1;
}

// Response message for UpdateUserAttributes
message UpdateUserAttributesResponse {
  api.cover.UserData userData = 1;
}

// Request message for DeleteMember
message DeleteMemberRequest {
  // Required. UserId.
  string userId = 1;
}

// Response message for DeleteMember
message DeleteMemberResponse {
  string userId = 1;
}

// Request message for ResetPassword
message ResetPasswordRequest {
  // Required. UserId.
  string userId = 1;
}

// Response message for ResetPassword
message ResetPasswordResponse {
  string userId = 1;
}

// Request message for CreateView
message CreateViewRequest {
  string name = 1;
  string description = 2;
  bool isPrivate = 3;
  bool isEditable = 4;
  string icon = 5;
  string reportType = 6;
}

// Response message for CreateView
message CreateViewResponse {
  api.cover.ViewData viewData = 1;
}

// Request message for GetViews
message GetViewsRequest {}

// Response message for GetViews
message GetViewsResponse {
  repeated api.cover.ViewList viewList = 1;
}

// Request message for GetCurrentView
message GetCurrentViewRequest {
  // Required. View Id.
  string viewId = 1;
}

// Response message for GetCurrentView
message GetCurrentViewResponse {
  api.cover.ViewData viewData = 1;
}

// Request message for GetFavoriteViews
message GetFavoriteViewsRequest {}

// Response message for GetFavoriteViews
message GetFavoriteViewsResponse {
  repeated api.cover.Favorites favorites = 1;
}

// Request message for PublishView
message PublishViewRequest {
  // Required. View Id.
  string viewId = 1;
}

// Response message for PublishView
message PublishViewResponse {
  string url = 1;
}

// Request message for AddFavorite
message AddFavoriteRequest {
  // Required. View Id.
  string viewId = 1;
}

// Response message for AddFavorite
message AddFavoriteResponse {
  string viewId = 1;
}

// Request message for RemoveFavorite
message RemoveFavoriteRequest {
  // Required. View Id.
  string viewId = 1;
}

// Response message for RemoveFavorite
message RemoveFavoriteResponse {
  string viewId = 1;
}

// Request message for UpdateView
message UpdateViewRequest {
  // Required. View Id.
  string viewId = 1;
  string name = 2;
  string description = 3;
  string icon = 4;
  bool isPrivate = 5;
  bool isEditable = 6;
}

// Response message for UpdateView
message UpdateViewResponse {
  string viewId = 1;
}

// Request message for UpdateViewLayout
message UpdateViewLayoutRequest {
  // Required. View Id.
  string viewId = 1;
  repeated api.cover.WidgetData layout = 2;
}

// Response message for UpdateViewLayout
message UpdateViewLayoutResponse {
  repeated api.cover.ViewLayout layout = 1;
}

// Request message for UpdateViewWidget
message UpdateViewWidgetRequest {
  // Required. View Id.
  string viewId = 1;
  // Required. Widget Id.
  string widgetId = 2;
  google.protobuf.Struct options = 3;
  repeated api.cover.LayoutRequests requests = 4;
}

// Response message for UpdateViewWidget
message UpdateViewWidgetResponse {
  string widgetId = 1;
  api.cover.WidgetData widgetData = 2;
}

// Request message for DeleteView
message DeleteViewRequest {
  // Required. View Id.
  string viewId = 1;
}

// Response message for DeleteView
message DeleteViewResponse {
  string viewId = 1;
}

// Request message for UpdateSideMenuState
message UpdateSideMenuStateRequest {
  // Required. View Id.
  string viewId = 1;
  repeated api.cover.SideMenuState sidemenustate = 2;
}

// Response message for UpdateSideMenuState
message UpdateSideMenuStateResponse {
  string viewId = 1;
}

// Request message for AddSideMenuFavorite
message AddSideMenuFavoriteRequest {
  // Required. View Id.
  string viewId = 1;
  string menuItemId = 2;
}

// Response message for AddSideMenuFavorite
message AddSideMenuFavoriteResponse {
  string viewId = 1;
}

// Request message for RemoveSideMenuFavorite
message RemoveSideMenuFavoriteRequest {
  // Required. View Id.
  string viewId = 1;
  string menuItemId = 2;
}

// Response message for RemoveSideMenuFavorite
message RemoveSideMenuFavoriteResponse {
  string viewId = 1;
}

// Request message for CreateCostGroup
message CreateCostGroupRequest {
  string name = 1;
  string description = 2;
  string image = 3;
  string icon = 4;
  string colorTheme = 5;
  api.cover.Combinations combinations = 6;
}

// Response message for CreateCostGroup
message CreateCostGroupResponse {
  api.cover.CostGroupData costGroupData = 1;
}

// Request message for GetCostGroups
message GetCostGroupsRequest {}

// Response message for GetCostGroups
message GetCostGroupsResponse {
  repeated api.cover.CostGroupData costGroupData = 1;
}

// Request message for GetCostGroupDetails
message GetCostGroupDetailsRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
}

// Response message for GetCostGroupDetails
message GetCostGroupDetailsResponse {
  api.cover.CostGroupData costGroupData = 1;
}

// Request message for UpdateCostGroupName
message UpdateCostGroupNameRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. Name.
  string name = 2;
}

// Response message for UpdateCostGroupName
message UpdateCostGroupNameResponse {
  string name = 1;
}

// Request message for UpdateCostGroupDescription
message UpdateCostGroupDescriptionRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. Description.
  string description = 2;
}

// Response message for UpdateCostGroupDescription
message UpdateCostGroupDescriptionResponse {
    string description = 1;
}

// Request message for UpdateCostGroupImage
message UpdateCostGroupImageRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. Image.
  string image = 2;
}

// Response message for UpdateCostGroupImage
message UpdateCostGroupImageResponse {
  string image = 1;
}

// Request message for UpdateCostGroupIcon
message UpdateCostGroupIconRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. Icon.
  string icon = 2;
}

// Response message for UpdateCostGroupIcon
message UpdateCostGroupIconResponse {
    string icon = 1;
}

// Request message for UpdateCostGroupColorTheme
message UpdateCostGroupColorThemeRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. Color Theme.
  string colorTheme = 2;
}

// Response message for UpdateCostGroupColorTheme
message UpdateCostGroupColorThemeResponse {
    string colorTheme = 1;
}

// Request message for UpdateCostGroupCombinations
message UpdateCostGroupCombinationsRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  api.cover.Combinations combinations = 2;
}

// Response message for UpdateCostGroupCombinations
message UpdateCostGroupCombinationsResponse {
  api.cover.Combinations combinations = 1;
}

// Request message for AssignCostGroupMember
message AssignCostGroupMemberRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. User Id.
  string userId = 2;
}

// Response message for AssignCostGroupMember
message AssignCostGroupMemberResponse {
  string costGroupId = 1;
  string userId = 2;
}

// Request message for RemoveCostGroupMember
message RemoveCostGroupMemberRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. User Id.
  string userId = 2;
}

// Response message for RemoveCostGroupMember
message RemoveCostGroupMemberResponse {
  string costGroupId = 1;
  string userId = 2;
}

// Request message for DeleteCostGroup
message DeleteCostGroupRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
}

// Response message for DeleteCostGroup
message DeleteCostGroupResponse {
  string costGroupId = 1;
}

// Request message for the GetAccountAccessTemplateUrlRequest rpc.
message GetAccountAccessTemplateUrlRequest {
  // All templates are publicly available from the reponse link (`templateUrl`) if you want to audit the included permissions.
  string type = 1;
}

// Response message for the GetAccountAccessTemplateUrlResponse rpc.
message GetAccountAccessTemplateUrlResponse {
  // The CloudFormation launch url. Open it in your browser.
  string launchUrl = 1;

  // The latest CloudFormation template. The version is included in the filename.
  string templateUrl = 2;

  // The default stack name used. Can be modified.
  string stackName = 3;

  // The AWS account that will receive the access. Do not change.
  string principal = 4;

  // The external id for this role. Do not change.
  string externalId = 5;
}

// Request message for the ListAccountAccess rpc.
message ListAccountAccessRequest {}

// Request message for the GetAccountAccess rpc.
message GetAccountAccessRequest {
  // Required. The target AWS account to query.
  string target = 1;
}

// Response message for GetAccountAccess, CreateAccountAccess rpc.
message AccountAccess {
  // The queried target account.
  string target = 1;

  // The account name
  string accountName = 2;

  // The account type. Payer or linked account.
  string accountType = 3;

  // The payer account of the account.
  string payerId = 4;

  // The role ARN that provides the cross-account access permissions.
  string roleArn = 5;

  // The external id for this role.
  string externalId = 6;

  // The id of the CloudFormation stack deployed in the target account.
  string stackId = 7;

  // The region where the stack is deployed.
  string stackRegion = 8;

  // The latest template used to deploy the stack.
  string templateUrl = 9;

  // The s3 bucket name
  string bucketName = 10;

  // Report path prefix
  string prefix = 11;

  // The report name
  string reportName = 12;

  // The status of registration for CUR export, API access and Cloudwatch streaming
  api.cover.RegistrationStatus registrationStatus = 13;

  // This can be `latest`, `outdated`, or some error information.
  string status = 14;

  // The last updated timestamp, RFC3339 UTC.
  string lastUpdated = 15;
}

// Request message for the CreateAccountAccess rpc.
message CreateAccountAccessRequest {
  // Required. The target AWS account to validate.
  string target = 1;
}

// Request message for the UpdateAccountAccess rpc.
message UpdateAccountAccessRequest {
  // Required. The target AWS account to update.
  string target = 1;
}

// Request message for the DeleteAccountAccess rpc.
message DeleteAccountAccessRequest {
  // Required. The target AWS account to delete.
  string target = 1;
}

// Response message for the DeleteAccountAccess rpc.
message DeleteAccountAccessResponse {
  string targetId = 1;
}

// Request message for the RegisterAccount rpc.
message RegisterAccountRequest {
  // Required. Cloud vendor.
  string vendor = 1;

  // Required. The AWS account Id.
  string accountId = 2;

  // The account name
  string accountName = 3;
}

// Request message for the Asset.ListResources rpc.
message ListAssetsRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;

  // Optional. If not set, current month will be used. Format: `yyyymm`.
  string startMonth = 2;

  // Optional. If not set, current month will be used. Format: `yyyymm`.
  string endMonth = 3;

  // Optional. If true, returns only all assets with recommendation
  bool withRecommendation = 4;

  // Optional. For AWS-specific filter options.
  repeated ListAssetsFilters awsOptions = 5;

  // Optional. For AWS-specific properties filter options.
  repeated ListAssetsFilters awsPropertiesOptions = 6;
}

message ListAssetsFilters {
  map<string, string> andFilters = 1;
}

message Resource {
	// Format is `yyyy-mm`
	string date = 1;

	// Organization ID
	string orgId = 2;

	// Only `aws` is supported for now.
	string vendor = 3;

	// Resource owner account
	string account = 4;

	// Only `AmazonEC2` is supported for now.
	string service = 5;

	// Resource unique identifier
	string resourceId = 6;

	// Only `AWS::EC2::Instance` is supported for now
	string resourceType = 7;

	// Cost incurred for the resource on specified month.
	double cost = 8;

	// Format: JSON String
	string properties = 9;
	
	// Format: JSON String
	string recommendation = 10;
}

message GetAssetsSummaryRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;

  // Optional. If not set, current month will be used. Format: `yyyymm`.
  string startMonth = 2;

  // Optional. If not set, current month will be used. Format: `yyyymm`.
  string endMonth = 3;

  // Optional. If true, return the assets summary for the requested period. Else, summary per month is returned.
  bool combineDates = 4;

  // Optional. For AWS-specific filter options.
  repeated ListAssetsFilters awsOptions = 5;

  // Optional. For AWS-specific properties filter options.
  repeated ListAssetsFilters awsPropertiesOptions = 6;
}

message GetAssetsSummaryResponse {
  repeated AssetsSummary summary = 1;
  // Format: JSON String
  string recommendationSummary = 2;
}

message AssetsSummary {
  // Format is `yyyy-mm`
	string date = 1;

  // Only `aws` is supported for now.
	string vendor = 2;

  // Total number of resources
  int64 totalResources = 3;

  // Total Cost incurred for the resources on specified month.
  double totalCost = 4;
}

message ResolveCostGroupCombinationsRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
}

message ResolveCostGroupCombinationsResponse {
  string costGroupId = 1;
  repeated api.cover.Account accounts = 2;
}

message GetCostUsageRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;

  // Optional. If not set, the first day of the current month will be used. Format: `yyyymmdd`.
  string startTime = 2;

  // Optional. If not set, current date will be used. Format: `yyyymmdd`.
  string endTime = 3;

  // Optional. If set to true, return data grouped by month within the date range. 
  // If you want data that is grouped per account per month, set this to `true`, then set `groupByColumns` to `none`. 
  // You can also use `groupByColumns` while setting this to true.
  bool groupByMonth = 4;

  // Optional. If set, returns only the services or accounts with the highest cost or usage
  // Default value is 0.
  int64 limit = 5;

  // Optional. Valid values are `cost` and `usage`. 
  // Default value is `cost`. Used only when limit is not 0.
  string category = 6;

  // Optional. Valid values are `service` and `account`. Only `service` is supported for now 
  // Default value is `service`. Used only when limit is not 0.
  string groupBy = 7;

  // Optional. Valid only for the `aws` vendor. AWS-specific options.
  GetCostUsageRequestAwsOptions awsOptions = 8;

  // Optional. Valid only for the `azure` vendor. Azure-specific options.
  GetCostUsageRequestAzureOptions azureOptions = 10;

  // Optional. If set to true, include cost forecast for current month 
  bool includeCostForecast = 9;
}

message GetCostUsageRequestAwsOptions {
  // Optional. A comma-separated list of columns to aggregate the data into. 
  // Valid values are `productCode`, `serviceCode`, `region`, `zone`, `usageType`, `instanceType`, `operation`, `invoiceId`, `description`, and `resourceId`. 
  // A special value of `none` is also supported, which means query by date or month per account only.
  //
  // For example, if you only want the services and region data, you can set this field to `productCode,region`. 
  // Your input sequence doesn't matter (although the sequence above is recommended) as the actual sequence is already fixed in the return data (see the definition in https://github.com/alphauslabs/blueapi/blob/main/api/aws/cost.proto), which is generic to specific, top to bottom. Invalid values are discarded. Excluded columns will be empty.
  string groupByColumns = 1;

  // Optional. If set to true, group all input accounts into one.
  bool groupAccounts = 2;

  // Optional. A list of filtering options. See [ReadCostsRequestOptionsFilters] for more information on each filter item. 
  // Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  repeated ReadCostsRequestOptionsFilters filters = 3;

  // Optional. A list of filtering options specific for tags. 
  // Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc. Discarded when `groupByColumns` field is set or if `groupByMonth` is true.
  repeated ReadCostsRequestOptionsFilters tagFilters = 4;
}

message GetCostUsageRequestAzureOptions {
  // Optional. A comma-separated list of columns to aggregate the data into. 
  // Valid values are `accountId`, `serviceName`, `serviceTier`, `location`, `product`, `partNumber`, `resourceGuid`, `offerId`, `consumedService`, `departmentId`, `departmentName`, `resourceGroup`, `enrollment`, `additionalInfo`
  // A special value of `none` is also supported, which means query by date or month per account only.
  //
  // For example, if you only want the services and location data, you can set this field to `serviceName,location`. 
  string groupByColumns = 1;

  // Optional. If set to true, group all input subscription into one.
  bool groupAccounts = 2;

  // Optional. A list of filtering options. See [ReadCostsRequestOptionsFilters] for more information on each filter item. 
  // Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  repeated ReadCostsRequestOptionsFilters filters = 3;

  // Optional. A list of filtering options specific for tags. 
  // Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc. 
  repeated ReadCostsRequestOptionsFilters tagFilters = 4;
}

// A map of "key:value" column filters. Dependent on `groupByColumns` and/or `groupByMonth`. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
//
// For example, if you like to filter `productCode` to return only `AmazonEC2`, set to `{"productCode":"eq:AmazonEC2"}` or `{"productCode":"AmazonEC2"}`. You can also use a regular expression like `{"productCode":"re:AmazonEC2|AmazonRDS"}`, which means return all AmazonEC2 or AmazonRDS lineitems. Or reverse regexp, such as `{"productCode":"!re:^AmazonEC2$"}`, which means return all items except `AmazonEC2`.
message ReadCostsRequestOptionsFilters {
  map<string, string> andFilters = 1;
}

// Response message wrapper for cloud costs.
message CostItem {
  //`aws`, `azure`, `azureea` or `gcp`
  string vendor = 1;
  string date = 2;
  string product = 3;
  // AWS linked account or Azure subscription or GCP project
  string account = 4;
  double cost = 5;
  // Could be AWS, Azure or GCP Cost
  string details = 6;
  //Only for AWS for now
  api.cover.AwsCostForecast forecast = 7; 
}

// Request message for GetRightSizingRecommendation
message GetRightSizingRecommendationRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
}

// Response message for GetRightSizingRecommendation
message GetRightSizingRecommendationResponse {
  repeated api.cover.ResourceData resource = 1;
}

// Request message for ModifyResourceType
message ModifyResourceTypeRequest {
  // Required. Cloud vendor.
  string vendor = 1;

  // Required. Account Id.
  string accountId = 2;

  // Required. The resource Id.
  string resourceId = 3;

  // Required. The recommended resource type.
  string resourceType = 4;

  // Required. Resource region.
  string region = 5;
}

// Response message for ModifyResourceType
message ModifyResourceTypeResponse {
  string accountId = 1;
  string resourceId = 2;
  string resourceType = 3;
  string region = 4;
}

// Request message for TerminateResource
message TerminateResourceRequest {
  // Required. Cloud vendor.
  string vendor = 1;

  // Required. Account Id.
  string accountId = 2;

  // Required. The resource Id.
  string resourceId = 3;

  // Required. Resource region.
  string region = 4;
}

// Response message for TerminateResource
message TerminateResourceResponse {
  string accountId = 1;
  string resourceId = 2;
  string region = 3;
}

// Status of upload file
enum Status {
  PENDING = 0;
  IN_PROGRESS = 1;
  SUCCESS = 2;
  FAILED = 3;
}

// (WIP): Request message for Upload Charge Code
message UploadChargeCodeRequest {
  // Required. File name
  string name = 1; // file name
  // Required. File type
  string type = 2; // file type
  // Required. Convert file into bytes to transfer file
  bytes file = 3; // file in bytes
}

// (WIP): Response message for Upload Charge Code
message UploadChargeCodeResponse {
  // File name
  string name = 1;
  // Status
  Status status = 2;
}

// Request message for AssignPayer
message AssignPayerRequest {
  // Required. Cloud vendor.
  string vendor = 1;

  // Required. Account Id.
  string accountId = 2;

  // Required. The Payer Id.
  string payerId = 3;
}

// Response message for AssignPayer
message AssignPayerResponse {
  string accountId = 1;
  string payerId = 2;
}

// Request message for GetPayers
message GetPayersRequest {
  // Required. Cloud vendor.
  string vendor = 1;
}

// Response message for GetPayers
message GetPayersResponse {
  repeated string payers = 1;
}

// Request message for GetAccounts
message GetAccountsRequest {
  // Required. Cloud vendor.
  string vendor = 1;
  string costGroupId = 2;
}

// Response message for GetAccounts
message GetAccountsResponse {
  repeated string accounts = 1;
}

// Request message for GetServices
message GetServicesRequest {
  // Required. Cloud vendor.
  string vendor = 1;
  string costGroupId = 2;
}

// Response message for GetServices
message GetServicesResponse {
  repeated string services = 1;
}

// Request message for GetRegions
message GetRegionsRequest {
  // Required. Cloud vendor.
  string vendor = 1;
  string costGroupId = 2;
}

// Response message for GetRegions
message GetRegionsResponse {
  repeated string regions = 1;
}

// Request message for GetTags
message GetTagsRequest {
  // Required. Cloud vendor.
  string vendor = 1;
  string costGroupId = 2;
}

// Response message for GetTags
message GetTagsResponse {
  repeated api.cover.TagData tagData = 1;
}

// Request message for the ListFees rpc.
message ListFeesRequest {
  string vendor = 1;
  string month = 2;
}

// Request message for the GetFeeDetails rpc.
message GetFeeDetailsRequest {
  // Required. Cloud vendor.
  string vendor = 1;
  // Required. The fee id to query.
  string feeId = 2;
}

// Response message for GetFeeDetails, CreateFeeReallocation rpc.
message FeeDetails {
  string feeId = 1;
  string orgId = 2;
  string entity = 3;
  string month = 4;
  string account = 5;
  string lineType = 6;
  string feeType = 7;
  string productCode = 8;
  string description = 9;
  string started = 10;
  string timeInterval = 11;
  string productName = 12;
  string currency = 13;
  string splitStatus = 14;
  bool isAllocated = 15;
  bool isApplied = 16;
  double unblendedCost = 17;
  string sourceFee = 18;
  string lastUpdate = 19;
}

// Request message for the RecalculateFee rpc.
message RecalculateFeeRequest {
  // Required. Cloud vendor.
  string vendor = 1;
  repeated api.cover.Accounts accounts = 2;
  repeated api.cover.CostGroups costGroups = 3;
}

// Request message for the RestoreFee rpc.
message RestoreFeeRequest {
  // Required. Cloud vendor.
  string vendor = 1;
  // Required. The fee to restore.
  string feeId = 2;
}

// Request message for the GetCostGroupFee rpc.
message GetCostGroupFeeRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  string startTime = 2;
  string endTime = 3;
}

// Response message wrapper for cost group fees.
message FeeItem {
  string vendor = 1;
  string month = 2;
  string product = 3;
  string account = 4;
  string type = 5;
  double cost = 6;
}

// Fee adjustment allocator for aws
message FeeAdjustmentAllocatorAwsOptions {
  // Optional. The specific fee to be adjusted.
  string feeId = 1;
  
  // Optional. The number of months the fee is to be distributed starting from startMonth.
  int64 duration = 2;

  // Optional. The starting month of the allocator to be effective.
  string startMonth = 3;
  
  // Optional. The default account for remaining costs. If not set, will allocate the cost to the original account.
  string defaultAccount = 4;

  // A map of "key:value" attribute filters. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
  message Criteria {
    map<string, string> and = 1;
  }
  
  // Required. Criteria for the adjustment to be applied.
  repeated Criteria criteria = 5;

  message Allocator {
    // Required. The type of attribute where the adjustments are to be applied. Only `account` is supported for now. Planning to support `costgroup`, `tag`, and `region`.
    string attribute = 1;

    // Required. The value for the specified attribute. AccountId for account attribute.
    string value = 2;
	
	  // Required. The formula to use to compute the value of the allocation on an attribute.
	  string formula = 3;
	
	  // Optional. The number of months the adjustment is to be applied. If set, it will divide the cost equally to the number of months.
	  int64 months = 4;
  }

  repeated Allocator allocator = 6;
}

message FeeAdjustmentAllocator {
  string id = 1;
  int64 expiration = 2;
  string createTime = 3;
  string updateTime = 4;
  FeeAdjustmentAllocatorAwsOptions awsOptions = 5;
}

// Request message for the ListFeeAdjustmentAllocators rpc.
message ListFeeAdjustmentAllocatorsRequest {
  // Required. At the moment, only `aws` is supported.
  string vendor = 1;
}

// Request message for the CreateFeeAdjustmentAllocator rpc.
message CreateFeeAdjustmentAllocatorRequest {
  // Required. At the moment, only `aws` is supported.
  string vendor = 1;

  // Optional. The number of months the allocator is active. If not set, allocator won't expire (always active)
  int64 expiration = 2;

  // Required if `{vendor}` is `aws`. AWS-specific options.
  FeeAdjustmentAllocatorAwsOptions awsOptions = 3;
}

// Response message for the CreateFeeAdjustmentAllocator rpc.
message CreateFeeAdjustmentAllocatorResponse {
  int64 expiration = 1;
  FeeAdjustmentAllocator aws = 2;
}

// Request message for the UpdateFeeAdjustmentAllocator rpc.
message UpdateFeeAdjustmentAllocatorRequest {
  // Required. At the moment, only `aws` is supported.
  string vendor = 1;

  // Required. The id of the allocator to delete.
  string id = 2;

  // Optional. The number of months the allocator is active. If not set, allocator won't expire (always active)
  int64 expiration = 3;

  // Required if `{vendor}` is `aws`. AWS-specific options.
  FeeAdjustmentAllocatorAwsOptions awsOptions = 4;
}

// Response message for the UpdateFeeAdjustmentAllocator rpc.
message UpdateFeeAdjustmentAllocatorResponse {
  int64 expiration = 1;
  FeeAdjustmentAllocator aws = 2;
}

// Request message for the DeleteFeeAdjustmentAllocator rpc.
message DeleteFeeAdjustmentAllocatorRequest {
  // Required. At the moment, only `aws` is supported.
  string vendor = 1;

  // Required. The id of the allocator to delete.
  string id = 2;
}

// Request message for the ProxyCreateCompletion rpc.
message ProxyCreateCompletionRequest {
  google.protobuf.Struct params = 1;
}

// Response message for the ProxyCreateCompletion rpc.
message ProxyCreateCompletionResponse {
  string line = 1;
}
