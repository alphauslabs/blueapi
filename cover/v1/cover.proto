syntax = "proto3";

package blueapi.cover.v1;

import "api/cover/optimizationrecommendation.proto";
import "api/cover/attribute.proto";
import "api/cover/user.proto";
import "api/cover/view.proto";
import "api/cover/costgroup.proto";
import "api/cover/accountaccess.proto";
import "api/cover/costforecast.proto";
import "api/cover/discountrecommendation.proto";
import "api/cover/rightsizingrecommendation.proto";
import "api/cover/alert.proto";
import "api/cover/budget.proto";
import "api/cover/insightreport.proto";
import "protos/operation.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/alphauslabs/blueapi/cover";
option java_package = "cloud.alphaus.api.cover";
option java_outer_classname = "CoverProto";

// Cover service definition.
service Cover {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "(ALPHA) Cover API. Base URL: https://api.alphaus.cloud/m/blue/cover"
    external_docs: {
      url: "https://github.com/alphauslabs/blueapi/tree/main/cover/";
      description: "Service definition";
    }
  };

  // Onboard an organization with an admin account and default cost group
  rpc OnboardOrg(OnboardOrgRequest) returns (OnboardOrgResponse) {
    option (google.api.http) = {
      post: "/v1/members/onboard"
      body: "*"
    };
  }

  // Invite members to the system
  rpc InviteMember(InviteMemberRequest) returns (InviteMemberResponse) {
    option (google.api.http) = {
      post: "/v1/members/invite"
      body: "*"
    };
  }

  // Activate the added user
  rpc ActivateUser(ActivateUserRequest) returns (ActivateUserResponse) {
    option (google.api.http) = {
      post: "/v1/members/activate"
      body: "*"
    };
  }

  // Create a member
  rpc CreateMember(CreateMemberRequest) returns (CreateMemberResponse) {
    option (google.api.http) = {
      post: "/v1/members"
      body: "*"
    };
  }

  // Get all the members/subusers of the company
  rpc GetMembers(GetMembersRequest) returns (GetMembersResponse) {
    option (google.api.http) = {
      get: "/v1/members"
    };
  }

  // Get the details of the user
  rpc GetMemberDetails(GetMemberDetailsRequest) returns (GetMemberDetailsResponse) {
    option (google.api.http) = {
      get: "/v1/members/{userId}"
    };
  }

  // Get the cost group to which the member is attached
  rpc GetMemberCostGroup(GetMemberCostGroupRequest) returns (GetMemberCostGroupResponse) {
    option (google.api.http) = {
      get: "/v1/members/{userId}/costgroup"
    };
  }

  // Modify member's permission
  rpc UpdateMemberPermission(UpdateMemberPermissionRequest) returns (UpdateMemberPermissionResponse) {
    option (google.api.http) = {
      put: "/v1/members/{userId}/isadmin"
      body: "*"
    };
  }

  // Get the details of the logged-in user
  rpc GetUserDetails(GetUserDetailsRequest) returns (GetUserDetailsResponse) {
    option (google.api.http) = {
      get: "/v1/me"
    };
  }

  // Modify user's avatar
  rpc UpdateUserAvatar(UpdateUserAvatarRequest) returns (UpdateUserAvatarResponse) {
    option (google.api.http) = {
      put: "/v1/me/avatar"
      body: "*"
    };
  }

  // Modify user's icon
  rpc UpdateUserIcon(UpdateUserIconRequest) returns (UpdateUserIconResponse) {
    option (google.api.http) = {
      put: "/v1/me/icon"
      body: "*"
    };
  }

  // Modify user's color theme
  rpc UpdateUserColorTheme(UpdateUserColorThemeRequest) returns (UpdateUserColorThemeResponse) {
    option (google.api.http) = {
      put: "/v1/me/colortheme"
      body: "*"
    };
  }

  // Modify user's name
  rpc UpdateUserName(UpdateUserNameRequest) returns (UpdateUserNameResponse) {
    option (google.api.http) = {
      put: "/v1/me/name"
      body: "*"
    };
  }

  // Modify user's email
  rpc UpdateUserEmail(UpdateUserEmailRequest) returns (UpdateUserEmailResponse) {
    option (google.api.http) = {
      put: "/v1/me/email"
      body: "*"
    };
  }

  // Modify user's main view
  rpc UpdateUserMainView(UpdateUserMainViewRequest) returns (UpdateUserMainViewResponse) {
    option (google.api.http) = {
      put: "/v1/me/mainview"
      body: "*"
    };
  }

  // Reset user's password
  rpc ResetUserPassword(ResetUserPasswordRequest) returns (ResetUserPasswordResponse) {
    option (google.api.http) = {
      post: "/v1/me/password"
      body: "*"
    };
  }

  // Modify user's locale
  rpc UpdateUserLocale(UpdateUserLocaleRequest) returns (UpdateUserLocaleResponse) {
    option (google.api.http) = {
      put: "/v1/me/locale"
      body: "*"
    };
  }

  // Modify user's app theme
  rpc UpdateUserAppTheme(UpdateUserAppThemeRequest) returns (UpdateUserAppThemeResponse) {
    option (google.api.http) = {
      put: "/v1/me/apptheme"
      body: "*"
    };
  }

  // Modify user's timezone
  rpc UpdateUserTimezone(UpdateUserTimezoneRequest) returns (UpdateUserTimezoneResponse) {
    option (google.api.http) = {
      put: "/v1/me/timezone"
      body: "*"
    };
  }

  // Modify attributes
  rpc UpdateUserAttributes(UpdateUserAttributesRequest) returns (UpdateUserAttributesResponse) {
    option (google.api.http) = {
      put: "/v1/me/attributes"
      body: "*"
    };
  }

  // Deletes a user
  rpc DeleteMember(DeleteMemberRequest) returns (DeleteMemberResponse) {
    option (google.api.http) = {
      delete: "/v1/members/{userId}"
    };
  }

  // Reset member's password
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse) {
    option (google.api.http) = {
      post: "/v1/members/resetpassword"
      body: "*"
    };
  }

  // Create a view
  rpc CreateView(CreateViewRequest) returns (CreateViewResponse) {
    option (google.api.http) = {
      post: "/v1/views"
      body: "*"
    };
  }

  // Get all the views
  rpc GetViews(GetViewsRequest) returns (GetViewsResponse) {
    option (google.api.http) = {
      get: "/v1/views"
    };
  }

  // Get the details of the current view
  rpc GetCurrentView(GetCurrentViewRequest) returns (GetCurrentViewResponse) {
    option (google.api.http) = {
      get: "/v1/views/{viewId}"
    };
  }

  // Get favorite views
  rpc GetFavoriteViews(GetFavoriteViewsRequest) returns (GetFavoriteViewsResponse) {
    option (google.api.http) = {
      get: "/v1/views/favorites"
    };
  }

  // Publish current view
  rpc PublishView(PublishViewRequest) returns (PublishViewResponse) {
    option (google.api.http) = {
      post: "/v1/views/publish"
      body: "*"
    };
  }

  // Add to favorites
  rpc AddFavorite(AddFavoriteRequest) returns (AddFavoriteResponse) {
    option (google.api.http) = {
      put: "/v1/views/favorite/add"
      body: "*"
    };
  }

  // Remove from favorites
  rpc RemoveFavorite(RemoveFavoriteRequest) returns (RemoveFavoriteResponse) {
    option (google.api.http) = {
      put: "/v1/views/favorite/remove"
      body: "*"
    };
  }

  // Updates the view details
  rpc UpdateView(UpdateViewRequest) returns (UpdateViewResponse) {
    option (google.api.http) = {
      put: "/v1/views/{viewId}"
      body: "*"
    };
  }

  // Updates the view's layout
  rpc UpdateViewLayout(UpdateViewLayoutRequest) returns (UpdateViewLayoutResponse) {
    option (google.api.http) = {
      put: "/v1/views/layout/{viewId}"
      body: "*"
    };
  }

  // Updates the view's widget
  rpc UpdateViewWidget(UpdateViewWidgetRequest) returns (UpdateViewWidgetResponse) {
    option (google.api.http) = {
      put: "/v1/views/layout/{viewId}/{widgetId}"
      body: "*"
    };
  }

  // Update view's color theme
  rpc UpdateViewColorTheme(UpdateViewColorThemeRequest) returns (UpdateViewColorThemeResponse) {
    option (google.api.http) = {
      put: "/v1/views/{viewId}/colortheme"
      body: "*"
    };
  }

  // Deletes a view
  rpc DeleteView(DeleteViewRequest) returns (DeleteViewResponse) {
    option (google.api.http) = {
      delete: "/v1/views/{viewId}"
    };
  }

  // Updates the side menu state
  rpc UpdateSideMenuState(UpdateSideMenuStateRequest) returns (UpdateSideMenuStateResponse) {
    option (google.api.http) = {
      put: "/v1/views/{viewId}/sidemenustate"
      body: "*"
    };
  }

  // Add as side menu favorite
  rpc AddSideMenuFavorite(AddSideMenuFavoriteRequest) returns (AddSideMenuFavoriteResponse) {
    option (google.api.http) = {
      post: "/v1/views/{viewId}/sidemenufavorite"
      body: "*"
    };
  }

  // Remove from side menu favorite
  rpc RemoveSideMenuFavorite(RemoveSideMenuFavoriteRequest) returns (RemoveSideMenuFavoriteResponse) {
    option (google.api.http) = {
      post: "/v1/views/{viewId}/sidemenuunfavorite"
      body: "*"
    };
  }

  // Create a cost group
  rpc CreateCostGroup(CreateCostGroupRequest) returns (CreateCostGroupResponse) {
    option (google.api.http) = {
      post: "/v1/costgroups"
      body: "*"
    };
  }

  // Get all the cost groups
  rpc GetCostGroups(GetCostGroupsRequest) returns (GetCostGroupsResponse) {
    option (google.api.http) = {
      get: "/v1/costgroups"
    };
  }

  // Retrieve the categories to be utilized in the creation of the cost group.
  rpc GetCategories(GetCategoriesRequest) returns (GetCategoriesResponse) {
    option (google.api.http) = {
      get: "/v1/categories"
    };
  }

  // Get the details of the cost group
  rpc GetCostGroupDetails(GetCostGroupDetailsRequest) returns (GetCostGroupDetailsResponse) {
    option (google.api.http) = {
      get: "/v1/costgroups/{costGroupId}"
    };
  }

  // Update cost group's name
  rpc UpdateCostGroupName(UpdateCostGroupNameRequest) returns (UpdateCostGroupNameResponse) {
    option (google.api.http) = {
      put: "/v1/costgroups/{costGroupId}/name"
      body: "*"
    };
  }

  // Update cost group's description
  rpc UpdateCostGroupDescription(UpdateCostGroupDescriptionRequest) returns (UpdateCostGroupDescriptionResponse) {
    option (google.api.http) = {
      put: "/v1/costgroups/{costGroupId}/description"
      body: "*"
    };
  }

  // Update cost group's image
  rpc UpdateCostGroupImage(UpdateCostGroupImageRequest) returns (UpdateCostGroupImageResponse) {
    option (google.api.http) = {
      put: "/v1/costgroups/{costGroupId}/image"
      body: "*"
    };
  }

  // Update cost group's icon
  rpc UpdateCostGroupIcon(UpdateCostGroupIconRequest) returns (UpdateCostGroupIconResponse) {
    option (google.api.http) = {
      put: "/v1/costgroups/{costGroupId}/icon"
      body: "*"
    };
  }

  // Update cost group's color theme
  rpc UpdateCostGroupColorTheme(UpdateCostGroupColorThemeRequest) returns (UpdateCostGroupColorThemeResponse) {
    option (google.api.http) = {
      put: "/v1/costgroups/{costGroupId}/colortheme"
      body: "*"
    };
  }

  // Update cost group's combinations
  rpc UpdateCostGroupCombinations(UpdateCostGroupCombinationsRequest) returns (UpdateCostGroupCombinationsResponse) {
    option (google.api.http) = {
      put: "/v1/costgroups/{costGroupId}/combinations"
      body: "*"
    };
  }

  rpc ResolveCostGroupCombinations(ResolveCostGroupCombinationsRequest) returns (ResolveCostGroupCombinationsResponse) {
    option (google.api.http) = {
      get: "/v1/costgroups/resolve/{costGroupId}"
    };
  } 

  // Assign a member to a cost group
  rpc AssignCostGroupMember(AssignCostGroupMemberRequest) returns (AssignCostGroupMemberResponse) {
    option (google.api.http) = {
      post: "/v1/costgroups/{costGroupId}/member/add"
      body: "*"
    };
  }

  // Remove a member from a cost group
  rpc RemoveCostGroupMember(RemoveCostGroupMemberRequest) returns (RemoveCostGroupMemberResponse) {
    option (google.api.http) = {
      post: "/v1/costgroups/{costGroupId}/member/remove"
      body: "*"
    };
  }

  // Deletes a cost group
  rpc DeleteCostGroup(DeleteCostGroupRequest) returns (DeleteCostGroupResponse) {
    option (google.api.http) = {
      delete: "/v1/costgroups/{costGroupId}"
    };
  }

  // Gets a CloudFormation launch URL for enabling the account access.
  rpc GetAccountAccessTemplateUrl(GetAccountAccessTemplateUrlRequest) returns (GetAccountAccessTemplateUrlResponse) {
    option (google.api.http) = {
      get: "/v1/aws/acctaccess"
    };
  }

  // Lists the account access role(s) attached to accounts under caller.
  rpc ListAccountAccess(ListAccountAccessRequest) returns (stream AccountAccess) {
    option (google.api.http) = {
      post: "/v1/aws/acctaccess/all:read"
      body: "*"
    };
  }

  // Gets the current account role attached to the input target.
  rpc GetAccountAccess(GetAccountAccessRequest) returns (AccountAccess) {
    option (google.api.http) = {
      get: "/v1/aws/acctaccess/{target}"
    };
  }

  // Gets the current account. For GCP and Azure.
  rpc GetDataAccess(GetAndDeleteDataAccessRequest) returns (DataAccess) {
    option (google.api.http) = {
      get: "/v1/account/{target}"
    };
  }

  // Deletes GCP or Azure accounts based on the provided request.
  rpc DeleteDataAccess(GetAndDeleteDataAccessRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/account/{target}"
    };
  }

  // Starts validation of the account access stack deployment. If successful, the IAM role created from the CloudFormation stack will be registered to the target.
  rpc CreateAccountAccess(CreateAccountAccessRequest) returns (AccountAccess) {
    option (google.api.http) = {
      post: "/v1/aws/acctaccess"
      body: "*"
    };
  }

  // Starts validation of the account access stackset deployment. If successful, the IAM role created from the CloudFormation stackset will be registered to the linked accounts.
  rpc CreateAccountAccessStackset(CreateAccountAccessStacksetRequest) returns (AccountAccess) {
    option (google.api.http) = {
      post: "/v1/aws/acctaccess/stackset"
      body: "*"
    };
  }

  // Starts validation of the account access cur stack deployment. If successful, the IAM role created from the CloudFormation stack will be registered to the target.
  rpc CreateAccountAccessCur(CreateAccountAccessRequest) returns (AccountAccess) {
    option (google.api.http) = {
      post: "/v1/aws/acctaccess/cur"
      body: "*"
    };
  }

  // Starts an update to an existing account access CloudFormation stack for template changes, if any. Only call this API if the status of your account access is 'outdated'.
  rpc UpdateAccountAccess(UpdateAccountAccessRequest) returns (protos.Operation) {
    option (google.api.http) = {
      put: "/v1/aws/acctaccess/{target}"
    };
  }

  // Deletes the current account access role attached to this target account. This does not delete the CloudFormation deployment in your account.
  rpc DeleteAccountAccess(DeleteAccountAccessRequest) returns (DeleteAccountAccessResponse) {
    option (google.api.http) = {
      delete: "/v1/acctaccess/{target}"
    };
  }

  // Registers an account
  rpc RegisterAccount(RegisterAccountRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/{vendor}/account"
      body: "*"
    };
  }

  // Registers GCP/Azure account.
  rpc RegisterDataAccess(RegisterDataAccessRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/account"
      body: "*"
    };
  }

  // Add Billing Account ID for GCP. 
  rpc AddBillingAccount(BillingAccountRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/billingacct"
      body: "*"
    };
  }

  // Lists Azure and GCP accounts.
  rpc ListDataAccess(ListDataAccessRequest) returns (stream DataAccess) {
    option (google.api.http) = {
      post: "/v1/account/all:read"
    };
  }

  // Update GCP/Azure account info
  rpc UpdateDataAccess(UpdateDataAccessRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/account/{target}"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Lists assets for costgroup 
  rpc ListAssets(ListAssetsRequest) returns (stream Resource) {
    option (google.api.http) = {
      post: "/v1/assets:read"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Assets summary for costgroup 
  rpc GetAssetsSummary(GetAssetsSummaryRequest) returns (GetAssetsSummaryResponse) {
    option (google.api.http) = {
      get: "/v1/assets/summary/{costGroupId}"
    };
  }

  // WORK-IN-PROGRESS: Get usage and usage-based costs for the specified costgroup
  rpc GetCostUsage(GetCostUsageRequest) returns (stream CostItem) {
    option (google.api.http) = {
      post: "/v1/costusage:read"
      body: "*"
    };
  }

  // Gets the right sizing recommendation of all the accounts in the costgroup
  rpc GetRightSizingRecommendation(GetRightSizingRecommendationRequest) returns (GetRightSizingRecommendationResponse) {
    option (google.api.http) = {
      get: "/v1/rightsizingrecommendation/{costGroupId}"
    };
  }

  // Modify resource type from right sizing recommendation
  rpc ModifyResourceType(ModifyResourceTypeRequest) returns (ModifyResourceTypeResponse) {
    option (google.api.http) = {
      post: "/v1/{vendor}/resource/modify"
      body: "*"
    };
  }

  // Terminate a resource from right sizing recommendation
  rpc TerminateResource(TerminateResourceRequest) returns (TerminateResourceResponse) {
    option (google.api.http) = {
      post: "/v1/{vendor}/resource/terminate"
      body: "*"
    };
  }

  // Upload charge code
  rpc UploadChargeCode(stream UploadChargeCodeRequest) returns (UploadChargeCodeResponse) {
    option (google.api.http) = {
      post: "/v1/chargecode/upload"
      body: "*"
    };
  }

  // Assign payer to a linked account
  rpc AssignPayer(AssignPayerRequest) returns (AssignPayerResponse) {
    option (google.api.http) = {
      post: "/v1/{vendor}/payers"
      body: "*"
    };
  }

  // Get list of all payers
  rpc GetPayers(GetPayersRequest) returns (GetPayersResponse) {
    option (google.api.http) = {
      get: "/v1/{vendor}/payers"
    };
  }

  // Get list of registered accounts
  rpc GetAccounts(GetAccountsRequest) returns (GetAccountsResponse) {
    option (google.api.http) = {
      get: "/v1/{vendor}/accounts/{costGroupId}"
    };
  }

  // Get list of supported services
  rpc GetServices(GetServicesRequest) returns (GetServicesResponse) {
    option (google.api.http) = {
      get: "/v1/{vendor}/services/{costGroupId}"
    };
  }

  // Get list of available regions
  rpc GetRegions(GetRegionsRequest) returns (GetRegionsResponse) {
    option (google.api.http) = {
      get: "/v1/{vendor}/regions/{costGroupId}"
    };
  }

  // Get list of available tags
  rpc GetTags(GetTagsRequest) returns (GetTagsResponse) {
    option (google.api.http) = {
      get: "/v1/{vendor}/tags/{costGroupId}"
    };
  }

  // Lists the fees
  rpc ListFees(ListFeesRequest) returns (stream FeeDetails) {
    option (google.api.http) = {
      post: "/v1/allocations/fees/all:read"
      body: "*"
    };
  }

  // Restore distributed fees
  rpc RestoreFee(RestoreFeeRequest) returns (stream FeeDetails) {
    option (google.api.http) = {
      post: "/v1/allocations/fees/restore"
      body: "*"
    };
  }

  // Get all available fees for the specified cost group
  rpc GetCostGroupFee(GetCostGroupFeeRequest) returns (stream FeeItem) {
    option (google.api.http) = {
      post: "/v1/allocations/fees:read"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Lists all the allocators
  rpc ListAllocators(ListAllocatorsRequest) returns (stream CostAllocatorDetails) {
    option (google.api.http) = {
      get: "/v1/allocators"
    };
  }

  // WORK-IN-PROGRESS: Creates cost allocator item
  rpc CreateAllocator(CreateAllocatorRequest) returns (CostAllocatorDetails) {
    option (google.api.http) = {
      post: "/v1/allocators"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Updates a cost allocator item
  rpc UpdateAllocator(CostAllocatorRequest) returns (CostAllocatorDetails) {
    option (google.api.http) = {
      put: "/v1/allocators/{id}"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Deletes a cost allocator
  rpc DeleteAllocator(DeleteAllocatorRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/allocators/{id}"
    };
  }

  // WORK-IN-PROGRESS: Do not use.
  rpc ProxyCreateCompletion(ProxyCreateCompletionRequest) returns (stream ProxyCreateCompletionResponse) {
    option (google.api.http) = {
      post: "/v1/x/pcc"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Simulate fee allocator
  rpc SimulateFeeAllocator(CreateAllocatorRequest) returns (stream FeeDetails) {
    option (google.api.http) = {
      post: "/v1/allocations/fees/simulate"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Lists the allocated account usages
  rpc ListAccountUsage(ListAccountUsageRequest) returns (stream AccountUsageDetails) {
    option (google.api.http) = {
      post: "/v1/allocations/accountusage/all:read"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Restore the allocated account usages
  rpc RestoreAccountUsage(RestoreAccountUsageRequest) returns (stream AccountUsageDetails) {
    option (google.api.http) = {
      post: "/v1/allocations/accountusage/restore"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Simulate the output of the account usage allocation
  rpc SimulateAccountUsage(CreateAllocatorRequest) returns (stream AccountUsageDetails) {
    option (google.api.http) = {
      post: "/v1/allocations/accountusage/simulate"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Lists the allocated ri and sp savings
  rpc ListSavings(ListFeesRequest) returns (stream SavingsDetails) {
    option (google.api.http) = {
      post: "/v1/allocations/savings/all:read"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Restore the allocated ri and sp savings
  rpc RestoreSavings(RestoreSavingsRequest) returns (stream SavingsDetails) {
    option (google.api.http) = {
      post: "/v1/allocations/savings/restore"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Simulate the output of the ri and sp savings allocation
  rpc SimulateSavings(CreateAllocatorRequest) returns (stream SavingsDetails) {
    option (google.api.http) = {
      post: "/v1/allocations/savings/simulate"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Get all available allocation items for the specified cost group
  rpc GetCostGroupAllocation(GetCostGroupAllocationRequest) returns (stream AllocationItem) {
    option (google.api.http) = {
      post: "/v1/allocations:read"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Add or read user from Auth0
  rpc ProcessAuth0User(ProcessAuth0UserRequest) returns (ProcessAuth0UserResponse) {
    option (google.api.http) = {
      post: "/v1/members/auth0"
      body: "*"
    };
  }
   // WORK-IN-PROGRESS: PartnerCenterCredentials for Azure
  rpc AddPartnerCenterCredentials(AddPartnerCenterCredentialsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/azure/credentials/partnercenter"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Adding MpnSetting for Azure
  rpc AddMpnSetting(AddMpnSettingRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/azure/credentials/mpn"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Get Cost Group by Attribute Type
  rpc GetCostGroupAttribute(GetCostGroupAttributeRequest) returns (GetCostGroupAttributeResponse) {
    option (google.api.http) = {
      post: "/v1/attributes"
      body: "*"
    };
  }

  // Get Alerts under organization
  rpc GetAlerts(GetAlertsRequest) returns (stream GetAlertsResponse) {
    option (google.api.http) = {
      get: "/v1/alerts/cost"
    };
  }

  // Create Alerts under organization
  rpc CreateAlert(CreateAlertRequest) returns (CreateAlertResponse) {
    option (google.api.http) = {
      post: "/v1/alerts/cost"
      body: "*"
    };
  }

  // Get Specific Alert under organization
  rpc GetAlertDetails(GetAlertDetailsRequest) returns (GetAlertDetailsResponse) {
    option (google.api.http) = {
      get: "/v1/alerts/cost/{id}"
    };
  }

  // Delete Specific Alert under organization
  rpc DeleteAlert(DeleteAlertRequest) returns (DeleteAlertResponse) {
    option (google.api.http) = {
      delete: "/v1/alerts/cost/{id}"
    };
  }

  // Update Specific Alert under organization
  rpc UpdateAlertDetails(UpdateAlertDetailsRequest) returns (UpdateAlertDetailsResponse) {
    option (google.api.http) = {
      put: "/v1/alerts/cost/{id}"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Get Channels under organization
  rpc GetChannels(GetChannelsRequest) returns (stream GetChannelsResponse) {
    option (google.api.http) = {
      post: "/v1/channels:read"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Create Channel under organization
  rpc CreateChannel(CreateChannelRequest) returns (CreateChannelResponse) {
    option (google.api.http) = {
      post: "/v1/channels"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Get Specific Channel under organization
  rpc GetChannelDetails(GetChannelDetailsRequest) returns (GetChannelDetailsResponse) {
    option (google.api.http) = {
      get: "/v1/channels/{id}"
    };
  }

  // WORK-IN-PROGRESS: Delete Specific Channel under organization
  rpc DeleteChannel(DeleteChannelRequest) returns (DeleteChannelResponse) {
    option (google.api.http) = {
      delete: "/v1/channels/{id}"
    };
  }

  // WORK-IN-PROGRESS: Update Specific Channel under organization
  rpc UpdateChannelDetails(UpdateChannelDetailsRequest) returns (UpdateChannelDetailsResponse) {
    option (google.api.http) = {
      put: "/v1/channels/{id}"
      body: "*"
    };
  }

  // Get the discount recommendations for every account in a cost group
  rpc GetDiscountRecommendations(GetDiscountRecommendationsRequest) returns (GetDiscountRecommendationsResponse) {
    option (google.api.http) = {
      post: "/v1/discount"
      body: "*"
    };
  }

   // Get the data of a cost group containing anomaly values
  rpc GetAnomalyinCostGroup(GetAnomalyinCostGroupRequest) returns (stream AnomalyData) {
    option (google.api.http) = {
      post: "/v1/anomaly"
      body: "*"
    };
  }

  // Create discount Expiration Alert.
  rpc CreateDiscountExpirationAlert(CreateDiscountExpirationAlertRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/alerts/expire/discount"
      body: "*"
    };
  }

  // Update discount Expiration Alert
  rpc UpdateDiscountExpirationAlert(UpdateDiscountExpirationAlertRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/alerts/expire/discount/{id}"
      body: "*"
    };
  }

  // Get discount Expiration Alert Data
  rpc GetDiscountExpirationAlert(ManipulateDiscountExpirationAlertRequest) returns (DiscountExpiryAlertData) {
    option (google.api.http) = {
      get: "/v1/alerts/expire/discount/{id}"
    };
  }

  // List all discount Expiration Alert Data
  rpc ListDiscountExpirationAlert(ListDiscountExpirationAlertRequest) returns (stream DiscountExpiryAlertData) {
    option (google.api.http) = {
      post: "/v1/alerts/expire/discount/all:read"
    };
  }

  // Delete selected discount Expiration Alert Data
  rpc DeleteDiscountExpirationAlert(ManipulateDiscountExpirationAlertRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/alerts/expire/discount/{id}"
    };
  }

  // Create Anomaly Alert
  rpc CreateAnomalyAlert(CreateAnomalyAlertRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/alerts/anomaly"
      body: "*"
    };
  }

    // Delete Anomaly Alert
  rpc DeleteAnomalyAlert(ManipulateAnomalyAlertRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/alerts/anomaly/{id}"
    };
  }

   // List all the Anomaly Alert Data
  rpc ListAnomalyAlert(ListAnomalyAlertRequest) returns (stream AnomalyAlertData) {
    option (google.api.http) = {
      post: "/v1/alerts/anomaly/all:read"
    };
  }

    // Get Anomaly Alert Data
  rpc GetAnomalyAlert(ManipulateAnomalyAlertRequest) returns (AnomalyAlertData) {
    option (google.api.http) = {
      get: "/v1/alerts/anomaly/{id}"
    };
  }

   // Update Anomaly Alert
  rpc UpdateAnomalyAlert(UpdateAnomalyAlertRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/alerts/anomaly/{id}"
      body: "*"
    };
  }

  //Octo new user registration
  rpc RegisterNewUser(RegisterNewUserRequest) returns (RegisterNewUserResponse) {
    option (google.api.http) = {
      post: "/v1/members/register"
      body: "*"
    };
  }

  //Octo getting user profile
  rpc GetUserProfile(GetUserProfileRequest) returns (GetUserProfileResponse) {
    option (google.api.http) = {
      get: "/v1/members/profile/{email}"
    };
  }

  // WORK-IN-PROGRESS: List all Budgets in an organization or Budgets under specific cost group
  rpc ListBudgets(ListBudgetsRequest) returns (stream ListBudgetsResponse) {
    option (google.api.http) = {
      post: "/v1/budget:read"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Get specific Budget data for a cost group in an organization
  rpc GetBudget(GetBudgetRequest) returns (GetBudgetResponse) {
    option (google.api.http) = {
      get: "/v1/budget/{id}"
    };
  }

  // WORK-IN-PROGRESS: Create Budget for specific cost group in an organization
  rpc CreateBudget(CreateBudgetRequest) returns (CreateBudgetResponse) {
    option (google.api.http) = {
      post: "/v1/budget"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Delete Budget for specific cost group in an organization
  rpc DeleteBudget(DeleteBudgetRequest) returns (DeleteBudgetResponse) {
    option (google.api.http) = {
      delete: "/v1/budget/{id}"
    };
  }

  // WORK-IN-PROGRESS: Update Budget for specific cost group in an organization
  rpc UpdateBudget(UpdateBudgetRequest) returns (UpdateBudgetResponse) {
    option (google.api.http) = {
      put: "/v1/budget/{id}"
      body: "*"
    };
  }

  //WORK-IN-PROGRESS:Resolve user for aws marketplace subscription integration
  rpc ResolveAWSMarketplaceTokenForOnboarding(ResolveAWSMarketplaceTokenForOnboardingRequest) returns (ResolveAWSMarketplaceTokenForOnboardingResponse) {
    option (google.api.http) = {
      post: "/v1/members/aws/subscription",
      body: "*"
    };
  }

  //Get the Customer Subscription status from marketplace
  rpc GetCustomerSubscriptionStatus(GetCustomerSubscriptionStatusRequest) returns (GetCustomerSubscriptionStatusResponse) {
    option (google.api.http) = {
      get: "/v1/billing/status"
    };
  }

  // Profiling for new users.
  rpc CreateProfiling(CreateProfilingRequest) returns (CreateProfilingResponse) {
    option (google.api.http) = {
      post: "/v1/members/profile"
      body: "*"
    };
  }

   // Adding orgId to marketplace customers
   rpc AddInfotoMarketplace(AddInfotoMarketplaceRequest) returns (AddInfotoMarketplaceResponse) {
    option (google.api.http) = {
      post: "/v1/marketplace/info"
      body: "*"
    };
  }

  // Get data for insights reports summary
  rpc GetReportSummary(GetReportSummaryRequest) returns (GetReportSummaryResponse) {
    option (google.api.http) = {
      get: "/v1/reports/insight/summary/{costGroupId}"
    };
  }

   // Lists recommendations based on specified criteria.
   rpc ListRecommendations(ListRecommendationRequest) returns (stream ListRecommendationResponse) {
    option (google.api.http) = {
      get: "/v1/recommendations/optimization"
    };
  }

  // Retrieves a specific recommendation by its ID.
  rpc GetRecommendation(GetRecommendationRequest) returns (GetRecommendationResponse) {
    option (google.api.http) = {
      get: "/v1/recommendations/optimization/{id}"
    };
  }

  // Executes optimization based on a recommendation.
  rpc ExecuteOptimization(ExecuteOptimizationRequest) returns (ExecuteOptimizationResponse) {
    option (google.api.http) = {
      post: "/v1/recommendations/optimization/{recommendationId}"
      body: "*"
    };
  }

  //Mark a recommendation executed.
  rpc MarkAsExecuted(MarkAsExecutedRequest) returns (MarkAsExecutedResponse){
    option (google.api.http) = {
      post: "/v1/recommendations/optimization/executed"
      body: "*"
    };
  }

   //Undo a executed recommendation (For recommendation).
   rpc UndoExecutedRecommendation(UndoExecutedRecommendationRequest) returns (UndoExecutedRecommendationResponse){
    option (google.api.http) = {
      post: "/v1/recommendations/optimization/undo"
      body: "*"
    };
  }

    // Lists recommendations based on specified criteria.
    rpc OptimizationHistory(OptimizationHistoryRequest) returns (OptimizationHistoryResponse) {
      option (google.api.http) = {
        get: "/v1/recommendations/optimization/history"
      };
    }

    // Sets Cost group's event indicator
    rpc SetCostGroupEventIndicator(SetCostGroupEventIndicatorRequest) returns (SetCostGroupEventIndicatorResponse) {
      option (google.api.http) = {
        post: "/v1/costgroups/{costGroupId}/eventIndicator"
        body: "*"
      };
    }

     // Sets Cost group's anomaly options
     rpc SetCostGroupAnomalyOptions(SetCostGroupAnomalyOptionsRequest) returns (SetCostGroupAnomalyOptionsResponse) {
      option (google.api.http) = {
        post: "/v1/costgroups/{costGroupId}/anomaly"
        body: "*"
      };
    }

     // Sets Org's starting month/ fiscal month
     rpc SetOrgFiscalMonth(SetOrgFiscalMonthRequest) returns (SetOrgFiscalMonthResponse) {
      option (google.api.http) = {
        post: "/v1/reports/fiscalmonth"
        body: "*"
      };
    }

     // Get Org's starting month/ fiscal month
     rpc GetOrgFiscalMonth(GetOrgFiscalMonthRequest) returns (GetOrgFiscalMonthResponse) {
      option (google.api.http) = {
        get: "/v1/reports/fiscalmonth"
      };
    }

  // WORK-IN-PROGRESS: Transfer the account from the original organization to Alphaus payer account
  rpc TransferOrganization(TransferOrganizationRequest) returns (TransferOrganizationResponse) {
    option (google.api.http) = {
      get: "/v1/organizations/transfer/{target}"
    };
  }

  // WORK-IN-PROGRESS: Set user preference in cost group creation UI
  rpc UpdateCostGroupCreationUI(UpdateCostGroupCreationUIRequest) returns (UpdateCostGroupCreationUIResponse) {
    option (google.api.http) = {
      put: "/v1/me/costgroupcreation"
      body: "*"
    };
  }
}

// Request message for OnboardOrg
message OnboardOrgRequest {
  string email = 1;
  string password = 2;
  string name = 3;
  string orgId = 4;
}

// Response message for OnboardOrg
message OnboardOrgResponse {
  api.cover.UserData userData = 1;
}

// Request message for InviteMember
message InviteMemberRequest {
  repeated string email = 1;
  bool isResend = 2;
  bool inviteAsAdmin = 3;
}

// Response message for InviteMember
message InviteMemberResponse {
  repeated string email = 1;
}

// Request message for ActivateUser
message ActivateUserRequest {
  string userId = 1;
  string previousPassword = 2;
  string password = 3;
  string name = 4;
  string locale = 5;
  // Email. For auth0 email validation.
  string email = 6;
  bool isAuth0 = 7;
  // Auth0 user Id. For updating of user metadata.
  string auth0UserId = 8;
}

// Response message for ActivateUser
message ActivateUserResponse {
  api.cover.UserData userData = 1;
}

// Request message for CreateMember
message CreateMemberRequest {
  string email = 1;
  string password = 2;
  string name = 3;
  repeated string costgroups = 4;
}

// Response message for CreateMember
message CreateMemberResponse {
  api.cover.UserData userData = 1;
}

// Request message for GetMembers
message GetMembersRequest {}

// Response message for GetMembers
message GetMembersResponse {
  repeated api.cover.UserData userData = 1;
}

// Request message for GetMemberDetails
message GetMemberDetailsRequest {
  // Required. UserId.
  string userId = 1;
}

// Response message for GetMemberDetails
message GetMemberDetailsResponse {
  api.cover.UserData userData = 1;
}

// Request message for GetMemberCostGroup
message GetMemberCostGroupRequest {
  // Required. UserId.
  string userId = 1;
}

// Response message for GetMemberCostGroup
message GetMemberCostGroupResponse {
  repeated api.cover.MemberCostGroup costGroups = 1;
}

// Request message for UpdateMemberPermission
message UpdateMemberPermissionRequest {
  // Required. UserId.
  string userId = 1;
  // Required. IsAdmin.
  bool isAdmin = 2;
}

// Response message for UpdateMemberPermission
message UpdateMemberPermissionResponse {
  api.cover.UserData userData = 1;
}

// Request message for GetUserDetails
message GetUserDetailsRequest {}

// Response message for GetUserDetails
message GetUserDetailsResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserAvatar
message UpdateUserAvatarRequest {
  string avatar = 1;
}

// Response message for UpdateUserAvatar
message UpdateUserAvatarResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserIcon
message UpdateUserIconRequest {
  string icon = 1;
}

// Response message for UpdateUserIcon
message UpdateUserIconResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserColorTheme
message UpdateUserColorThemeRequest {
  string colorTheme = 1;
}

// Response message for UpdateUserColorTheme
message UpdateUserColorThemeResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserName
message UpdateUserNameRequest {
  string name = 1;
}

// Response message for UpdateUserName
message UpdateUserNameResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserEmail
message UpdateUserEmailRequest {
  string email = 1;
}

// Response message for UpdateUserEmail
message UpdateUserEmailResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserMainView
message UpdateUserMainViewRequest {
  string viewId = 1;
}

// Response message for UpdateUserMainView
message UpdateUserMainViewResponse {
  api.cover.UserData userData = 1;
}

// Request message for ResetUserPassword
message ResetUserPasswordRequest {
  string previousPassword = 1;
  string newPassword = 2;
}

// Response message for ResetUserPassword
message ResetUserPasswordResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserLocale
message UpdateUserLocaleRequest {
  string locale = 1;
}

// Response message for UpdateUserLocale
message UpdateUserLocaleResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserAppTheme
message UpdateUserAppThemeRequest {
  string appTheme = 1;
}

// Response message for UpdateUserAppTheme
message UpdateUserAppThemeResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserTimezone
message UpdateUserTimezoneRequest {
  string timezone = 1;
}

// Response message for UpdateUserTimezone
message UpdateUserTimezoneResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserAttributes
message UpdateUserAttributesRequest {
  repeated string attributes = 1;
}

// Response message for UpdateUserAttributes
message UpdateUserAttributesResponse {
  api.cover.UserData userData = 1;
}

// Request message for DeleteMember
message DeleteMemberRequest {
  // Required. UserId.
  string userId = 1;
}

// Response message for DeleteMember
message DeleteMemberResponse {
  string userId = 1;
}

// Request message for ResetPassword
message ResetPasswordRequest {
  // Required. UserId.
  string userId = 1;
}

// Response message for ResetPassword
message ResetPasswordResponse {
  string userId = 1;
}

// Request message for CreateView
message CreateViewRequest {
  string name = 1;
  string description = 2;
  bool isPrivate = 3;
  bool isEditable = 4;
  string icon = 5;
  string reportType = 6;
  string colorTheme = 7;
}

// Response message for CreateView
message CreateViewResponse {
  api.cover.ViewData viewData = 1;
}

// Request message for GetViews
message GetViewsRequest {}

// Response message for GetViews
message GetViewsResponse {
  repeated api.cover.ViewList viewList = 1;
}

// Request message for GetCurrentView
message GetCurrentViewRequest {
  // Required. View Id.
  string viewId = 1;
}

// Response message for GetCurrentView
message GetCurrentViewResponse {
  api.cover.ViewData viewData = 1;
}

// Request message for GetFavoriteViews
message GetFavoriteViewsRequest {}

// Response message for GetFavoriteViews
message GetFavoriteViewsResponse {
  repeated api.cover.Favorites favorites = 1;
}

// Request message for PublishView
message PublishViewRequest {
  // Required. View Id.
  string viewId = 1;
}

// Response message for PublishView
message PublishViewResponse {
  string url = 1;
}

// Request message for AddFavorite
message AddFavoriteRequest {
  // Required. View Id.
  string viewId = 1;
}

// Response message for AddFavorite
message AddFavoriteResponse {
  string viewId = 1;
}

// Request message for RemoveFavorite
message RemoveFavoriteRequest {
  // Required. View Id.
  string viewId = 1;
}

// Response message for RemoveFavorite
message RemoveFavoriteResponse {
  string viewId = 1;
}

// Request message for UpdateView
message UpdateViewRequest {
  // Required. View Id.
  string viewId = 1;
  string name = 2;
  string description = 3;
  string icon = 4;
  bool isPrivate = 5;
  bool isEditable = 6;
  string colorTheme = 7;
}

// Response message for UpdateView
message UpdateViewResponse {
  string viewId = 1;
}

// Request message for UpdateViewLayout
message UpdateViewLayoutRequest {
  // Required. View Id.
  string viewId = 1;
  repeated api.cover.WidgetData layout = 2;
}

// Response message for UpdateViewLayout
message UpdateViewLayoutResponse {
  repeated api.cover.ViewLayout layout = 1;
}

// Request message for UpdateViewWidget
message UpdateViewWidgetRequest {
  // Required. View Id.
  string viewId = 1;
  // Required. Widget Id.
  string widgetId = 2;
  google.protobuf.Struct options = 3;
  repeated api.cover.LayoutRequests requests = 4;
}

// Response message for UpdateViewWidget
message UpdateViewWidgetResponse {
  string widgetId = 1;
  api.cover.WidgetData widgetData = 2;
}

// Request message for UpdateViewColorTheme
message UpdateViewColorThemeRequest {
  string viewId = 1;
  string colorTheme = 2;
}

// Response message for UpdateViewColorTheme
message UpdateViewColorThemeResponse {
  api.cover.ViewData viewData = 1;
}

// Request message for DeleteView
message DeleteViewRequest {
  // Required. View Id.
  string viewId = 1;
}

// Response message for DeleteView
message DeleteViewResponse {
  string viewId = 1;
}

// Request message for UpdateSideMenuState
message UpdateSideMenuStateRequest {
  // Required. View Id.
  string viewId = 1;
  repeated api.cover.SideMenuState sidemenustate = 2;
}

// Response message for UpdateSideMenuState
message UpdateSideMenuStateResponse {
  string viewId = 1;
}

// Request message for AddSideMenuFavorite
message AddSideMenuFavoriteRequest {
  // Required. View Id.
  string viewId = 1;
  string menuItemId = 2;
}

// Response message for AddSideMenuFavorite
message AddSideMenuFavoriteResponse {
  string viewId = 1;
}

// Request message for RemoveSideMenuFavorite
message RemoveSideMenuFavoriteRequest {
  // Required. View Id.
  string viewId = 1;
  string menuItemId = 2;
}

// Response message for RemoveSideMenuFavorite
message RemoveSideMenuFavoriteResponse {
  string viewId = 1;
}

// Request message for CreateCostGroup
message CreateCostGroupRequest {
  string name = 1;
  string description = 2;
  string image = 3;
  string icon = 4;
  string colorTheme = 5;
  api.cover.Combinations combinations = 6;
}

// Response message for CreateCostGroup
message CreateCostGroupResponse {
  api.cover.CostGroupData costGroupData = 1;
}

// Request message for GetCostGroups
message GetCostGroupsRequest {}

// Response message for GetCostGroups
message GetCostGroupsResponse {
    repeated api.cover.CostGroupData costGroupData = 1;
}

// Request message for GetCostGroupDetails
message GetCostGroupDetailsRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
}

// Response message for GetCostGroupDetails
message GetCostGroupDetailsResponse {
  api.cover.CostGroupData costGroupData = 1;
}

// Request message for UpdateCostGroupName
message UpdateCostGroupNameRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. Name.
  string name = 2;
}

// Response message for UpdateCostGroupName
message UpdateCostGroupNameResponse {
  string name = 1;
}

// Request message for UpdateCostGroupDescription
message UpdateCostGroupDescriptionRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. Description.
  string description = 2;
}

// Response message for UpdateCostGroupDescription
message UpdateCostGroupDescriptionResponse {
    string description = 1;
}

// Request message for UpdateCostGroupImage
message UpdateCostGroupImageRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. Image.
  string image = 2;
}

// Response message for UpdateCostGroupImage
message UpdateCostGroupImageResponse {
  string image = 1;
}

// Request message for UpdateCostGroupIcon
message UpdateCostGroupIconRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. Icon.
  string icon = 2;
}

// Response message for UpdateCostGroupIcon
message UpdateCostGroupIconResponse {
    string icon = 1;
}

// Request message for UpdateCostGroupColorTheme
message UpdateCostGroupColorThemeRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. Color Theme.
  string colorTheme = 2;
}

// Response message for UpdateCostGroupColorTheme
message UpdateCostGroupColorThemeResponse {
    string colorTheme = 1;
}

// Request message for UpdateCostGroupCombinations
message UpdateCostGroupCombinationsRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  api.cover.Combinations combinations = 2;
}

// Response message for UpdateCostGroupCombinations
message UpdateCostGroupCombinationsResponse {
  api.cover.Combinations combinations = 1;
}

// Request message for AssignCostGroupMember
message AssignCostGroupMemberRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. User Id.
  string userId = 2;
}

// Response message for AssignCostGroupMember
message AssignCostGroupMemberResponse {
  string costGroupId = 1;
  string userId = 2;
}

// Request message for RemoveCostGroupMember
message RemoveCostGroupMemberRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. User Id.
  string userId = 2;
}

// Response message for RemoveCostGroupMember
message RemoveCostGroupMemberResponse {
  string costGroupId = 1;
  string userId = 2;
}

// Request message for DeleteCostGroup
message DeleteCostGroupRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
}

// Response message for DeleteCostGroup
message DeleteCostGroupResponse {
  string costGroupId = 1;
}

// Request message for the GetAccountAccessTemplateUrlRequest rpc.
message GetAccountAccessTemplateUrlRequest {
  // All templates are publicly available from the reponse link (`templateUrl`) if you want to audit the included permissions.
  string type = 1;
}

// Response message for the GetAccountAccessTemplateUrlResponse rpc.
message GetAccountAccessTemplateUrlResponse {
  // The CloudFormation launch url. Open it in your browser.
  string launchUrl = 1;

  // The latest CloudFormation template. The version is included in the filename.
  string templateUrl = 2;

  // The default stack name used. Can be modified.
  string stackName = 3;

  // The AWS account that will receive the access. Do not change.
  string principal = 4;

  // The external id for this role. Do not change.
  string externalId = 5;
}

// Request message for the ListAccountAccess rpc.
message ListAccountAccessRequest {}

// Request message for the GetAccountAccess rpc.
message GetAccountAccessRequest {
  // Required. The target AWS account to query.
  string target = 1;
}

// Response message for GetAccountAccess, CreateAccountAccess rpc.
message AccountAccess {
  // The queried target account.
  string target = 1;

  // The account name
  string accountName = 2;

  // The account type. Payer or linked account.
  string accountType = 3;

  // The payer account of the account.
  string payerId = 4;

  // The role ARN that provides the cross-account access permissions.
  string roleArn = 5;

  // The external id for this role.
  string externalId = 6;

  // The id of the CloudFormation stack deployed in the target account.
  string stackId = 7;

  // The region where the stack is deployed.
  string stackRegion = 8;

  // The latest template used to deploy the stack.
  string templateUrl = 9;

  // The s3 bucket name
  string bucketName = 10;

  // Report path prefix
  string prefix = 11;

  // The report name
  string reportName = 12;

  // The status of registration for CUR export, API access and Cloudwatch streaming
  api.cover.RegistrationStatus registrationStatus = 13;

  // This can be `latest`, `outdated`, or some error information.
  string status = 14;

  // The last updated timestamp, RFC3339 UTC.
  string lastUpdated = 15;
}

// Request message for the CreateAccountAccess rpc.
message CreateAccountAccessRequest {
  // Required. The target AWS account to validate.
  string target = 1;
  // Optional. Set to true if deployment is done through terraform
  bool fromTerraform = 2;
}

// Request message for the CreateAccountAccessStackset rpc.
message CreateAccountAccessStacksetRequest {
  // Required. The AWS payer account to validate.
  string target = 1;
  // Required. The region of the stack deployment.
  string region = 2;
}

// Request message for the UpdateAccountAccess rpc.
message UpdateAccountAccessRequest {
  // Required. The target AWS account to update.
  string target = 1;
}

// Request message for the DeleteAccountAccess rpc.
message DeleteAccountAccessRequest {
  // Required. The target AWS account to delete.
  string target = 1;
  string vendor = 2;
}

// Response message for the DeleteAccountAccess rpc.
message DeleteAccountAccessResponse {
  string targetId = 1;
}

// Request message for the RegisterAccount rpc.
message RegisterAccountRequest {
  // Required. Cloud vendor.
  string vendor = 1;

  // Required. The AWS account Id.
  string accountId = 2;

  // The account name
  string accountName = 3;
}

// Request message for the Asset.ListResources rpc.
message ListAssetsRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;

  // Optional. If not set, current month will be used. Format: `yyyymm`.
  string startMonth = 2;

  // Optional. If not set, current month will be used. Format: `yyyymm`.
  string endMonth = 3;

  // Optional. If true, returns only all assets with recommendation
  bool withRecommendation = 4;

  // Optional. For AWS-specific filter options.
  repeated ListAssetsFilters awsOptions = 5;

  // Optional. For AWS-specific properties filter options.
  repeated ListAssetsFilters awsPropertiesOptions = 6;
}

message ListAssetsFilters {
  map<string, string> andFilters = 1;
}

message Resource {
	// Format is `yyyy-mm`
	string date = 1;

	// Organization ID
	string orgId = 2;

	// Only `aws` is supported for now.
	string vendor = 3;

	// Resource owner account
	string account = 4;

	// Only `AmazonEC2` is supported for now.
	string service = 5;

	// Resource unique identifier
	string resourceId = 6;

	// Only `AWS::EC2::Instance` is supported for now
	string resourceType = 7;

	// Cost incurred for the resource on specified month.
	double cost = 8;

	// Format: JSON String
	string properties = 9;
	
	// Format: JSON String
	string recommendation = 10;
}

message GetAssetsSummaryRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;

  // Optional. If not set, current month will be used. Format: `yyyymm`.
  string startMonth = 2;

  // Optional. If not set, current month will be used. Format: `yyyymm`.
  string endMonth = 3;

  // Optional. If true, return the assets summary for the requested period. Else, summary per month is returned.
  bool combineDates = 4;

  // Optional. For AWS-specific filter options.
  repeated ListAssetsFilters awsOptions = 5;

  // Optional. For AWS-specific properties filter options.
  repeated ListAssetsFilters awsPropertiesOptions = 6;
}

message GetAssetsSummaryResponse {
  repeated AssetsSummary summary = 1;
  // Format: JSON String
  string recommendationSummary = 2;
}

message AssetsSummary {
  // Format is `yyyy-mm`
	string date = 1;

  // Only `aws` is supported for now.
	string vendor = 2;

  // Total number of resources
  int64 totalResources = 3;

  // Total Cost incurred for the resources on specified month.
  double totalCost = 4;
}

message ResolveCostGroupCombinationsRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
}

message ResolveCostGroupCombinationsResponse {
  string costGroupId = 1;
  repeated api.cover.Account accounts = 2;
}

message GetCostUsageRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;

  // Optional. If not set, the first day of the current month will be used. Format: `yyyymmdd`.
  string startTime = 2;

  // Optional. If not set, current date will be used. Format: `yyyymmdd`.
  string endTime = 3;

  // Optional. If set to true, return data grouped by month within the date range. 
  // If you want data that is grouped per account per month, set this to `true`, then set `groupByColumns` to `none`. 
  // You can also use `groupByColumns` while setting this to true.
  bool groupByMonth = 4;

  // Optional. If set, returns only the services or accounts with the highest cost or usage
  // Default value is 0.
  int64 limit = 5;

  // Optional. Valid values are `cost` and `usage`. 
  // Default value is `cost`. Used only when limit is not 0.
  string category = 6;

  // Optional. Valid values are `service` and `account`. Only `service` is supported for now 
  // Default value is `service`. Used only when limit is not 0.
  string groupBy = 7;

  // Optional. If set to true, return all available data including the data with zero cost.
  // Default value is `false` which means that only data with non-zero cost are returned.
  bool includeZeroCost = 8;

  // Optional. Valid only for the `aws` vendor. AWS-specific options.
  GetCostUsageRequestAwsOptions awsOptions = 9;

  // Optional. Valid only for the `azure` vendor. Azure-specific options.
  GetCostUsageRequestAzureOptions azureOptions = 10;

  // Optional. Valid only for the `gcp` vendor. gcp-specific options.
  GetCostUsageRequestGcpOptions gcpOptions = 11;

   // Optional. Valid only for the `azurecsp` vendor. AzureCsp-specific options.
  GetCostUsageRequestAzureCspOptions azurecspOptions = 12;

   // Optional. For custom selection when creating cost groups.
   // This field allows custom options for specifying criteria for cost group creation.
  GetCostUsageRequestCustomOptions customOptions = 13;

  // Optional. If set to true, include cost forecast 
  bool includeForecast = 14;
}

message GetCostUsageRequestAwsOptions {
  // Optional. A comma-separated list of columns to aggregate the data into. 
  // Valid values are `productCode`, `serviceCode`, `region`, `zone`, `usageType`, `instanceType`, `operation`, `invoiceId`, `description`, and `resourceId`. 
  // A special value of `none` is also supported, which means query by date or month per account only.
  //
  // For example, if you only want the services and region data, you can set this field to `productCode,region`. 
  // Your input sequence doesn't matter (although the sequence above is recommended) as the actual sequence is already fixed in the return data (see the definition in https://github.com/alphauslabs/blueapi/blob/main/api/aws/cost.proto), which is generic to specific, top to bottom. Invalid values are discarded. Excluded columns will be empty.
  string groupByColumns = 1;

  // Optional. If set to true, group all input accounts into one.
  bool groupAccounts = 2;

  // Optional. A list of filtering options. See [ReadCostsRequestOptionsFilters] for more information on each filter item. 
  // Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  repeated ReadCostsRequestOptionsFilters filters = 3;

  // Optional. A list of filtering options specific for tags. 
  // Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc. Discarded when `groupByColumns` field is set or if `groupByMonth` is true.
  repeated ReadCostsRequestOptionsFilters tagFilters = 4;

  // Optional. Tag key, only used when groupBy is set to `tag`.
  string tagKey = 5;
}

message GetCostUsageRequestAzureOptions {
  // Optional. A comma-separated list of columns to aggregate the data into. 
  // Valid values are `accountId`, `serviceName`, `serviceTier`, `location`, `product`, `partNumber`, `resourceGuid`, `offerId`, `consumedService`, `departmentId`, `departmentName`, `resourceGroup`, `enrollment`, `additionalInfo`
  // A special value of `none` is also supported, which means query by date or month per account only.
  //
  // For example, if you only want the services and location data, you can set this field to `serviceName,location`. 
  string groupByColumns = 1;

  // Optional. If set to true, group all input subscription into one.
  bool groupAccounts = 2;

  // Optional. A list of filtering options. See [ReadCostsRequestOptionsFilters] for more information on each filter item. 
  // Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  repeated ReadCostsRequestOptionsFilters filters = 3;

  // Optional. A list of filtering options specific for tags. 
  // Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc. 
  repeated ReadCostsRequestOptionsFilters tagFilters = 4;
}

message GetCostUsageRequestGcpOptions {
  // Optional. A comma-separated list of columns to aggregate the data into. 
  // A special value of `none` is also supported, which means query by date or month per account only.
  //
  // For example, if you only want the services and location data, you can set this field to `serviceName,location`. 
  string groupByColumns = 1;

  // Optional. If set to true, group all input projects into one.
  bool groupAccounts = 2;

  // Optional. A list of filtering options. See [ReadCostsRequestOptionsFilters] for more information on each filter item. 
  // Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  repeated ReadCostsRequestOptionsFilters filters = 3;

  // Optional. A list of filtering options specific for tags. 
  // Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc. 
  repeated ReadCostsRequestOptionsFilters tagFilters = 4;

  repeated ReadCostsRequestOptionsFilters labelFilters = 5;

  repeated ReadCostsRequestOptionsFilters projectLabelFilters = 6;

  // Optional. Tag key, only used when groupBy is set to `tag`.
  string tagKey = 7;
}

message GetCostUsageRequestAzureCspOptions {
  // Optional. A comma-separated list of columns to aggregate the data into. 
  // A special value of `none` is also supported, which means query by date or month per account only.
  //
  // For example, if you only want the services and location data, you can set this field to `serviceName,location`. 
  string groupByColumns = 1;

  // Optional. If set to true, group all input projects into one.
  bool groupAccounts = 2;

  // Optional. A list of filtering options. See [ReadCostsRequestOptionsFilters] for more information on each filter item. 
  // Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  repeated ReadCostsRequestOptionsFilters filters = 3;

  // Optional. A list of filtering options specific for tags. 
  // Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc. 
  repeated ReadCostsRequestOptionsFilters tagFilters = 4;

  // Optional. Tag key, only used when groupBy is set to `tag`.
  string tagKey = 5;
}

message GetCostUsageRequestCustomOptions {
  // Optional. A comma-separated list of columns to aggregate the data into. 
  // A special value of `none` is also supported, which means query by date or month per account only.
  //
  // For example, if you only want the services and location data, you can set this field to `serviceName,location`. 
  string groupByColumns = 1;

  // Optional. If set to true, group all input projects into one.
  bool groupAccounts = 2;

  // Optional. A list of filtering options. See [ReadCostsRequestOptionsFilters] for more information on each filter item. 
  // Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
  repeated ReadCostsRequestOptionsFilters filters = 3;
}


// A map of "key:value" column filters. Dependent on `groupByColumns` and/or `groupByMonth`. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
//
// For example, if you like to filter `productCode` to return only `AmazonEC2`, set to `{"productCode":"eq:AmazonEC2"}` or `{"productCode":"AmazonEC2"}`. You can also use a regular expression like `{"productCode":"re:AmazonEC2|AmazonRDS"}`, which means return all AmazonEC2 or AmazonRDS lineitems. Or reverse regexp, such as `{"productCode":"!re:^AmazonEC2$"}`, which means return all items except `AmazonEC2`.
message ReadCostsRequestOptionsFilters {
  map<string, string> andFilters = 1;
}

// Response message wrapper for cloud costs.
message CostItem {
  //`aws`, `azure`, `azureea` or `gcp`
  string vendor = 1;
  string date = 2;
  string product = 3;
  // AWS account, GCP projectId, AzureCSP accountId
  string account = 4;
  double cost = 5;
  // Could be AWS, Azure or GCP Cost
  string details = 6;
  // Cost Forecast
  api.cover.AwsCostForecast forecast = 7; 
  string region = 8;
  // AWS payer acount, GCP billing account, Azure Payer account
  string billingAccount = 9;
  // Tag Value. Contains tag value of the input tag key. Only used if groupBy is set to tag
  string tagValue = 10;
}

// Request message for GetRightSizingRecommendation
message GetRightSizingRecommendationRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
}

// Response message for GetRightSizingRecommendation
message GetRightSizingRecommendationResponse {
  repeated api.cover.ResourceData resource = 1;
}

// Request message for ModifyResourceType
message ModifyResourceTypeRequest {
  // Required. Cloud vendor.
  string vendor = 1;

  // Required. Account Id.
  string accountId = 2;

  // Required. The resource Id.
  string resourceId = 3;

  // Required. The recommended resource type.
  string resourceType = 4;

  // Required. Resource region.
  string region = 5;
}

// Response message for ModifyResourceType
message ModifyResourceTypeResponse {
  string accountId = 1;
  string resourceId = 2;
  string resourceType = 3;
  string region = 4;
}

// Request message for TerminateResource
message TerminateResourceRequest {
  // Required. Cloud vendor.
  string vendor = 1;

  // Required. Account Id.
  string accountId = 2;

  // Required. The resource Id.
  string resourceId = 3;

  // Required. Resource region.
  string region = 4;
}

// Response message for TerminateResource
message TerminateResourceResponse {
  string accountId = 1;
  string resourceId = 2;
  string region = 3;
}

// Status of upload file
enum Status {
  PENDING = 0;
  IN_PROGRESS = 1;
  SUCCESS = 2;
  FAILED = 3;
}

// (WIP): Request message for Upload Charge Code
message UploadChargeCodeRequest {
  // Required. File name
  string name = 1; // file name
  // Required. File type
  string type = 2; // file type
  // Required. Convert file into bytes to transfer file
  bytes file = 3; // file in bytes
}

// (WIP): Response message for Upload Charge Code
message UploadChargeCodeResponse {
  // File name
  string name = 1;
  // Status
  Status status = 2;
}

// Request message for AssignPayer
message AssignPayerRequest {
  // Required. Cloud vendor.
  string vendor = 1;

  // Required. Account Id.
  string accountId = 2;

  // Required. The Payer Id.
  string payerId = 3;
}

// Response message for AssignPayer
message AssignPayerResponse {
  string accountId = 1;
  string payerId = 2;
}

// Request message for GetPayers
message GetPayersRequest {
  // Required. Cloud vendor.
  string vendor = 1;
}

// Response message for GetPayers
message GetPayersResponse {
  repeated string payers = 1;
}

// Request message for GetAccounts
message GetAccountsRequest {
  // Required. Cloud vendor.
  string vendor = 1;
  string costGroupId = 2;
}

// Response message for GetAccounts
message GetAccountsResponse {
  repeated string accounts = 1;
}

// Request message for GetServices
message GetServicesRequest {
  // Required. Cloud vendor.
  string vendor = 1;
  string costGroupId = 2;
}

// Response message for GetServices
message GetServicesResponse {
  repeated string services = 1;
}

// Request message for GetRegions
message GetRegionsRequest {
  // Required. Cloud vendor.
  string vendor = 1;
  string costGroupId = 2;
}

// Response message for GetRegions
message GetRegionsResponse {
  repeated string regions = 1;
}

// Request message for GetTags
message GetTagsRequest {
  // Required. Cloud vendor.
  string vendor = 1;
  string costGroupId = 2;
}

// Response message for GetTags
message GetTagsResponse {
  repeated api.cover.TagData tagData = 1;
}

// Request message for the ListFees rpc.
message ListFeesRequest {
  string month = 1;
}

// Response message for GetFeeDetails, CreateFeeReallocation rpc.
message FeeDetails {
  string id = 1;
  string orgId = 2;
  string vendor = 3;
  string account = 4;
  string month = 5;
  string lineType = 6;
  string feeType = 7;
  string productCode = 8;
  string description = 9;
  string started = 10;
  string timeInterval = 11;
  string productName = 12;
  string currency = 13;
  string splitStatus = 14;
  bool isAllocated = 15;
  bool isApplied = 16;
  double unblendedCost = 17;
  string sourceFee = 18;
  string lastUpdate = 19;
}

// Request message for the RestoreFee rpc.
message RestoreFeeRequest {
  // Required. The fee to restore.
  string feeId = 1;
}

// Request message for the GetCostGroupFee rpc.
message GetCostGroupFeeRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  string startTime = 2;
  string endTime = 3;
}

// Response message wrapper for cost group fees.
message FeeItem {
  string vendor = 1;
  string month = 2;
  string product = 3;
  string account = 4;
  string type = 5;
  double cost = 6;
}

message Allocator {
  // Required. The type where the adjustments are to be applied. This can support `account`, `costGroup` and `payer`.
  string type = 1;

  // Required. The value for the specified attribute. `accountId` for account, `costGroupId` for cost group, `payerId` for payer and account name regex for account name.
  string value = 2;

  // Required. The formula to use to compute the value of the allocation on an attribute. If left blank, allocation is based on usage.
  string formula = 3;
	
	// Optional. The number of months the adjustment is to be applied. If set, it will divide the cost equally to the number of months.
	int64 months = 4;
}

// A map of "key:value" attribute filters. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
message Criteria {
  map<string, string> and = 1;
}

message CostAllocatorDetails {
  string id = 1;
  string category = 2;
  int64 expiration = 3;
  // Optional. The starting month of the allocator to be effective.
  string startMonth = 4;
  // Optional. The default account for remaining costs. If not set, will allocate the cost to the original account.
  string defaultAccount = 5;
  // Required. Criteria for the adjustment to be applied.
  repeated Criteria criteria = 6;
  repeated Allocator allocator = 7;
  string createTime = 8;
  string updateTime = 9;
}

message CostAllocatorRequest {
  string id = 1;
  string category = 2;
  int64 expiration = 3;
  // Optional. The starting month of the allocator to be effective.
  string startMonth = 4;
  // Optional. The default account for remaining costs. If not set, will allocate the cost to the original account.
  string defaultAccount = 5;
  // Required. Criteria for the adjustment to be applied.
  repeated Criteria criteria = 6;
  repeated Allocator allocator = 7;
}

// Request message for the ListAllocators rpc.
message ListAllocatorsRequest {}

// Request message for the CreateAllocator rpc.
message CreateAllocatorRequest {
  // Optional. The category where the allocator is to be applied. Applicable values are `fee`, `account`, or `savings`. Default value is `fee`.
  string category = 1;
  int64 expiration = 2;
  // Optional. The starting month of the allocator to be effective.
  string startMonth = 3;
  // Optional. The default account for remaining costs. If not set, will allocate the cost to the original account.
  string defaultAccount = 4;
  // Required. Criteria for the adjustment to be applied.
  repeated Criteria criteria = 5;
  repeated Allocator allocator = 6;
}

// Request message for the DeleteAllocator rpc.
message DeleteAllocatorRequest {
  // Required. The id of the allocator to delete.
  string id = 1;
}

// Request message for the ProxyCreateCompletion rpc.
message ProxyCreateCompletionRequest {
  google.protobuf.Struct params = 1;
}

// Response message for the ProxyCreateCompletion rpc.
message ProxyCreateCompletionResponse {
  string line = 1;
}

// Response message for SimulateAccountCostAllocator rpc.
message AccountUsageDetails {
  string id = 1;
  string orgId = 2;
  string vendor = 3;
  string account = 4;
  string date = 5;
  string productCode = 6;
  string serviceCode = 7;
  string region = 8;
  string zone = 9;
  string usageType = 10;
  string instanceType = 11;
  string operation = 12;
  string invoiceId = 13;
  string description = 14;
  string resourceId = 15;
  string tags = 16;
  string costCategories = 17;
  double usageAmount = 18;
  double trueUnblendedCost = 19;
  double unblendedCost = 20;
  double effectiveCost = 21;
  double amortizedCost = 22;
  double publicOnDemandCost = 23;
  double unusedAmortizedCost = 24;
  string lastUpdate = 25;
  string splitStatus = 26;
  bool isAllocated = 27;
  bool isApplied = 28;
  string source = 29;
}

// Request message for the RestoreAccountUsage rpc.
message ListAccountUsageRequest {
  string startDate = 1;
  string endDate = 2;
}

// Request message for the RestoreAccountUsage rpc.
message RestoreAccountUsageRequest {
  // Required. The account usage to restore.
  string allocationId = 1;
}

// Request message for the RestoreSavings rpc.
message RestoreSavingsRequest {
  // Required. The item to restore.
  string id = 1;
}

// Response message for ListSavings, RestoreSavings, SimulateSavings rpc.
message SavingsDetails {
  string id = 1;
  string orgId = 2;
  string vendor = 3;
  string account = 4;
  string month = 5;
  string type = 6;
  string arn = 7;
  string productCode = 8;
  string offerClass = 9;
  double ondemand = 10;
  double effectiveCost = 11;
  double savings = 12;
  string splitStatus = 13;
  bool isAllocated = 14;
  bool isApplied = 15;
  string source = 16;
  string lastUpdate = 17;
}

// Request message for the GetCostGroupAllocation rpc.
message GetCostGroupAllocationRequest {
  // Required. The category to display on the cost group. Supports `fee` or `savings`.
  string category = 1;
  // Required. Cost Group Id.
  string costGroupId = 2;
  string startDate = 3;
  string endDate = 4;
}

// Response message wrapper for cost group allocations.
message AllocationItem {
  string vendor = 1;
  string month = 2;
  string product = 3;
  string account = 4;
  string type = 5;
  double cost = 6;
}

// Request message for AddUserFromAuth0asRoot rpc
message ProcessAuth0UserRequest {
  string source = 1;
  string customerId = 2;
  string email = 3;
  string subuserId = 4;
}

// Response message wrapper for adding user from Auth0 as root
message ProcessAuth0UserResponse {
  bool isAuthorized = 1;
}

// Message Response for GetDataAccess. For Azure and GCP
message DataAccess {
  // Billing Id for GCP, Account Id for Azure
  string target = 1; 

  // Org Id
  string orgId = 2;

  // GCP Options
  api.cover.GcpOptions gcpOptions = 3;

  // Azure Options
  api.cover.AzureOptions azureOptions = 4;

  api.cover.AwsOptions awsOptions = 5;
 
  // Account type, linked or payer
  string accountType = 6; 

  // Last Update
  string lastUpdate = 7; 

  // Time Created
  string createTime = 8;

  string vendor = 9;
}

// Request message for Register Data Access. For azure and gcp.
message RegisterDataAccessRequest {
  // Vendor (Azure/GCP)
  string vendor = 1;

  // Billing Id for GCP, Account Id for Azure
  string target = 2;

  // Account type (payer/linked)
  string accountType = 3;

  // GCP Options. Specific for GCP
  api.cover.GcpOptions gcpOptions = 4;

  // Azure Options. Specific for Azure
  api.cover.AzureOptions azureOptions = 5;

   // Aws Options. Specific for Aws
  api.cover.AwsOptions awsOptions = 6;
}

// Request message for UpdateDataAccess (GCP/Azure)
message UpdateDataAccessRequest {
  // Billing Id for GCP, Account Id for Azure
  string target = 1;

  // GCP or Azure
  string vendor = 2;

  // GCP Options
  api.cover.GcpOptions gcpOptions = 3;

  // Azure Options
  api.cover.AzureOptions azureOptions = 4;

  // AWS Options
  api.cover.AwsOptions awsOptions = 5;
  
  // Account Type
  string accountType = 6;
}

// Request message for ListDataAccess
message ListDataAccessRequest {}

// Request message for AddBillingAccount
message BillingAccountRequest {
  // Required. The billing account id.
  string billingId = 1;

  // Name of dataset you created.
  string datasetId = 2;

  // In creating dataset, It requires you to select a region.
  string datasetRegion = 3;

  // Project Id where the datasetId of BQ can be found.
  string projectId = 4;

  // Optional. Billing Name, this can be set by the users in Octo UI.
  string billingName = 5;
}

message GetAndDeleteDataAccessRequest {
  // Required. (Billing ID for GCP / Account ID for Azure) 
  string target = 1;

  // Vendor (GCP/Azure)
  string vendor = 2;

  // In the context of fetching account details, specifying the account type is necessary. This is because the target alone might not uniquely identify an account and could result in multiple data points.
  string accountType = 3;
}

// Request message for AddPartnerCenterCredentials
message AddPartnerCenterCredentialsRequest {
  // The account Id
  string accountId = 1;

  // Application Id
  string applicationId = 2;

  // Secret Key
  string secretKey = 3;
}

// Request message for AddMpnSetting
message AddMpnSettingRequest {
 // Partner Id / MPN Id
  string mpnId = 1;
}

// Request message for GetCostGroupAttribute
message GetCostGroupAttributeRequest {
  string vendor = 1;

  string attributeType = 2;

  string costGroupId = 3;
}

// Response message for GetCostGroupAttribute
message GetCostGroupAttributeResponse {
  repeated api.cover.Result result = 1;

  repeated api.cover.TagData tagData = 2;
}

message GetCategoriesRequest {
  string vendor = 1;
}

message GetCategoriesResponse {
  repeated api.cover.Category category = 1;
}

// Request message for GetAlerts
message GetAlertsRequest {}

// Response message for GetAlerts
message GetAlertsResponse {
  api.cover.AlertData alertData = 1;
}

// Request message for CreateAlert
message CreateAlertRequest {
  // Required.
  string name = 1;

  // At least one in either fixedAmount or percentage.
  float fixedAmount = 2;
  float percentage = 3;

  // Optional. daily or monthly. Only 'daily' is supported for now.
  string granularity = 4;

  // Required. Cost group IDs.
  repeated string costGroups = 5;

  // Required. Channel IDs.
  repeated string channels = 6;
}

// Response message for CreateAlert
message CreateAlertResponse {
  api.cover.AlertData alertData = 1;
}

// Request message for GetAlertDetails
message GetAlertDetailsRequest {
  // Required. Alert ID.
  string id = 1;
}

// Response message for GetAlertDetails
message GetAlertDetailsResponse {
  api.cover.AlertData alertData = 1;
}

// Request message for DeleteAlert
message DeleteAlertRequest {
  // Required. Alert ID.
  string id = 1;
}

// Response message for DeleteAlert
message DeleteAlertResponse {
  string id = 1;
}

// Request message for UpdateAlertDetails
message UpdateAlertDetailsRequest {
  // Required. Alert ID.
  string id = 1;

  // If optional fields are not supplied, no changes occur.
  // Optional.
  string name = 2;

  // Both are optional.
  float fixedAmount = 3;
  float percentage = 4;

  // Optional. daily or monthly. Only 'daily' is supported for now.
  string granularity = 5;

  // Optional. Cost group IDs.
  repeated string costGroups = 6;

  // Optional. Channel IDs.
  repeated string channels = 7;
}

// Response message for UpdateAlertDetails
message UpdateAlertDetailsResponse {
  api.cover.AlertData alertData = 1;
}

// Request message for GetChannels
message GetChannelsRequest {
  // Optional. Use email, slack, or msteams to filter the type of channels
  // Otherwise, it returns all channels
  string type = 1;
}

// Response message for GetChannels
message GetChannelsResponse {
  api.cover.ChannelData channelData = 1;
}

// Request message for CreateChannel
message CreateChannelRequest {
  // Required. Either actual email address or slack/msteams channel name
  string name = 1;

  // Required. email, slack, or msteams.
  string type = 2;

  // Optional. Only needed for slack and msteams type.
  string webhookUrl = 3;
}

// Response message for CreateChannel
message CreateChannelResponse {
  api.cover.ChannelData channelData = 1;
}

// Request message for GetChannelDetails
message GetChannelDetailsRequest {
  // Required. Channel ID.
  string id = 1;
}

// Response message for GetChannelDetails
message GetChannelDetailsResponse {
  api.cover.ChannelData channelData = 1;
}

// Request message for DeleteChannel
message DeleteChannelRequest {
  // Required. Channel ID.
  string id = 1;
}

// Response message for DeleteChannel
message DeleteChannelResponse {
  string id = 1;
}

// Request message for UpdateChannelDetails
message UpdateChannelDetailsRequest {
  // Required. Channel ID.
  string id = 1;

  // If optional fields are not supplied, no changes occur.
  // Optional. Either actual email address or slack/msteams channel name
  string name = 2;

  // Optional. email, slack, or msteams.
  string type = 3;

  // Optional. Only needed for slack and msteams type.
  string webhookUrl = 4;
}

// Response message for UpdateChannelDetails
message UpdateChannelDetailsResponse {
  api.cover.ChannelData channelData = 1;
}

// Request message for GetDiscountRecomemendations
message GetDiscountRecommendationsRequest {

  // Required.
  string costGroupId = 1;

  // AWS Inputs
  api.cover.AwsInputs awsInputs = 2;

  // NOT SUPPORTED YET
  api.cover.AzureInputs azureInputs = 3;

  // NOT SUPPORTED YET
  api.cover.GcpInputs gcpInputs = 4;
}

// Response message for GetDiscountRecommendations
message GetDiscountRecommendationsResponse {
  api.cover.AwsDiscountRecommendations awsRecommendations = 1;
  api.cover.AzureDiscountRecommendations azureRecommendations = 2;
  api.cover.GcpDiscountRecommendations gcpRecommendations = 3;
}

// Request message for getting anomaly
message GetAnomalyinCostGroupRequest {
  string costGroupId = 1;

  // Start date for detecting anomalies. Valid format: YYYYMMDD
  string startDate = 2;

  // End date for detection anomalies. Valid format: YYYYMMDD
  string endDate = 3;
}

// Message response for anomaly detection 
message AnomalyData {
    string account = 1;

    string costGroupId = 2;

    string vendor = 3;

    string product = 4;

    string date = 5;

    float totalCost = 6;

    // The value will be true if there is an anomaly for a specific account and product
    bool isAnomaly = 7;

     // Lower bound. If the total cost is lesser than the lowerlimit it is considered as anomaly
    float lowerLimit = 8;

    // Upper bound. If the total cost is greater than the upperlimit it is considered as anomaly
    float upperLimit = 9;   

    // The difference of the total cost and the upperlimit or lowerlimit if it is anomamly, if not anomaly then anomaly cost is 0
    float anomalyCost = 10;

    // How many percentage does the data is considered anomaly 
    float anomalyProbability = 11;
}

// Request message for CreateDiscountExpirationAlert
message CreateDiscountExpirationAlertRequest {
  // Required if the alertEnabled is set to true
  // Supported values are the following:
  // [0, 7, 30, 60, 90]
  repeated int64 frequencies = 1;

  // Required. Cost Group Id
  repeated string costGroups = 2;

  // required. Switch in enabling alert.
  bool alertEnabled = 3;

  // required. Array of notificationChannel Ids from DynamoDB. Existing in ripple.
  repeated string channels = 4;

  // required. Name of alert
  string name = 5;
}

message ManipulateDiscountExpirationAlertRequest {
  // required. Id
  string id = 1;
}

message UpdateDiscountExpirationAlertRequest {
  // required. Id
  string id = 1;

  // required. 
  bool alertEnabled = 2;

  // required. Notification Channel Ids.
  repeated string channels = 3;

  // required. Frequencies.
  repeated int64 frequencies = 4;

  // Required. Cost Group Ids
  repeated string costGroups = 5;

  // required. Name
  string name = 6;
}

message DiscountExpiryAlertData {
  string id = 1;

  string orgId = 2;

  bool alertEnabled = 3;

  repeated int64 frequencies = 4;

  repeated api.cover.AlertCostGroup costGroups = 5;

  string details = 6;

  api.cover.AlertChannels channels = 7;

  string name = 8;
}

// Request message for ListDiscountExpirationAlert
message ListDiscountExpirationAlertRequest {}

// Rquest message for CreateAnomalyAlert
message CreateAnomalyAlertRequest {
  // Required. Name of the Anomaly Alert
  string name = 1;

  // Required. Toggle disable and enable status of the alert
  bool alertEnabled = 2;

  // Required. How often the user wants to receive alerts. Daily or Weekly
  string frequency = 3;

  // Requried. The Id of the cost group you want to monitor if there is an anomaly
  string costGroupId = 4;

  // Required. The Channels where you want to send the alerts.
  repeated string notificationChannels = 5;

}
message ManipulateAnomalyAlertRequest {
  // required. Id
  string id = 1;
}

message AnomalyAlertData {

  string id = 1;

  string orgId = 2;
  
  string name = 3;

  bool alertEnabled = 4;
  
  string frequency = 5;

  api.cover.AlertCostGroup costGroupId = 6;

  api.cover.AlertChannels channels = 7;

}

// Request message for ListAnomalyAlert
message ListAnomalyAlertRequest {}

message UpdateAnomalyAlertRequest {
  // required. Id
  string id = 1;

  // required. alert name  
  string name = 2;

  // required. 
  bool alertEnabled = 3;

  // required. Notification Channel Ids.
  repeated string notificationChannels = 4;

  // required. Frequency.
  string frequency = 5;

  // required. cost group id   
  string costGroupId = 6;
}

// Request message for RegisterNewUser
message RegisterNewUserRequest {
  //required email
  string email = 1;

  //required password
  string password = 2;

  //required user Name
  string name = 3;

  //required company name
  string company = 4;

  //required company role
  string role = 5;

  //optional company monthly cloud usage
  string amount = 6;

  //optional intention
  string intention = 7;
}

message RegisterNewUserResponse {
  bool isAuthorized = 1;
}

//Request message for GetUserProfile
message GetUserProfileRequest {
  //required email
  string email = 1;
}

message GetUserProfileResponse {
  bool hasCreatedProfile = 1;
}

message ListBudgetsRequest {
  // Optional. Set to true to include monthly spending and forecast within the budget period
  bool includeSpendAndForecast = 1;

  // Optional. Cost group ID. Return budgets under this specific cost group.
  string costGroup = 2;
}

message ListBudgetsResponse {
  api.cover.BudgetData budgetData = 1;
}

message GetBudgetRequest {
  // Required. Budget ID.
  string id = 1;
}

message GetBudgetResponse {
  api.cover.BudgetData budgetData = 1;
}

message CreateBudgetRequest {
  api.cover.BudgetData budgetData = 1;
}

message CreateBudgetResponse {
  api.cover.BudgetData budgetData = 1;
}

message DeleteBudgetRequest {
  // Required. Budget ID.
  string id = 1;
}

message DeleteBudgetResponse {
  string id = 1;
}

message UpdateBudgetRequest {
  // Required. Budget ID.
  string id = 1;
  api.cover.BudgetData budgetData = 2;
}

message UpdateBudgetResponse {
  api.cover.BudgetData budgetData = 1;
}

message ResolveAWSMarketplaceTokenForOnboardingRequest {
  string registrationToken = 1;
}

message ResolveAWSMarketplaceTokenForOnboardingResponse {
  bool isAllowedToOnboard = 1;

  string customerId = 2;
}

message GetCustomerSubscriptionStatusRequest {}

message GetCustomerSubscriptionStatusResponse {
  string dateRegistered = 1;
  string subscriptionExpiry = 2;
  int32 daysLeft = 3;
  bool isSubscribed = 4;
  bool isExpired = 5;
  string plan = 6;
  string amount = 7;
  string paymentOption = 8;
  string paymentMethod = 9;
  double credit = 10;
}

message CreateProfilingRequest {
  string name = 1;
  string role = 2;
  string usage = 3;
  string intention = 4;
  string companyName = 5;
  string emailAddress = 6;
}

message CreateProfilingResponse {}

message AddInfotoMarketplaceRequest{
  string customerIdentifier = 1;
}

message AddInfotoMarketplaceResponse{}

message GetReportSummaryRequest{
  // Required. Cost Group Id.
  string costGroupId = 1;

  // Required. Start date Format: "YYYYMMDD"
  string startDate = 2;

  // Required. End date Format: "YYYYMMDD"
  string endDate = 3;

  // Required. Report Type. Valid inputs are: "quarterly", "yearly"
  string reportType = 4;
}

message GetReportSummaryResponse{
  string costGroupId = 1;
  string startDate = 2;
  string endDate = 3;
  api.cover.ExecutiveSummary executiveSummary = 4;
  api.cover.OptimizationRecommendationSummary optimizationRecommendationSummary = 5;
  api.cover.SavingsSummary savingsSummary = 6;
}

message ListRecommendationRequest{
  // Required. Cost Group Id.
  string costgroupId = 1;
  
  //Required. Start date of retrieved data. If not set, the default would be today.
  string dateRangeStart = 2;
  
  //Required. End date of retrieved data. If not set, the default would be today.
  string dateRangeEnd = 3; 

  //Valid inputs are: "all", "aws", "gcp", and  "azure". Default is "all".
  string vendor = 4;

  // Valid inputs are: "all", "trustedadvisor", "costexplorer", and  "costoptimizationhub". Default is "all".
  string source = 5;
 
  // Valid inputs are: "in-progress", "error", "open","done" and "all"
  string optimizationStatus = 7;

  // Valid inputs are: "rate", "usage", and "all". If not set, default is "all".
  string type = 8;
}

message ListRecommendationResponse{
  string recommendationId = 1;
  string recommendation = 2;
  string service = 3;
  double estimatedMonthlySaving = 4;
  double estimatedMonthlyCost = 5;
  string scoring = 6;
  string vendor = 7;
  string category = 8;
  string optimizationStatus = 9;
  string errorMessage = 10;
  string accountId = 11;
  string accountName = 12;
  string instanceName = 13;
  string instanceId = 14;
  string instanceType = 15;
  string region = 16;
  double commitment = 17;
  string spType = 18;
  int64 numberToPurchase = 19;
  string riType = 20;
  string type = 21;
  string source = 22;
  string dateRecommended = 23;
  string recommendationGroup = 24;
}

message GetRecommendationRequest{
  string id = 1;
  string costGroupId = 2;

  //Valid inputs are: "30days", "60days". and "90days". Default is "30days".
  string periodOption = 3;
}

message GetRecommendationResponse{
  api.cover.AWSRecommendations recommendationData = 1;
}

message ExecuteOptimizationRequest {
    string recommendationId = 1;
}

message ExecuteOptimizationResponse{
}

message MarkAsExecutedRequest{
  repeated string id = 1;
}

message MarkAsExecutedResponse{
}

message UndoExecutedRecommendationRequest{
  repeated string id = 1;
}

message UndoExecutedRecommendationResponse{
}

message OptimizationHistoryRequest{
    // Required. Cost Group Id.
    string costgroupId = 1;
  
    //Required. Start date of retrieved data. If not set, default is three months past.
    string dateRangeStart = 2;
    
    //Required. End date of retrieved data.
    string dateRangeEnd = 3; 
  
    //Required. Valid inputs are: "all", "aws", "gcp", and  "azure".
    string vendor = 4;
  
    // Valid inputs are: "all", "trusted-advisor", "cost-explorer", and  "cost-optimization-hub". Default is "All".
    string source = 5;
  
    //Valid inputs are: "daily", "monthly". and "yearly". Default is "monthly".
    string periodOption = 6;
}

message OptimizationHistoryResponse{
  repeated api.cover.ExecutedRecommendationDetails executedRecommendationDetails = 2;
}

message SetCostGroupEventIndicatorRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;

  // Required. Only anomaly is supported as of now
  bool anomaly = 2;

  // Optional. Temporary storage of cost group creation UI preference
  bool visualBuilder = 3;
}

message SetCostGroupEventIndicatorResponse {
  string costGroupId = 1;
  api.cover.EventIndicator eventIndicator = 2;
}

message SetCostGroupAnomalyOptionsRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  
  // Required
  float threshold = 2;

  // Required. When set to true, the threshold is a percentage to the actual cost. Otherwise, it is a fixed amount.
  bool isPercentage = 3;

  // Optional. The number of past months to be used in training the model. Note: This will affect the results of anomaly detection. Default and max is 9 while min is 1.
  int64 pastDataInMonths = 4;
}

message SetCostGroupAnomalyOptionsResponse {
  string costGroupId = 1;
  api.cover.AnomalyOptions anomalyOptions = 2;
}

message SetOrgFiscalMonthRequest {
  // Required. Fiscal month. Valid inputs are: "01 - 12"
  string fiscalMonth = 1;
}

message SetOrgFiscalMonthResponse {
  string fiscalMonth = 1;
}

message GetOrgFiscalMonthRequest {}

message GetOrgFiscalMonthResponse {
  string fiscalMonth = 1;
  string dateRegistered = 2;
}

message TransferOrganizationRequest {
  // Required. The target account to be transferred.
  string target = 1;
  // Required. The region of the target account.
  string region = 2;
  // Optional. Alphaus payer account to be used for the transfer.
  string payer = 3;
  // Optional. The org id of the payer account.
  string orgId = 4;
}

message TransferOrganizationResponse {
    string target = 1;
}

message UpdateCostGroupCreationUIRequest {
  bool useNewCostGroupCreationUI = 1;
}

message UpdateCostGroupCreationUIResponse {
  api.cover.UserData userData = 1;
}