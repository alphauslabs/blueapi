syntax = "proto3";

package blueapi.cover.v1;

import "api/cover/user.proto";
import "api/cover/view.proto";
import "api/cover/costgroup.proto";
import "api/operation.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/alphauslabs/blueapi/cover";
option java_package = "cloud.alphaus.api.cover";
option java_outer_classname = "CoverProto";

// Cover service definition.
service Cover {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "(ALPHA) Cover API. Base URL: https://api.alphaus.cloud/m/blue/cover"
    external_docs: {
      url: "https://github.com/alphauslabs/blueapi/tree/main/cover/";
      description: "Service definition";
    }
  };

  // Invite members to the system
  rpc InviteMember(InviteMemberRequest) returns (InviteMemberResponse) {
    option (google.api.http) = {
      post: "/v1/member/invite"
      body: "*"
    };
  }

  // Create a member
  rpc CreateMember(CreateMemberRequest) returns (CreateMemberResponse) {
    option (google.api.http) = {
      post: "/v1/member"
      body: "*"
    };
  }

  // Get all the members/subusers of the company
  rpc GetMembers(GetMembersRequest) returns (GetMembersResponse) {
    option (google.api.http) = {
      get: "/v1/member"
    };
  }

  // Get the details of the user
  rpc GetMemberDetails(GetMemberDetailsRequest) returns (GetMemberDetailsResponse) {
    option (google.api.http) = {
      get: "/v1/member/{userId}"
    };
  }

  // Get the cost group to which the member is attached
  rpc GetMemberCostGroup(GetMemberCostGroupRequest) returns (GetMemberCostGroupResponse) {
    option (google.api.http) = {
      get: "/v1/member/{userId}/costgroup"
    };
  }  

  // Get the details of the logged-in user
  rpc GetUserDetails(GetUserDetailsRequest) returns (GetUserDetailsResponse) {
    option (google.api.http) = {
      get: "/v1/me"
    };
  }

  // Modify user's avatar
  rpc UpdateUserAvatar(UpdateUserAvatarRequest) returns (UpdateUserAvatarResponse) {
    option (google.api.http) = {
      put: "/v1/me/avatar"
      body: "*"
    };
  }

  // Modify user's icon
  rpc UpdateUserIcon(UpdateUserIconRequest) returns (UpdateUserIconResponse) {
    option (google.api.http) = {
      put: "/v1/me/icon"
      body: "*"
    };
  }

  // Modify user's color theme
  rpc UpdateUserColorTheme(UpdateUserColorThemeRequest) returns (UpdateUserColorThemeResponse) {
    option (google.api.http) = {
      put: "/v1/me/colortheme"
      body: "*"
    };
  }

  // Modify user's name
  rpc UpdateUserName(UpdateUserNameRequest) returns (UpdateUserNameResponse) {
    option (google.api.http) = {
      put: "/v1/me/name"
      body: "*"
    };
  }

  // Modify user's email
  rpc UpdateUserEmail(UpdateUserEmailRequest) returns (UpdateUserEmailResponse) {
    option (google.api.http) = {
      put: "/v1/me/email"
      body: "*"
    };
  }

  // Modify user's main view
  rpc UpdateUserMainView(UpdateUserMainViewRequest) returns (UpdateUserMainViewResponse) {
    option (google.api.http) = {
      put: "/v1/me/mainview"
      body: "*"
    };
  }

  // Reset user's password
  rpc ResetUserPassword(ResetUserPasswordRequest) returns (ResetUserPasswordResponse) {
    option (google.api.http) = {
      post: "/v1/me/password"
      body: "*"
    };
  }

  // Modify user's locale
  rpc UpdateUserLocale(UpdateUserLocaleRequest) returns (UpdateUserLocaleResponse) {
    option (google.api.http) = {
      put: "/v1/me/locale"
      body: "*"
    };
  }

  // Modify user's app theme
  rpc UpdateUserAppTheme(UpdateUserAppThemeRequest) returns (UpdateUserAppThemeResponse) {
    option (google.api.http) = {
      put: "/v1/me/apptheme"
      body: "*"
    };
  }

  // Modify user's timezone
  rpc UpdateUserTimezone(UpdateUserTimezoneRequest) returns (UpdateUserTimezoneResponse) {
    option (google.api.http) = {
      put: "/v1/me/timezone"
      body: "*"
    };
  }

  // Modify attributes
  rpc UpdateUserAttributes(UpdateUserAttributesRequest) returns (UpdateUserAttributesResponse) {
    option (google.api.http) = {
      put: "/v1/me/attributes"
      body: "*"
    };
  }

  // Deletes a user
  rpc DeleteMember(DeleteMemberRequest) returns (DeleteMemberResponse) {
    option (google.api.http) = {
      delete: "/v1/member/{userId}"
    };
  }

  // Reset member's password
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse) {
    option (google.api.http) = {
      post: "/v1/member/resetpassword"
      body: "*"
    };
  }

  // Create a view
  rpc CreateView(CreateViewRequest) returns (CreateViewResponse) {
    option (google.api.http) = {
      post: "/v1/view"
      body: "*"
    };
  }

  // Get all the views
  rpc GetViews(GetViewsRequest) returns (GetViewsResponse) {
    option (google.api.http) = {
      get: "/v1/view"
    };
  }

  // Get the details of the current view
  rpc GetCurrentView(GetCurrentViewRequest) returns (GetCurrentViewResponse) {
    option (google.api.http) = {
      get: "/v1/view/{viewId}"
    };
  }

  // Get favorite views
  rpc GetFavoriteViews(GetFavoriteViewsRequest) returns (GetFavoriteViewsResponse) {
    option (google.api.http) = {
      get: "/v1/view/favorites"
    };
  }

  // Publish current view
  rpc PublishView(PublishViewRequest) returns (PublishViewResponse) {
    option (google.api.http) = {
      post: "/v1/view/publish"
      body: "*"
    };
  }

  // Add to favorites
  rpc AddFavorite(AddFavoriteRequest) returns (AddFavoriteResponse) {
    option (google.api.http) = {
      put: "/v1/view/favorite"
      body: "*"
    };
  }

  // Remove from favorites
  rpc RemoveFavorite(RemoveFavoriteRequest) returns (RemoveFavoriteResponse) {
    option (google.api.http) = {
      put: "/v1/view/unfavorite"
      body: "*"
    };
  }

  // Updates the view details
  rpc UpdateView(UpdateViewRequest) returns (UpdateViewResponse) {
    option (google.api.http) = {
      put: "/v1/view/{viewId}"
      body: "*"
    };
  }

  // Deletes a view
  rpc DeleteView(DeleteViewRequest) returns (DeleteViewResponse) {
    option (google.api.http) = {
      delete: "/v1/view/{viewId}"
    };
  }

  // Updates the side menu state
  rpc UpdateSideMenuState(UpdateSideMenuStateRequest) returns (UpdateSideMenuStateResponse) {
    option (google.api.http) = {
      put: "/v1/view/{viewId}/sidemenustate"
      body: "*"
    };
  }

  // Add as side menu favorite
  rpc AddSideMenuFavorite(AddSideMenuFavoriteRequest) returns (AddSideMenuFavoriteResponse) {
    option (google.api.http) = {
      post: "/v1/view/{viewId}/sidemenufavorite"
      body: "*"
    };
  }

  // Remove from side menu favorite
  rpc RemoveSideMenuFavorite(RemoveSideMenuFavoriteRequest) returns (RemoveSideMenuFavoriteResponse) {
    option (google.api.http) = {
      post: "/v1/view/{viewId}/sidemenuunfavorite"
      body: "*"
    };
  }

  // Create a cost group
  rpc CreateCostGroup(CreateCostGroupRequest) returns (CreateCostGroupResponse) {
    option (google.api.http) = {
      post: "/v1/costgroup"
      body: "*"
    };
  }

  // Get all the cost groups
  rpc GetCostGroups(GetCostGroupsRequest) returns (GetCostGroupsResponse) {
    option (google.api.http) = {
      get: "/v1/costgroup"
    };
  }

  // Get the details of the cost group
  rpc GetCostGroupDetails(GetCostGroupDetailsRequest) returns (GetCostGroupDetailsResponse) {
    option (google.api.http) = {
      get: "/v1/costgroup/{costGroupId}"
    };
  }

  // Update cost group's name
  rpc UpdateCostGroupName(UpdateCostGroupNameRequest) returns (UpdateCostGroupNameResponse) {
    option (google.api.http) = {
      put: "/v1/costgroup/{costGroupId}/name"
      body: "*"
    };
  }

  // Update cost group's description
  rpc UpdateCostGroupDescription(UpdateCostGroupDescriptionRequest) returns (UpdateCostGroupDescriptionResponse) {
    option (google.api.http) = {
      put: "/v1/costgroup/{costGroupId}/description"
      body: "*"
    };
  }

  // Update cost group's image
  rpc UpdateCostGroupImage(UpdateCostGroupImageRequest) returns (UpdateCostGroupImageResponse) {
    option (google.api.http) = {
      put: "/v1/costgroup/{costGroupId}/image"
      body: "*"
    };
  }

  // Update cost group's icon
  rpc UpdateCostGroupIcon(UpdateCostGroupIconRequest) returns (UpdateCostGroupIconResponse) {
    option (google.api.http) = {
      put: "/v1/costgroup/{costGroupId}/icon"
      body: "*"
    };
  }

  // Update cost group's color theme
  rpc UpdateCostGroupColorTheme(UpdateCostGroupColorThemeRequest) returns (UpdateCostGroupColorThemeResponse) {
    option (google.api.http) = {
      put: "/v1/costgroup/{costGroupId}/colortheme"
      body: "*"
    };
  }

  // Update cost group's combinations
  rpc UpdateCostGroupCombinations(UpdateCostGroupCombinationsRequest) returns (UpdateCostGroupCombinationsResponse) {
    option (google.api.http) = {
      put: "/v1/costgroup/{costGroupId}/combinations"
      body: "*"
    };
  }

  // Assign a member to a cost group
  rpc AssignCostGroupMember(AssignCostGroupMemberRequest) returns (AssignCostGroupMemberResponse) {
    option (google.api.http) = {
      post: "/v1/costgroup/{costGroupId}/member/add"
      body: "*"
    };
  }

  // Remove a member from a cost group
  rpc RemoveCostGroupMember(RemoveCostGroupMemberRequest) returns (RemoveCostGroupMemberResponse) {
    option (google.api.http) = {
      post: "/v1/costgroup/{costGroupId}/member/remove"
      body: "*"
    };
  }

  // Deletes a cost group
  rpc DeleteCostGroup(DeleteCostGroupRequest) returns (DeleteCostGroupResponse) {
    option (google.api.http) = {
      delete: "/v1/costgroup/{costGroupId}"
    };
  }

  // Gets a CloudFormation launch URL for enabling the account access.
  rpc GetAccountAccessTemplateUrl(GetAccountAccessTemplateUrlRequest) returns (GetAccountAccessTemplateUrlResponse) {
    option (google.api.http) = {
      get: "/v1/aws/acctaccess"
    };
  }

  // Lists the account access role(s) attached to accounts under caller.
  rpc ListAccountAccess(ListAccountAccessRequest) returns (stream AccountAccess) {
    option (google.api.http) = {
      post: "/v1/aws/acctaccess:read"
    };
  }

  // Gets the current account role attached to the input target.
  rpc GetAccountAccess(GetAccountAccessRequest) returns (AccountAccess) {
    option (google.api.http) = {
      get: "/v1/aws/acctaccess/{target}"
    };
  }

  // Starts validation of the account access stack deployment. If successful, the IAM role created from the CloudFormation stack will be registered to the target.
  rpc CreateAccountAccess(CreateAccountAccessRequest) returns (AccountAccess) {
    option (google.api.http) = {
      post: "/v1/aws/acctaccess"
      body: "*"
    };
  }

  // Starts an update to an existing account access CloudFormation stack for template changes, if any. Only call this API if the status of your account access is 'outdated'.
  rpc UpdateAccountAccess(UpdateAccountAccessRequest) returns (api.Operation) {
    option (google.api.http) = {
      put: "/v1/aws/acctaccess/{target}"
    };
  }

  // Deletes the current account access role attached to this target account. This does not delete the CloudFormation deployment in your account.
  rpc DeleteAccountAccess(DeleteAccountAccessRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/aws/acctaccess/{target}"
    };
  }
}

// Request message for InviteMember
message InviteMemberRequest {
  string email = 1;
}

// Response message for InviteMember
message InviteMemberResponse {
  string email = 1;
}

// Request message for CreateMember
message CreateMemberRequest {
  string email = 1;
  string password = 2;
  string name = 3;
}

// Response message for CreateMember
message CreateMemberResponse {
  api.cover.UserData userData = 1;
}

// Request message for GetMembers
message GetMembersRequest {}

// Response message for GetMembers
message GetMembersResponse {
  repeated api.cover.UserData userData = 1;
}

// Request message for GetMemberDetails
message GetMemberDetailsRequest {
  // Required. UserId.
  string userId = 1;
}

// Response message for GetMemberDetails
message GetMemberDetailsResponse {
  api.cover.UserData userData = 1;
}

// Request message for GetMemberCostGroup
message GetMemberCostGroupRequest {
  // Required. UserId.
  string userId = 1;
}

// Response message for GetMemberCostGroup
message GetMemberCostGroupResponse {
  repeated api.cover.MemberCostGroup costGroups = 1;
}

// Request message for GetUserDetails
message GetUserDetailsRequest {}

// Response message for GetUserDetails
message GetUserDetailsResponse {
  api.cover.UserData userData = 1;
}

// Request message for UpdateUserAvatar
message UpdateUserAvatarRequest {
  string avatar = 1;
}

// Response message for UpdateUserAvatar
message UpdateUserAvatarResponse {
  string avatar = 1;
}

// Request message for UpdateUserIcon
message UpdateUserIconRequest {
  string icon = 1;
}

// Response message for UpdateUserIcon
message UpdateUserIconResponse {
  string icon = 1;
}

// Request message for UpdateUserColorTheme
message UpdateUserColorThemeRequest {
  string colorTheme = 1;
}

// Response message for UpdateUserColorTheme
message UpdateUserColorThemeResponse {
  string colorTheme = 1;
}

// Request message for UpdateUserName
message UpdateUserNameRequest {
  string name = 1;
}

// Response message for UpdateUserName
message UpdateUserNameResponse {
  string name = 1;
}

// Request message for UpdateUserEmail
message UpdateUserEmailRequest {
  string email = 1;
}

// Response message for UpdateUserEmail
message UpdateUserEmailResponse {
  string email = 1;
}

// Request message for UpdateUserMainView
message UpdateUserMainViewRequest {
  string viewId = 1;
}

// Response message for UpdateUserMainView
message UpdateUserMainViewResponse {
  string viewId = 1;
}

// Request message for ResetUserPassword
message ResetUserPasswordRequest {
  string previousPassword = 1;
  string newPassword = 2;
}

// Response message for ResetUserPassword
message ResetUserPasswordResponse {
  string userId = 1;
}

// Request message for UpdateUserLocale
message UpdateUserLocaleRequest {
  string locale = 1;
}

// Response message for UpdateUserLocale
message UpdateUserLocaleResponse {
  string locale = 1;
}

// Request message for UpdateUserAppTheme
message UpdateUserAppThemeRequest {
  string appTheme = 1;
}

// Response message for UpdateUserAppTheme
message UpdateUserAppThemeResponse {
  string appTheme = 1;
}

// Request message for UpdateUserTimezone
message UpdateUserTimezoneRequest {
  string timezone = 1;
}

// Response message for UpdateUserTimezone
message UpdateUserTimezoneResponse {
  string timezone = 1;
}

// Request message for UpdateUserAttributes
message UpdateUserAttributesRequest {
  repeated string attributes = 1;
}

// Response message for UpdateUserAttributes
message UpdateUserAttributesResponse {
  repeated string attributes = 1;
}

// Request message for DeleteMember
message DeleteMemberRequest {
  // Required. UserId.
  string userId = 1;
}

// Response message for DeleteMember
message DeleteMemberResponse {
  string userId = 1;
}

// Request message for ResetPassword
message ResetPasswordRequest {
  // Required. UserId.
  string userId = 1;
}

// Response message for ResetPassword
message ResetPasswordResponse {
  string userId = 1;
}

// Request message for CreateView
message CreateViewRequest {
  string name = 1;
  string description = 2;
  bool isPrivate = 3;
  bool isEditable = 4;
  string icon = 5;
  string reportType = 6;
}

// Response message for CreateView
message CreateViewResponse {
  api.cover.ViewData viewData = 1;
}

// Request message for GetViews
message GetViewsRequest {}

// Response message for GetViews
message GetViewsResponse {
  repeated api.cover.ViewList viewList = 1;
}

// Request message for GetCurrentView
message GetCurrentViewRequest {
  // Required. View Id.
  string viewId = 1;
}

// Response message for GetCurrentView
message GetCurrentViewResponse {
  api.cover.ViewData viewData = 1;
}

// Request message for GetFavoriteViews
message GetFavoriteViewsRequest {}

// Response message for GetFavoriteViews
message GetFavoriteViewsResponse {
  repeated api.cover.Favorites favorites = 1;
}

// Request message for PublishView
message PublishViewRequest {
  // Required. View Id.
  string viewId = 1;
}

// Response message for PublishView
message PublishViewResponse {
  string url = 1;
}

// Request message for AddFavorite
message AddFavoriteRequest {
  // Required. View Id.
  string viewId = 1;
}

// Response message for AddFavorite
message AddFavoriteResponse {
  string viewId = 1;
}

// Request message for RemoveFavorite
message RemoveFavoriteRequest {
  // Required. View Id.
  string viewId = 1;
}

// Response message for RemoveFavorite
message RemoveFavoriteResponse {
  string viewId = 1;
}

// Request message for UpdateView
message UpdateViewRequest {
  // Required. View Id.
  string viewId = 1;
  string name = 2;
  string description = 3;
  string icon = 4;
  bool isPrivate = 5;
  bool isEditable = 6;
}

// Response message for UpdateView
message UpdateViewResponse {
  string viewId = 1;
}

// Request message for DeleteView
message DeleteViewRequest {
  // Required. View Id.
  string viewId = 1;
}

// Response message for DeleteView
message DeleteViewResponse {
  string viewId = 1;
}

// Request message for UpdateSideMenuState
message UpdateSideMenuStateRequest {
  // Required. View Id.
  string viewId = 1;
  repeated api.cover.SideMenuState sidemenustate = 2;
}

// Response message for UpdateSideMenuState
message UpdateSideMenuStateResponse {
  string viewId = 1;
}

// Request message for AddSideMenuFavorite
message AddSideMenuFavoriteRequest {
  // Required. View Id.
  string viewId = 1;
  string menuItemId = 2;
}

// Response message for AddSideMenuFavorite
message AddSideMenuFavoriteResponse {
  string viewId = 1;
}

// Request message for RemoveSideMenuFavorite
message RemoveSideMenuFavoriteRequest {
  // Required. View Id.
  string viewId = 1;
  string menuItemId = 2;
}

// Response message for RemoveSideMenuFavorite
message RemoveSideMenuFavoriteResponse {
  string viewId = 1;
}

// Request message for CreateCostGroup
message CreateCostGroupRequest {
  string name = 1;
  string description = 2;
  string image = 3;
  string icon = 4;
  string colorTheme = 5;
  repeated api.cover.Combinations combinations = 6;
}

// Response message for CreateCostGroup
message CreateCostGroupResponse {
  api.cover.CostGroupData costGroupData = 1;
}

// Request message for GetCostGroups
message GetCostGroupsRequest {}

// Response message for GetCostGroups
message GetCostGroupsResponse {
  repeated api.cover.CostGroupData costGroupData = 1;
}

// Request message for GetCostGroupDetails
message GetCostGroupDetailsRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
}

// Response message for GetCostGroupDetails
message GetCostGroupDetailsResponse {
  api.cover.CostGroupData costGroupData = 1;
}

// Request message for UpdateCostGroupName
message UpdateCostGroupNameRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. Name.
  string name = 2;
}

// Response message for UpdateCostGroupName
message UpdateCostGroupNameResponse {
  string name = 1;
}

// Request message for UpdateCostGroupDescription
message UpdateCostGroupDescriptionRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. Description.
  string description = 2;
}

// Response message for UpdateCostGroupDescription
message UpdateCostGroupDescriptionResponse {
    string description = 1;
}

// Request message for UpdateCostGroupImage
message UpdateCostGroupImageRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. Image.
  string image = 2;
}

// Response message for UpdateCostGroupImage
message UpdateCostGroupImageResponse {
  string image = 1;
}

// Request message for UpdateCostGroupIcon
message UpdateCostGroupIconRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. Icon.
  string icon = 2;
}

// Response message for UpdateCostGroupIcon
message UpdateCostGroupIconResponse {
    string icon = 1;
}

// Request message for UpdateCostGroupColorTheme
message UpdateCostGroupColorThemeRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. Color Theme.
  string colorTheme = 2;
}

// Response message for UpdateCostGroupColorTheme
message UpdateCostGroupColorThemeResponse {
    string colorTheme = 1;
}

// Request message for UpdateCostGroupCombinations
message UpdateCostGroupCombinationsRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  repeated api.cover.Combinations combinations = 2;
}

// Response message for UpdateCostGroupCombinations
message UpdateCostGroupCombinationsResponse {
  repeated api.cover.Combinations combinations = 1;
}

// Request message for AssignCostGroupMember
message AssignCostGroupMemberRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. User Id.
  string userId = 2;
}

// Response message for AssignCostGroupMember
message AssignCostGroupMemberResponse {
  string costGroupId = 1;
  string userId = 2;
}

// Request message for RemoveCostGroupMember
message RemoveCostGroupMemberRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
  // Required. User Id.
  string userId = 2;
}

// Response message for RemoveCostGroupMember
message RemoveCostGroupMemberResponse {
  string costGroupId = 1;
  string userId = 2;
}

// Request message for DeleteCostGroup
message DeleteCostGroupRequest {
  // Required. Cost Group Id.
  string costGroupId = 1;
}

// Response message for DeleteCostGroup
message DeleteCostGroupResponse {
  string costGroupId = 1;
}

// Request message for the GetAccountAccessTemplateUrlRequest rpc.
message GetAccountAccessTemplateUrlRequest {
  // All templates are publicly available from the reponse link (`templateUrl`) if you want to audit the included permissions.
  string type = 1;
}

// Response message for the GetAccountAccessTemplateUrlResponse rpc.
message GetAccountAccessTemplateUrlResponse {
  // The CloudFormation launch url. Open it in your browser.
  string launchUrl = 1;

  // The latest CloudFormation template. The version is included in the filename.
  string templateUrl = 2;

  // The default stack name used. Can be modified.
  string stackName = 3;

  // The AWS account that will receive the access. Do not change.
  string principal = 4;

  // The external id for this role. Do not change.
  string externalId = 5;
}

// Request message for the ListAccountAccess rpc.
message ListAccountAccessRequest {}

// Request message for the GetAccountAccess rpc.
message GetAccountAccessRequest {
  // Required. The target AWS account to query.
  string target = 1;
}

// Response message for GetAccountAccess, CreateAccountAccess rpc.
message AccountAccess {
  // The queried target account.
  string target = 1;

  // The role ARN that provides the cross-account access permissions.
  string roleArn = 2;

  // The external id for this role.
  string externalId = 3;

  // The id of the CloudFormation stack deployed in the target account.
  string stackId = 4;

  // The region where the stack is deployed.
  string stackRegion = 5;

  // The latest template used to deploy the stack.
  string templateUrl = 6;

  // This can be `latest`, `outdated`, or some error information.
  string status = 7;

  // The last updated timestamp, RFC3339 UTC.
  string lastUpdated = 8;
}

// Request message for the CreateAccountAccess rpc.
message CreateAccountAccessRequest {
  // Required. The target AWS account to validate.
  string target = 1;
}

// Request message for the UpdateAccountAccess rpc.
message UpdateAccountAccessRequest {
  // Required. The target AWS account to update.
  string target = 1;
}

// Request message for the DeleteAccountAccess rpc.
message DeleteAccountAccessRequest {
  // Required. The target AWS account to delete.
  string target = 1;
}