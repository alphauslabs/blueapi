syntax = "proto3";

package blueapi.asset.v1;

import "api/aws/resource.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/alphauslabs/blueapi/asset";
option java_package = "cloud.alphaus.api.asset";
option java_outer_classname = "AssetProto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Alphaus Blue: Asset Service";
    version: "1.0";
    contact: {
      name: "Alphaus Blue: Asset Service";
      url: "https://alphauslabs.github.io/blueapi/apis/asset.html";
    };
    license: {
      name: "License: Apache License 2.0";
      url: "https://github.com/alphauslabs/blueapi/blob/main/LICENSE";
    };
  };
  external_docs: {
    url: "https://alphauslabs.github.io/blueapi/apis/asset.html";
    description: "More about Alphaus Blue: Asset Service";
  }
};

// Service for assets management
service Asset {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
        description: "Asset API. Base URL: https://api.alphaus.cloud/m/blue/asset"
        external_docs: {
          url: "https://github.com/alphauslabs/blueapi/tree/main/asset/";
          description: "Service definition";
        }
    };
    
    // WORK-IN-PROGRESS: Lists resources. 
    rpc ListResources(ListResourcesRequest) returns (ListResourcesResponse) {
        option (google.api.http) = {
          get: "/v1/{vendor}/{service}"
        };
    }
}

// Request message for the Asset.ListResources rpc.
message ListResourcesRequest {
    // Required. At the moment, only `aws` is supported.
    string vendor = 1;

    // Required. The service to query for resources.
    string service = 2;
}

message ListResourcesResponse {
    string type = 1;
    string name = 2;
    repeated api.aws.Resource resources = 3;
}