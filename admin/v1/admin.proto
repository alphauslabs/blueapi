syntax = "proto3";

package blueapi.admin.v1;

import "api/accountgroup.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/alphauslabs/blueapi/admin";
option java_package = "cloud.alphaus.api.admin";
option java_outer_classname = "AdminProto";

// Admin service definition.
service Admin {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "(BETA) Admin API. Base URL: https://api.alphaus.cloud/m/blue"
    external_docs: {
      url: "https://github.com/alphauslabs/blueapi/tree/main/admin/";
      description: "Service definition";
    }
  };

  // Lists all account groups.
  rpc ListAccountGroups(ListAccountGroupsRequest) returns (stream ListAccountGroupsResponse) {
    option (google.api.http) = {
      get: "/admin/v1/acctgroups"
    };
  }

  // Gets an account group.
  rpc GetAccountGroup(GetAccountGroupRequest) returns (GetAccountGroupResponse) {
    option (google.api.http) = {
      get: "/admin/v1/acctgroups/{id}"
    };
  }

  // WORK IN PROGRESS:
  // Update the features available to a user on an Alphaus product. Currently,
  // only values of "wave" and "aqua" are supported for {product}. For a list of
  // valid feature flags, see our documentation at https://alphauslabs.github.io/blueapi/apis/admin.html.
  rpc UpdateFeatureFlags(UpdateFeatureFlagsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/admin/v1/users/{id}/features/{product}"
      body: "*"
    };
  }
}

// Request message for the Admin.ListAccountGroups rpc.
message ListAccountGroupsRequest {}

// Response message for the Admin.ListAccountGroups rpc.
message ListAccountGroupsResponse {
  repeated api.AccountGroup accountGroups = 1;
}

// Request message for the Admin.GetAccountGroup rpc.
message GetAccountGroupRequest {
  string id = 1;
}

// Response message for the Admin.GetAccountGroup rpc.
message GetAccountGroupResponse {
  api.AccountGroup acctGroup = 1;
}

// Request message for the Admin.UpdateFeatureFlags rpc
message UpdateFeatureFlagsRequest {
  string id = 1;
  string product = 2;
  map<string, bool> feature_flags = 3;
}