syntax = "proto3";

package blueapi.admin.v1;

import "api/accountgroup.proto";
import "api/notification.proto";
import "api/operation.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/alphauslabs/blueapi/admin";
option java_package = "cloud.alphaus.api.admin";
option java_outer_classname = "AdminProto";

// Admin service definition.
service Admin {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "Admin API. Base URL: https://api.alphaus.cloud/m/blue"
    external_docs: {
      url: "https://github.com/alphauslabs/blueapi/tree/main/admin/";
      description: "Service definition";
    }
  };

  // Lists all account groups.
  rpc ListAccountGroups(ListAccountGroupsRequest) returns (stream ListAccountGroupsResponse) {
    option (google.api.http) = {
      get: "/admin/v1/acctgroups"
    };
  }

  // Gets an account group.
  rpc GetAccountGroup(GetAccountGroupRequest) returns (GetAccountGroupResponse) {
    option (google.api.http) = {
      get: "/admin/v1/acctgroups/{id}"
    };
  }

  // Gets a CloudFormation launch URL for enabling the default cross-account access to your account's cost information based on type. See comments on the type for more information on what each template does.
  rpc GetDefaultCostAccessTemplateUrl(GetDefaultCostAccessTemplateUrlRequest) returns (GetDefaultCostAccessTemplateUrlResponse) {
    option (google.api.http) = {
      get: "/admin/v1/aws/xacct/dca"
    };
  }

  // Lists the default cross-account access role(s) attached to accounts under caller.
  rpc ListDefaultCostAccess(ListDefaultCostAccessRequest) returns (stream DefaultCostAccess) {
    option (google.api.http) = {
      post: "/admin/v1/aws/xacct/dca/all:read"
    };
  }

  // Gets the current default cross-account role attached to the input target.
  rpc GetDefaultCostAccess(GetDefaultCostAccessRequest) returns (DefaultCostAccess) {
    option (google.api.http) = {
      get: "/admin/v1/aws/xacct/dca/{target}"
    };
  }

  // Starts validation of a default cross-account access stack deployment. If successful, the IAM role created from the CloudFormation stack will be registered to the target.
  rpc CreateDefaultCostAccess(CreateDefaultCostAccessRequest) returns (DefaultCostAccess) {
    option (google.api.http) = {
      post: "/admin/v1/aws/xacct/dca"
      body: "*"
    };
  }

  // Starts an update to an existing default cross-account access CloudFormation stack for template changes, if any. Only call this API if the status of your default cross-account access is 'outdated'.
  rpc UpdateDefaultCostAccess(UpdateDefaultCostAccessRequest) returns (api.Operation) {
    option (google.api.http) = {
      put: "/admin/v1/aws/xacct/dca/{target}"
    };
  }

  // Deletes the current default cross-account access role attached to this target account. This does not delete the CloudFormation deployment in your account.
  rpc DeleteDefaultCostAccess(DeleteDefaultCostAccessRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/admin/v1/aws/xacct/dca/{target}"
    };
  }

  // WORK-IN-PROGRESS: Gets a CloudFormation launch URL for enabling CloudWatch metrics streaming on a target account.
  rpc GetCloudWatchMetricsStreamTemplateUrl(GetCloudWatchMetricsStreamTemplateUrlRequest) returns (GetCloudWatchMetricsStreamTemplateUrlResponse) {
    option (google.api.http) = {
      get: "/admin/v1/aws/xacct/cwms"
    };
  }

  // WORK-IN-PROGRESS: Starts validation of a CloudWatch Metrics streaming stack deployment.
  rpc CreateCloudWatchMetricsStream(CreateCloudWatchMetricsStreamRequest) returns (CloudWatchMetricsStream) {
    option (google.api.http) = {
      post: "/admin/v1/aws/xacct/cwms"
      body: "*"
    };
  }

  // Get notification settings for login user's organization or group.
  rpc GetNotificationSettings(GetNotificationSettingsRequest) returns (api.NotificationSettings) {
    option (google.api.http) = {
      get: "/admin/v1/notification/settings"
    };
  }

  // Creates or updates notification settings for login user's organization or group.
  rpc SaveNotificationSettings(SaveNotificationSettingsRequest) returns (api.NotificationSettings) {
    option (google.api.http) = {
      post: "/admin/v1/notification/settings"
      body: "*"
    };
  }

  // Lists all notification channels for login user's organization or group.
  rpc ListNotificationChannels(ListNotificationChannelsRequest) returns (ListNotificationChannelsResponse) {
    option (google.api.http) = {
      get: "/admin/v1/notification/channels"
    };
  }

  // Gets notification channel for login user's organization or group.
  rpc GetNotificationChannel(GetNotificationChannelRequest) returns (api.NotificationChannel) {
    option (google.api.http) = {
      get: "/admin/v1/notification/channels/{id}"
    };
  }

  // WORK-IN-PROGRESS: Creates notification settings for login user's organization or group.
  rpc CreateNotificationChannel(CreateNotificationChannelRequest) returns (api.NotificationChannel) {
    option (google.api.http) = {
      post: "/admin/v1/notification/channels"
      body: "*"
    };
  }

  // Creates a default notification channel of type email based on the caller's primary email address.
  rpc CreateDefaultNotificationChannel(CreateDefaultNotificationChannelRequest) returns (api.NotificationChannel) {
    option (google.api.http) = {
      post: "/admin/v1/notification/default"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Updates notification settings for login user's organization or group.
  rpc UpdateNotificationChannel(UpdateNotificationChannelRequest) returns (api.NotificationChannel) {
    option (google.api.http) = {
      put: "/admin/v1/notification/channels/{id}"
    };
  }

  // Deletes notification settings for login user's organization or group.
  rpc DeleteNotificationChannel(DeleteNotificationChannelRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/admin/v1/notification/channels/{id}"
    };
  }

   // WORK-IN-PROGRESS: List all notification for login user's organization.
  rpc ListNotifications(ListNotificationsRequest) returns (ListNotificationsResponse) {
    option (google.api.http) = {
      get: "/admin/v1/notifications"
    };
  }

  // WORK-IN-PROGRESS: Get notifications for login user's organization.
  rpc GetNotification(GetNotificationRequest) returns (api.Notification) {
    option (google.api.http) = {
      get: "/admin/v1/notifications/{id}"
    };
  }

  // WORK-IN-PROGRESS: Creates notification for login user's organization.
  rpc CreateNotification(CreateNotificationRequest) returns (api.Notification) {
    option (google.api.http) = {
      post: "/admin/v1/notifications"
      body: "*"
    };
  }

  // WORK-IN-PROGRESS: Updates notification for login user's organization.
  rpc UpdateNotification(UpdateNotificationRequest) returns (api.Notification) {
    option (google.api.http) = {
      put: "/admin/v1/notifications/{id}"
    };
  }

  // WORK-IN-PROGRESS: Deletes notification for login user's organization.
  rpc DeleteNotification(DeleteNotificationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/admin/v1/notifications/{id}"
    };
  }

}

// Request message for the Admin.ListAccountGroups rpc.
message ListAccountGroupsRequest {}

// Response message for the Admin.ListAccountGroups rpc.
message ListAccountGroupsResponse {
  repeated api.AccountGroup accountGroups = 1;
}

// Request message for the Admin.GetAccountGroup rpc.
message GetAccountGroupRequest {
  string id = 1;
}

// Response message for the Admin.GetAccountGroup rpc.
message GetAccountGroupResponse {
  api.AccountGroup acctGroup = 1;
}

// Request message for the Admin.GetDefaultCostAccessTemplateUrl rpc.
message GetDefaultCostAccessTemplateUrlRequest {
  // Optional. Valid values are `default`, `s3only`, and `apionly`. Defaults to `default` if empty.
  //
  // `default` - Template for setting up both CUR export and read-only access to cost information. If selected, you need to deploy this template to `us-east-1` region as CloudFormation only supports the `AWS::CUR::ReportDefinition` in that region at the moment. The target S3 bucket will also be created in that region. If you prefer your S3 bucket to be located in a different region, you can use the template from this API by setting the type to `s3only`. After your S3 bucket is ready, call this API again (type is `default`) and set the `CurS3BucketOption` parameter to `USE_EXISTING`, then set your bucket name and region accordingly. This is the default for Ripple, unless specified otherwise.
  //
  // `apionly` - Template for setting up ready-only access to cost information. Handy if you already have exported your CUR to Alphaus through other means (i.e. manual setup). This template is the same as the `default` type but without the CUR export definitions. Although not required, we recommend you to deploy this template to allow us to query your cost-related information such as Reserved Instances, Saving Plans, etc. through the AWS API. At the moment, we only rely on CUR data which is a best-effort basis and sometimes not accurate. This is the default for Wave(Pro), unless specified otherwise.
  //
  // `s3only` - A helper template for creating an S3 bucket to be used for CUR export.
  //
  // All templates are publicly available from the reponse link (`templateUrl`) if you want to audit the included permissions.
  string type = 1;
}

// Response message for the Admin.GetDefaultCostAccessTemplateUrl rpc.
message GetDefaultCostAccessTemplateUrlResponse {
  // The CloudFormation launch url. Open it in your browser.
  string launchUrl = 1;

  // The latest CloudFormation template. The version is included in the filename.
  string templateUrl = 2;

  // The default stack name used. Can be modified.
  string stackName = 3;

  // The AWS account that will receive the access. Do not change.
  string principal = 4;

  // The external id for this role. Do not change.
  string externalId = 5;
}

// Request message for the Admin.ListDefaultCostAccess rpc.
message ListDefaultCostAccessRequest {}

// Request message for the Admin.GetDefaultCostAccess rpc.
message GetDefaultCostAccessRequest {
  // Required. The target AWS account to query.
  string target = 1;
}

// Response message for the Admin.GetDefaultCostAccess, Admin.CreateDefaultCostAccess rpc.
message DefaultCostAccess {
  // The queried target account.
  string target = 1;

  // The role ARN that provides the cross-account access permissions.
  string roleArn = 2;

  // The external id for this role.
  string externalId = 3;

  // The id of the CloudFormation stack deployed in the target account.
  string stackId = 4;

  // The region where the stack is deployed.
  string stackRegion = 5;

  // The latest template used to deploy the stack.
  string templateUrl = 6;

  // This can be `latest`, `outdated`, or some error information.
  string status = 7;

  // The last updated timestamp, RFC3339 UTC.
  string lastUpdated = 8;
}

// Request message for the Admin.CreateDefaultCostAccess rpc.
message CreateDefaultCostAccessRequest {
  // Required. The target AWS account to validate.
  string target = 1;
}

// Request message for the Admin.UpdateDefaultCostAccess rpc.
message UpdateDefaultCostAccessRequest {
  // Required. The target AWS account to update.
  string target = 1;
}

// Request message for the Admin.DeleteDefaultCostAccess rpc.
message DeleteDefaultCostAccessRequest {
  // Required. The target AWS account to delete.
  string target = 1;
}

// Request message for the Admin.GetCloudWatchMetricsStreamTemplateUrl rpc.
message GetCloudWatchMetricsStreamTemplateUrlRequest {}

// Response message for the Admin.GetCloudWatchMetricsStreamTemplateUrl rpc.
message GetCloudWatchMetricsStreamTemplateUrlResponse {
  // The CloudFormation launch url. Open it in your browser.
  string launchUrl = 1;

  // The latest CloudFormation template. The version is included in the filename.
  string templateUrl = 2;

  // The default stack name used. Can be modified.
  string stackName = 3;

  // The external id for this role. Do not change.
  string externalId = 4;
}

// Request message for the Admin.CreateCloudWatchMetricsStream rpc.
message CreateCloudWatchMetricsStreamRequest {
  // Required. The target AWS account to validate.
  string target = 1;
}

// Response message for the Admin.CreateCloudWatchMetricsStream rpc.
message CloudWatchMetricsStream {
  // The queried target account.
  string target = 1;

  // The external id for this role.
  string externalId = 2;

  // The id of the CloudFormation stack deployed in the target account.
  string stackId = 3;

  // The region where the stack is deployed.
  string stackRegion = 4;

  // The latest template used to deploy the stack.
  string templateUrl = 5;

  // This can be `latest`, `outdated`, or some error information.
  string status = 6;

  // The last updated timestamp, RFC3339 UTC.
  string lastUpdated = 7;
}

// Request message for the Admin.GetNotificationSettings rpc.
message GetNotificationSettingsRequest {}

// Request message for the Admin.SaveNotificationSettings rpc.
message SaveNotificationSettingsRequest {
  // Required. Enable or disable notifications globally.
  bool enabled = 1;

  // Optional. If non-empty, set this notification channel id as the default channel.
  string defaultChannel = 2;
}

// Request message for the Admin.ListNotificationChannels rpc.
message ListNotificationChannelsRequest {}

// Response message for the Admin.ListNotificationChannels rpc.
message ListNotificationChannelsResponse {
  repeated api.NotificationChannel channels = 1;
}

// Request message for the Admin.GetNotificationChannel rpc.
message GetNotificationChannelRequest {
  string id = 1;
}

// Request message for the Admin.CreateNotificationChannel rpc.
message CreateNotificationChannelRequest {
  // Required. Name of the notification channel.
  string name = 1;

  // Required. Valid values: `email`, `slack`, `msteams`.
  string type = 2;

  // Required if type = `email`.
  api.EmailChannel email = 3;

  // Required if type = `slack`.
  api.SlackChannel slack = 4;

  // Required if type = `msteams`.
  api.MSTeamsChannel msteams = 5;
}

// Request message for the Admin.CreateDefaultNotificationChannel rpc.
message CreateDefaultNotificationChannelRequest {}

// Request message for the Admin.UpdateNotificationChannel rpc.
message UpdateNotificationChannelRequest {
  //Required. ID of the notification channel to update.
  string id = 1;

  // Required. Name of the notification channel.
  string name = 2;

  // Required. Valid values: `email`, `slack`, `msteams`.
  string type = 3;

  // Required if type = `email`.
  api.EmailChannel email = 4;

  // Required if type = `slack`.
  api.SlackChannel slack = 5;

  // Required if type = `msteams`.
  api.MSTeamsChannel msteams = 6;
}

// Request message for the Admin.DeleteNotificationChannel rpc.
message DeleteNotificationChannelRequest {
  //Required. ID of the notification channel to delete.
  string id = 1;
}

// Request message for the Admin.ListNotifications rpc.
message ListNotificationsRequest {}

// Response message for the Admin.ListNotifications rpc.
message ListNotificationsResponse {
  repeated api.Notification notifications = 1;
}

// Request message for the Admin.GetNotificationTypeChannels rpc.
message GetNotificationRequest {
  // Required
  string id = 1;

  // Required
  // Valid values: 
  // `invoiceCalculationStart`, 
  // `invoiceCalculationEnd`, 
  // `curChangedAfterInvoicing`.
  string notificationType = 2;
}

// Request message for the Admin.CreateNotificationTypeChannels rpc.
message CreateNotificationRequest {
  // Required
  // Valid values: 
  // `invoiceCalculationStart`, 
  // `invoiceCalculationEnd`, 
  // `curChangedAfterInvoicing`.
  string notificationType = 1;

  // Required
  repeated string channels = 2;

  // Required
  bool enabled = 3;
}

// Request message for the Admin.UpdateNotificationTypeChannels rpc.
message UpdateNotificationRequest {
  // Required 
  string id = 1;

  // Required
  repeated string channels = 2;

  // Required
  bool enabled = 3;

  // Required
  // Valid values: 
  // `invoiceCalculationStart`, 
  // `invoiceCalculationEnd`, 
  // `curChangedAfterInvoicing`.
  string notificationType = 4;
}

// Request message for the Admin.DeleteNotification rpc.
message DeleteNotificationRequest {
  // Required 
  string id = 1;

  // Required
  // Valid values: 
  // `invoiceCalculationStart`, 
  // `invoiceCalculationEnd`, 
  // `curChangedAfterInvoicing`.
  string notificationType = 2;
}
