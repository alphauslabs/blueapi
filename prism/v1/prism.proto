syntax = "proto3";

package blueapi.prism.v1;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/alphauslabs/blueapi/prism";
option java_package = "cloud.alphaus.api.prism";
option java_outer_classname = "PrismProto";

// Prism service definition.
service Prism {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "(Alpha) Prism API. Base URL: https://api.alphaus.cloud/m/blue/prism"
    external_docs: {
      url: "https://github.com/alphauslabs/blueapi/tree/main/prism/";
      description: "Service definition";
    }
  };

  // Test endpoint only.
  rpc Test(TestRequest) returns (TestResponse) {
    option (google.api.http) = {
      get: "/v1/test"
    };
  }

  // WIP: Creates a new project.
  rpc CreateProject(CreateProjectRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/project"
      body: "*"
    };
  }


  // WIP: Gets information about a project by ID.
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {
      get: "/v1/project/{id}"
    };
  }


  // WIP: Deletes a project by ID.
  rpc DeleteProject(DeleteProjectRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/project/{id}"
    };
  }

  // WIP: Lists all projects 
  rpc ListProjects(ListProjectsRequest) returns (stream Project) {
    option (google.api.http) = {
      post: "/v1/project/all:read"
      body: "*"
    };
  }

  rpc CreateOrganization(CreateOrganizationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/org"
      body: "*"
    };
  }

  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse) {
    option (google.api.http) = {
      get: "/v1/org/{id}"
    };
  }

  rpc UpdateOrganization(UpdateOrganizationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/org/{id}"
      body: "*"
    };
  }

  rpc DeleteOrganization(DeleteOrganizationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/org/{id}"
    };
  }

  rpc VerifyUser(VerifyUserRequest) returns (VerifyUserResponse) {
    option (google.api.http) = {
      post: "/v1/verify"
      body: "*"
    };
  }

  rpc GetTeam(GetTeamRequest) returns (GetTeamResponse) {
    option (google.api.http) = {
      get: "/v1/team/{id}"
    };
  }

  rpc ListTeams(ListTeamsRequest) returns (stream Team) {
    option (google.api.http) = {
      post: "/v1/team/all:read"
      body: "*"
    };
  }

  rpc ListTeamMembers(ListTeamMembersRequest) returns (stream Member) {
    option (google.api.http) = {
      post: "/v1/member/all:read"
      body: "*"
    };
  }

  rpc ListProjectToTeam(ListProjectToTeamRequest) returns (stream ListProjectToTeamResponse) {
    option (google.api.http) = {
      post: "/v1/projecttoteam/all:read"
      body: "*"
    };
  }

  rpc ListProducts(ListProductsRequest) returns (stream Product) {
    option (google.api.http) = {
      post: "/v1/product/all:read"
      body: "*"
    };
  }

  rpc CreateProduct(CreateProductRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/product"
      body: "*"
    };
  }
}

message TestRequest {}

message TestResponse {
  string response = 1;
}

message CreateProjectRequest {
  string name = 1;
  string email = 2;
}

message GetProjectRequest {
  // Required project ID.
  string id = 1; 
}

message GetProjectResponse {
  string id = 1;
  string name = 2;
}

message DeleteProjectRequest {
  // Required project ID.
  string id = 1;
}

message ListProjectsRequest {}

message Project {
  string id = 1;
  string name = 2;
  string created_at = 3; 
  string last_update= 4;
  string email = 5;
}

message CreateOrganizationRequest {
  string name = 1; 
  string email = 2;
}

message GetOrganizationRequest {
  // Required organization ID.
  string id = 1;
}

message GetOrganizationResponse {
  string id = 1;
  string name = 2;
  string email = 3;
}

message UpdateOrganizationRequest {
  // Required organization ID.
  string id = 1;
  string name = 2;
  string email = 3;
}

message DeleteOrganizationRequest {
  // Required organization ID.
  string id = 1;
}

message VerifyUserRequest {}

message VerifyUserResponse {
  string email = 1;
  string org = 2;
}

message GetTeamRequest {
  // Required team ID.
  string id = 1;
}
message GetTeamResponse {
  string id = 1;
  string name = 2;
}

message ListTeamsRequest {}


message Team {
  string id = 1;
  string name = 2;
  string org = 3;
  string created_at = 4;
  string last_update = 5;
}

message ListTeamMembersRequest {}

message Member {
  string org = 1;
  string team = 2;
  string id = 3;
  string email = 4;
  string name = 5;
  string created_at = 6;
  string last_update = 7;
}

message ListProjectToTeamRequest {}

message ListProjectToTeamResponse {
  string project_id = 1;
  string project_name = 2;
  string team_id = 3;
  string team_name = 4;
}

message ListProductsRequest {}

message Product {
  string id = 1;
  string name = 2;
  string email = 3;
  string created_at = 4;
  string last_update = 5;
}

message CreateProductRequest {
  string name = 1;
  string email = 2;
}