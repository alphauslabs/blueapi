syntax = "proto3";

package blueapi.pricing.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/alphauslabs/blueapi/pricing";
option java_package = "cloud.alphaus.api.pricing";
option java_outer_classname = "PricingProto";

// Pricing service definition.
service Pricing {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "(BETA) Pricing API. Base URL: https://api.alphaus.cloud/m/blue/pricing"
    external_docs: {
      url: "https://github.com/alphauslabs/blueapi/tree/main/pricing/";
      description: "Service definition";
    }
  };

  // Test endpoint only.
  rpc GetInfo(GetInfoRequest) returns (GetInfoResponse) {
    option (google.api.http) = {
      get: "/v0/info"
    };
  }

  //  EC2 service pricing endpoint
  rpc GetEC2Info(GetEC2InfoRequest) returns (GetEC2InfoResponse ) {
    option (google.api.http) = {
      post: "/v0/ec2"
      body: "*"
    };
  }
}

// Request message for the Pricing.GetInfo rpc.
message GetInfoRequest {}

// Response message for the Pricing.GetInfo rpc.
message GetInfoResponse {
  string response = 1;
}

// Request message for the Pricing.GetEC2Info rpc.
message GetEC2InfoRequest {
  string cloud = 1;
  string service = 2;
  string region = 3;
  Compute compute = 4;
}

message Compute {
  string sku = 1;
  string tenancy = 2;
  string os = 3;
}


// Response message for the Pricing.GetEC2Info rpc.
message GetEC2InfoResponse  {
  repeated UnitCost unit_cost_matrix = 1;
  ServiceDetails service_details = 2;
}

message UnitCost {
  string unit = 1;
  double unit_cost = 2;
  string currency = 3;
}

message ServiceDetails {
  ComputeDetails compute = 1;
}

message ComputeDetails {
  string instance_type = 1;
  int32 vcpu = 2;
  int32 memory_gb = 3;
  string os = 4;
  string tenancy = 5;
  string region = 6;
}
