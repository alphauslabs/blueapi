syntax = "proto3";

package blueapi.flow.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/alphauslabs/blueapi/flow";
option java_package = "cloud.alphaus.api.flow";
option java_outer_classname = "FlowProto";

// Flow service definition.
service Flow {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "(ALPHA) Flow API. Base URL: https://api.alphaus.cloud/m/blue/flow"
    external_docs: {
      url: "https://github.com/alphauslabs/blueapi/tree/main/flow/";
      description: "Service definition";
    }
  };
  
  // For Testing Purposes Only.
  rpc GetInfo(GetInfoRequest) returns (GetInfoResponse) {
    option (google.api.http) = {
      get: "/v1/info"
    };
  }

  // Creates a new settings configuration for the user.
  rpc CreateSettings(CreateSettingsRequest) returns (CreateSettingsResponse) {
    option (google.api.http) = {
      post: "/v1/settings"
      body: "*";
    };
  }

  // Update the settings configuration for a user.
  rpc UpdateSettings(UpdateSettingsRequest) returns (UpdateSettingsResponse) {
    option (google.api.http) = {
      put: "/v1/settings/{id}"
      body: "*";
    };
  }

  // Fetch previous settings for a user
  rpc GetSettings(GetSettingsRequest) returns (GetSettingsResponse) {
    option (google.api.http) = {
      get: "/v1/settings/{id}"
    };
  }

  // Fetch user savings plan details
  rpc GetRecommendationDetails(GetRecommendationDetailsRequest) returns (GetRecommendationDetailsResponse) {
    option (google.api.http) = {
      get: "/v1/settings/recommendations/{id}"
    };
  }

  // Gets a CloudFormation launch URL for enabling read-only cross-account access to cost explorer information (API only).
  rpc GetCostExplorerAccessTemplateUrl(GetCostExplorerAccessTemplateUrlRequest) returns (GetCostExplorerAccessTemplateUrlResponse) {
    option (google.api.http) = {
      get: "/v1/aws/xacct/cea"
    };
  }

  // Gets the settings configuration history for a user.
  rpc GetSettingsHistory(GetSettingsHistoryRequest) returns (GetSettingsHistoryResponse) {
    option (google.api.http) = {
      get: "/v1/settings/history/{id}"
    };
  }

  // Creates a default cross-account access role for cost explorer (API only).
  rpc CreateCostExplorerAccess(CreateCostExplorerAccessRequest) returns (CreateCostExplorerAccessResponse) {
    option (google.api.http) = {
      post: "/v1/aws/xacct/cea"
      body: "*"
    };
  }

  // Gets the data for the Flow Dashboard.
  rpc GetDashboardData(GetDashboardDataRequest) returns (GetDashboardDataResponse) {
    option (google.api.http) = {
      post: "/v1/dashboard"
      body: "*"
    };
  }
}

// ##################################### REQUESTS #####################################

// Request message for the Flow.GetInfo rpc.
message GetInfoRequest {}

// Request message for the Flow.CreateSettings rpc.
message CreateSettingsRequest {
  // Required. The id of the payer.
  string id = 1;

  // Required. Account scope determines if the account is payer or linked account. Valid values are `payer` or `linked`.
  string accountScope = 2;

  // Required. Customization setting for SP. Valid values are `COMPUTE_SP` or `EC2_INSTANCE_SP`.
  string customization = 3;

  // Required. Term of the SP. Valid values are `ONE_YEAR` or `THREE_YEARS`.
  string planTerm = 4;

  // Required. Payment option for the SP. Valid values are `ALL_UPFRONT`, `PARTIAL_UPFRONT`, or `NO_UPFRONT`.
  string paymentOption = 5;

  // Required. Lookback period for recommendation. Valid values are `SEVEN_DAYS`, `THIRTY_DAYS`, or `SIXTY_DAYS`.
  string lookBackPeriod = 6;

  // Optional. If EC2 Instance SP is selected in Customization, request will include list of instance family
  string instanceFamily = 7;

  // Optional. Annual budget input for SP.
  double annualBudget = 8;

  // Optional. Purchase approval from the payer for the SP. Default value is `false`.
  bool approval = 9;

  // Required. Payer account ID
  string payerId = 10;
}

// Request message for the Flow.UpdateSettings rpc.
message UpdateSettingsRequest {
  // Required. The id of the payer to update.
  string id = 1;

  // Optional. Update account scope (payer or linked).
  optional string accountScope = 2;

  // Optional. Update customization setting.
  optional string customization = 3;

  // Optional. Update term of the SP.
  optional string planTerm = 4;

  // Optional. Update payment option.
  optional string paymentOption = 5;

  // Optional. Update lookback period.
  optional string lookBackPeriod = 6;

  // Optional. Update list of instance families.
  optional string instanceFamily = 7;

  // Optional. Update annual budget.
  optional double annualBudget = 8;

  // Optional. Update purchase approval.
  optional bool approval = 9;

  // Optional. Update used payerId.
  optional string payerId = 10;
}

// Request message for fetching previous settings configuration of a user.
message GetSettingsRequest {
  // Required. The id of the payer to fetch settings for.
  string id = 1;
}

message GetRecommendationDetailsRequest {
  // Required. The id of the payer to fetch recommendation details for.
  string id = 1;
}

// Request message for the Flow.GetCostExplorerAccessTemplateUrl rpc.
// This endpoint only supports the 'apionly' template type.
message GetCostExplorerAccessTemplateUrlRequest {}

// Request message for the Flow.GetSettingsHistory rpc.
message GetSettingsHistoryRequest {
  // Required. The id of the payer to fetch settings history for.
  string id = 1;
}

// Request message for the Flow.CreateCostExplorerAccess rpc.
// This endpoint only supports the 'apionly' template type.
message CreateCostExplorerAccessRequest {
  // Required. The target AWS account to validate.
  string target = 1;
}

// Request message for the Flow.GetDashboardData rpc.
message GetDashboardDataRequest {
  // The payer account ID to retrieve dashboard data for.
  string payerId = 1;

  // The start date of the dashboard range in YYYY-MM-DD format.
  string startDate = 2;

  // The end date of the dashboard range in YYYY-MM-DD format.
  string endDate = 3;
}

// ##################################### RESPONSES #####################################

// Response message for the Flow.GetInfo rpc.
message GetInfoResponse {
  string response = 1;
}

// Response message for the Flow.CreateSettings rpc.
message CreateSettingsResponse {
  string response = 1;
}

message UpdateSettingsResponse {
  string response = 1;
}

// Response message for fetching previous settings configuration of a user.
message GetSettingsResponse {
  // Unique ID of the settings entry
  string id = 1;

  // Account scope for the settings (payer or linked)
  string accountScope = 2;

  // Customization setting for the Savings Plan
  string customization = 3;

  // Savings Plan term (e.g., ONE_YEAR, THREE_YEARS)
  string planTerm = 4;

  // Payment option for the Savings Plan (e.g., ALL_UPFRONT, PARTIAL_UPFRONT, NO_UPFRONT)
  string paymentOption = 5;

  // Lookback period used for the Savings Plan recommendation (e.g., SEVEN_DAYS, THIRTY_DAYS, SIXTY_DAYS)
  string lookBackPeriod = 6;

  // Instance family for the Savings Plan, if applicable
  string instanceFamily = 7;

  // Annual budget set for the Savings Plan
  double annualBudget = 8;

  // Indicates whether the settings were approved by the payer
  bool approval = 9;

  // The last updated timestamp for this settings entry, in RFC3339 UTC format
  string lastUpdated = 10;

  // Payer account ID associated with the settings
  string payerId = 11;
}

message GetRecommendationDetailsResponse {
  // Unique ID of the recommendation details entry
  string id = 1;
  
  // Projected monthly on-demand spend without Savings Plans, normalized from lookback period
  double currentMonthlyOnDemandSpend = 2;
  
  // Projected total monthly spend after applying the recommended Savings Plan, normalized
  double estimatedMonthlySpend = 3;
  
  // Difference between on-demand and post-SP spend, computed from normalized values
  double estimatedMonthlySavingsDerived = 4;
  
  // Total current daily cost from usage, before applying any SP recommendation (Derived)
  double totalDailyCost = 5;
  
  // Current Savings Plan commitment applied 
  double currentSPCommitment = 6;
  
  // Estimated daily on-demand cost without any Savings Plans
  double estimatedOnDemandCost = 7;
  
  // Suggested hourly commitment to purchase in USD
  double hourlyCommitment = 8;
  
  // Projected monthly savings from the recommended savings plan
  double estimatedMonthlySavings = 9;
  
  // Percentage of potential savings from savings plan
  double estimatedSavings = 10;
  
  // Customization setting for savings plan
  string recommendationLevel = 11;
  
  // Savings plan type.
  string planType = 12;
  
  // Savings plan duration.
  string planTerm = 13;
  
  // Savings plan payment option.
  string paymentOption = 14;
  
  // Savings plan lookback period used for analysis.
  string lookBackPeriod = 15;
  
  // Savings plan estimated return on investment.
  double estimatedROI = 16;
  
  // Savings plan total projected cost over the term.
  double estimatedSPCost = 17;
  
  // Savings plan estimated total cost and including on-demand.
  double estimatedTotalCost = 18;
  
  // Savings plan last updated
  string lastUpdated = 19;
}

// Response message for the Flow.GetCostExplorerAccessTemplateUrl rpc.
message GetCostExplorerAccessTemplateUrlResponse {
  // The CloudFormation launch url. Open it in your browser.
  string launchUrl = 1;

  // The latest CloudFormation template. The version is included in the filename.
  string templateUrl = 2;

  // The default stack name used. Can be modified.
  string stackName = 3;

  // The AWS account that will receive the access. Do not change.
  string principal = 4;

  // The external id for this role. Do not change.
  string externalId = 5;
}

// Settings history message.
message SettingsHistory {
  // Unique identifier for the settings history entry.
  string id = 1;

  // The account scope for the settings (payer or linked).
  string accountScope = 2;

  // The customization setting for the Savings Plan.
  string customization = 3;

  // The term of the Savings Plan (e.g., ONE_YEAR, THREE_YEARS).
  string planTerm = 4;

  // The payment option for the Savings Plan (e.g., ALL_UPFRONT, PARTIAL_UPFRONT, NO_UPFRONT).
  string paymentOption = 5;

  // The lookback period used for the Savings Plan recommendation.
  string lookBackPeriod = 6;

  // The instance family for the Savings Plan, if applicable.
  string instanceFamily = 7;

  // The annual budget set for the Savings Plan.
  double annualBudget = 8;

  // Indicates whether the settings were approved by the payer.
  bool approval = 9;

  // The last updated timestamp for this settings history entry, in RFC3339 UTC format.
  string lastUpdated = 10;
}

// Response message for the Flow.GetSettingsHistory rpc.
message GetSettingsHistoryResponse {
  repeated SettingsHistory settingsHistory = 1;
}

// Response message for the Flow.CreateCostExplorerAccess rpc.
message CreateCostExplorerAccessResponse {
  // The queried target account.
  string target = 1;

  // The role ARN that provides the cross-account access permissions.
  string roleArn = 2;

  // The external id for this role.
  string externalId = 3;

  // The id of the CloudFormation stack deployed in the target account.
  string stackId = 4;

  // The region where the stack is deployed.
  string stackRegion = 5;

  // The latest template used to deploy the stack.
  string templateUrl = 6;

  // This can be `latest`, `outdated`, or some error information.
  string status = 7;

  // The last updated timestamp, RFC3339 UTC.
  string lastUpdated = 8;
}

// Dashboard data message.
message DashboardData {
  // The payer account ID associated with the data.
  string payerId = 1;

  // The specific date this record summarizes (YYYY-MM-DD).
  string currentDate = 2;

  // Recommended hourly commitment for Savings Plan in USD.
  double spRecommendation = 3;

  // Estimated monthly savings from using Savings Plans in USD.
  double estimatedSavings = 4;

  // Estimated percentage savings compared to On-Demand costs.
  double estimatedSavingsPercentage = 5;

  // Total On-Demand usage in hours for the date.
  double ondemandUsage = 6;

  // Total On-Demand cost in USD for the date.
  double ondemandCost = 7;
  
  // Total Reserved Instance usage in hours for the date.
  double reservedUsage = 8;

  // Total Reserved Instance cost in USD for the date.
  double reservedCost = 9;

  // Total Savings Plan usage in hours for the date.
  double savingsPlanUsage = 10;

  // Total Savings Plan cost in USD for the date.
  double savingsPlanCost = 11;

  // Total Spot Instance usage in hours for the date.
  double spotUsage = 12;

  // Total Spot Instance cost in USD for the date.
  double spotCost = 13;

  // Raw tags or metadata associated with the applied Savings Plan.
  string spTags = 14;
}

// Response message for the Flow.GetDashboardData rpc.
message GetDashboardDataResponse {
  // List of daily dashboard data entries within the requested date range.
  repeated DashboardData dashboardData = 1;
}